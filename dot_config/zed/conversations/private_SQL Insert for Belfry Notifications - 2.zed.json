{"id":"9e827dab-9f60-4038-be8e-059ea626f1e1","zed":"context","version":"0.4.0","text":"\n\n\n```sql platform/apps/belfry/db/migrations/20241112190351_initial.sql\n-- migrate:up\nCREATE SCHEMA IF NOT EXISTS belfry;\n\n-- Providers\nCREATE TYPE belfry.provider_type AS ENUM ('email', 'inbox');\n\nCREATE TABLE belfry.providers (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  type belfry.provider_type NOT NULL,\n  name TEXT NOT NULL,\n  workflow_name TEXT NOT NULL,\n  workflow_task_queue TEXT NOT NULL,\n\n  UNIQUE(name, type)\n);\n\n-- Notifications\nCREATE TYPE belfry.notification_type AS ENUM ('approval', 'information', 'digest');\nCREATE TYPE belfry.notification_status AS ENUM ('created', 'processed', 'failed');\n\nCREATE TABLE belfry.notifications (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  tenant_id UUID NOT NULL,\n  recipient_ids UUID[] NOT NULL,\n  -- Will be made not null when provider logic is implemented\n  provider_ids UUID[],\n  message TEXT NOT NULL,\n  priority integer NOT NULL,\n  type belfry.notification_type NOT NULL,\n  data JSONB DEFAULT '{}'::jsonb,\n  status belfry.notification_status NOT NULL DEFAULT 'created',\n  created_at TIMESTAMP DEFAULT current_timestamp\n);\n\n-- Deliveries\nCREATE TYPE belfry.delivery_status AS ENUM ('created', 'delivered', 'failed');\n\nCREATE TABLE belfry.deliveries (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  notification_id UUID NOT NULL,\n  provider_id UUID NOT NULL,\n  recipient_id UUID NOT NULL,\n  status belfry.delivery_status NOT NULL DEFAULT 'created',\n  sent_at TIMESTAMP,\n  read_at TIMESTAMP,\n\n  FOREIGN KEY (notification_id) REFERENCES belfry.notifications(id),\n  FOREIGN KEY (provider_id) REFERENCES belfry.providers(id),\n\n  UNIQUE(notification_id, provider_id, recipient_id)\n);\n\nCREATE VIEW belfry.inbox_messages AS\nSELECT\n  d.notification_id,\n  d.recipient_id,\n  d.provider_id,\n  n.tenant_id,\n  n.message,\n  n.data,\n  n.priority,\n  n.type,\n  n.created_at\nFROM belfry.deliveries AS d\nINNER JOIN belfry.providers AS p\n  ON p.id = d.provider_id\nINNER JOIN belfry.notifications AS n\n  ON n.id = d.notification_id\nWHERE p.type = 'inbox'::belfry.provider_type;\n\n-- migrate:down\nDROP VIEW belfry.inbox_messages;\n\nDROP TABLE belfry.deliveries;\nDROP TYPE belfry.delivery_status;\n\nDROP TABLE belfry.notifications;\nDROP TYPE belfry.notification_status;\nDROP TYPE belfry.notification_type;\n\nDROP TABLE belfry.providers;\nDROP TYPE belfry.provider_type;\n\nDROP SCHEMA belfry;\n```\n\n```sql platform/apps/belfry/db/migrations/20241113190712_recipients_tables.sql\n-- migrate:up\nCREATE TYPE belfry.recipient_type AS ENUM ('user');\n\nCREATE TABLE belfry.recipients (\n  id uuid PRIMARY KEY,\n  tenant_id uuid NOT NULL,\n  email TEXT NOT NULL,\n  type belfry.recipient_type NOT NULL\n);\n\nCREATE TABLE belfry.notification_types (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  name TEXT NOT NULL,\n  category TEXT NOT NULL,\n\n  UNIQUE(name, category)\n);\n\nINSERT INTO belfry.notification_types (name, category)\nVALUES\n('approval', 'general'),\n('information', 'general'),\n('digest', 'general');\n\nINSERT INTO belfry.notifications (\ntenant_id, recipient_ids,message,priority,type\n) VALUES (\n  'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', '{db1a41533-e4d0-48ab-adc4-5c1d0f98aa4f}', 'test',0,'information'\n);\n\nALTER TABLE belfry.notifications\nADD type_id uuid NOT NULL,\nADD CONSTRAINT notifications_type_id_fkey FOREIGN KEY (type_id) REFERENCES belfry.notification_types(id);\n\nUPDATE belfry.notifications\nSET type_id = (SELECT id FROM belfry.notification_types WHERE name = type::text);\n\nDROP VIEW belfry.inbox_messages;\n\nCREATE VIEW belfry.inbox_messages AS\nSELECT\n  d.notification_id,\n  d.recipient_id,\n  d.provider_id,\n  n.tenant_id,\n  n.message,\n  n.data,\n  n.priority,\n  CONCAT(nt.name, ':', nt.category)::TEXT AS type,\n  n.created_at\nFROM belfry.deliveries AS d\nINNER JOIN belfry.providers AS p\n  ON p.id = d.provider_id\nINNER JOIN belfry.notifications AS n\n  ON n.id = d.notification_id\nINNER JOIN belfry.notification_types AS nt\n  on n.type_id = nt.id\nWHERE p.type = 'inbox'::belfry.provider_type;\n\nALTER TABLE belfry.notifications\nDROP COLUMN type;\n\nDROP TYPE belfry.notification_type;\n\nCREATE TABLE belfry.recipient_preferences (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  recipient_id uuid NOT NULL,\n  provider_id uuid NOT NULL,\n  notification_type_id uuid NOT NULL,\n  threshold INT NOT NULL,\n  enabled BOOL NOT NULL DEFAULT true,\n  schedule TEXT,\n\n  UNIQUE(recipient_id, provider_id, notification_type_id),\n\n  FOREIGN KEY (recipient_id) REFERENCES belfry.recipients(id),\n  FOREIGN KEY (provider_id) REFERENCES belfry.providers(id),\n  FOREIGN KEY (notification_type_id) REFERENCES belfry.notification_types(id)\n);\n\n-- migrate:down\n\nDROP TABLE belfry.recipient_preferences;\n\nCREATE TYPE belfry.notification_type AS ENUM ('approval', 'information', 'digest', 'unknown');\n\nALTER TABLE belfry.notifications\nADD COLUMN type belfry.notification_type NOT NULL;\n\n-- This is unsafe in the future when we may have types that don't match the original enum set.\n-- How do I mitigate this?\nUPDATE belfry.notifications\nSET type = (\nSELECT\n  CASE\n    WHEN name IN ('approval', 'information', 'digest') THEN name\n    ELSE 'unknown'\n  END\nFROM belfry.notification_types\nWHERE id = type_id\n)::belfry.notification_type;\n\nDROP VIEW belfry.inbox_messages;\n\nCREATE VIEW belfry.inbox_messages AS\nSELECT\n  d.notification_id,\n  d.recipient_id,\n  d.provider_id,\n  n.tenant_id,\n  n.message,\n  n.data,\n  n.priority,\n  n.type,\n  n.created_at\nFROM belfry.deliveries AS d\nINNER JOIN belfry.providers AS p\n  ON p.id = d.provider_id\nINNER JOIN belfry.notifications AS n\n  ON n.id = d.notification_id\nWHERE p.type = 'inbox'::belfry.provider_type;\n\nALTER TABLE belfry.notifications\nDROP COLUMN type_id;\n\nDROP TABLE belfry.notification_types;\n\nDROP TABLE belfry.recipients;\n\nDROP TYPE belfry.recipient_type;\n```\n\ngiven these two files, generate an insert statement to add a record to the `belfry.notifications` table\n```sql\nINSERT INTO belfry.notifications (tenant_id, recipient_ids, provider_ids, message, priority, type_id, data)\nVALUES (\n    'your_tenant_id', \n    '{recipient_id_1, recipient_id_2}', -- Array of recipient UUIDs\n    '{provider_id_1, provider_id_2}', -- Array of provider UUIDs (optional)\n    'Your notification message',\n    0, -- Priority (integer)\n    (SELECT id FROM belfry.notification_types WHERE name = 'information' AND category = 'general'), -- Type_id (obtained from notification_types table)\n    '{\"key1\": \"value1\", \"key2\": \"value2\"}'::jsonb -- Data (optional JSONB)\n);\n```\n\n**Explanation and Important Considerations:**\n\n1. **UUIDs:**  Replace placeholders like `your_tenant_id`, `recipient_id_1`, `recipient_id_2`, `provider_id_1`, and `provider_id_2` with actual UUID values. You'll need to have these UUIDs ready or generate them.  The `recipient_ids` and `provider_ids` are arrays of UUIDs.  Use the correct syntax for UUID arrays: `{uuid1, uuid2, ...}`.\n\n2. **Type_id:** The `type_id` must be a valid UUID referencing the `belfry.notification_types` table.  The example uses a subquery `(SELECT id FROM belfry.notification_types WHERE name = 'information' AND category = 'general')` to retrieve the correct `type_id` based on the `name` and `category`.   You *must* ensure a matching record exists in the `notification_types` table.\n\n3. **Data (JSONB):** The `data` column is of type JSONB and allows you to store additional information related to the notification. The example demonstrates inserting a JSON object, but you can adjust it according to your needs or omit it if not required.\n\n4. **provider_ids (Optional):** The `provider_ids` column appears to be optional (based on the comment in the migration). If you don't have specific providers to assign at this point, you can either omit it from the `INSERT` statement or provide an empty array `'{}'`.\n\n5. **Priority:** The `priority` column is an integer. Choose an appropriate priority value based on your notification system's design.\n\n\n**Example using generated UUIDs (pseudo-code, adapt to your environment):**\n\n```sql\nINSERT INTO belfry.notifications (tenant_id, recipient_ids, provider_ids, message, priority, type_id, data)\nVALUES (\n    gen_random_uuid(),  -- Generate a new tenant UUID\n    '{gen_random_uuid(), gen_random_uuid()}', -- Generate recipient UUIDs\n    '{gen_random_uuid()}',  -- Generate a provider UUID \n    'Your notification message',\n    0, \n    (SELECT id FROM belfry.notification_types WHERE name = 'information' AND category = 'general'), \n    '{\"key1\": \"value1\", \"key2\": \"value2\"}'::jsonb\n);\n```\n\n\nRemember to replace the `gen_random_uuid()` calls with a mechanism appropriate for your database system (e.g., `uuid_generate_v4()` in PostgreSQL) or provide existing UUID values as needed.\ninsert random uuids where necessary\n```sql\nINSERT INTO belfry.notifications (tenant_id, recipient_ids, provider_ids, message, priority, type_id, data)\nplatform/apps/belfry\n```toml platform/apps/belfry/.air.toml\nroot = \".\"\ntmp_dir = \"tmp\"\n\n[build]\n  full_bin = \"./bin/belfry server\"\n  cmd = \"go build -o bin/belfry cmd/belfry/main.go\"\n  post_cmd = [\"pkill notification\"]\n  delay = 1000\n  exclude_regex = [\"_test\\\\.go\"]\n  include_dir = [\"cmd\", \"internal\", \"pkg\"]\n  include_ext = [\"go\"]\n  kill_delay = 5000000000\n  log = \"build-errors.log\"\n  rerun = false\n  rerun_delay = 500\n  send_interrupt = true\n  stop_on_error = true\n\n[color]\n  app = \"\"\n  build = \"yellow\"\n  main = \"magenta\"\n  runner = \"green\"\n  watcher = \"cyan\"\n\n[log]\n  main_only = false\n  time = false\n\n[screen]\n  clear_on_rebuild = true\n  keep_scroll = false\n```\n\n```platform/apps/belfry/.env\nCONFIG_BASE_DIR=\"./deploy/local\"\nDATABASE_URL=\"postgres://postgres:password@127.0.0.1:5432/belfry?sslmode=disable\"\n```\n\n```platform/apps/belfry/.gitignore\n# generated coverage file\ncoverage.out\n```\n\n```toml platform/apps/belfry/.mise.toml\n[env]\n_.file = \".env\"\n```\n\n```yaml platform/apps/belfry/.mockery.yaml\n---\nquiet: false\ndisable-version-string: true\nwith-expecter: true\nfilename: \"mock_{{.InterfaceName | lower}}.go\"\ndir: \"{{.InterfaceDir}}/mocks\"\nmockname: \"Mock{{.InterfaceName}}\"\noutpkg: \"mocks\"\npackages:\n  github.com/immuta/platform/apps/belfry/internal/database:\n    interfaces:\n      Querier:\n  github.com/immuta/platform/apps/belfry/internal/database/querier:\n    config:\n      all: true\n```\n\n```md platform/apps/belfry/README.md\n# Notification Service (belfry)\n\n## Development - Getting Started\n\n### Development Tools\n\nThis project uses `mise` to manage development tools. Install the required tools using:\n\n```console\nnx setup belfry\n```\n\n### Database\n\nA Postgres database can be started by running the following:\n\n```shell\ndocker compose up --detach\n```\n\nThis will use the default user defined in the Docker Compose file and apply any migrations defined in the `db/migrations/` directory.\n\n#### SQLC\n\nThis project uses [sqlc](https://sqlc.dev/) to compile SQL to type-safe Go code. The database files can be found under `db/schema.sql` and `db/queries/`. To generate the type-safe code, run the following:\n\n```shell\nnx sqlc-generate belfry\n```\n\n#### Database Migrations\n\n##### dbmate\n\nThis project uses [dbmate](https://github.com/amacneil/dbmate) to manage database migrations.\n\n##### Generating Migrations\n\nTo generate a new migration, run the following:\n\n```shell\nnx dbmate-migrate belfry --name=<MIGRATION_NAME>\n```\n\nThe generated migration will be written to `db/migrations/` with the format `<date>_<migration_name>.sql`. Added SQL relevant to your changes for both `up` and `down` migrations.\n\n##### Applying the Migrations\n\nWhen using the Docker Compose workflow, the migrations should be applied automatically when started. To manually apply the migration, run the following:\n\n```shell\nnx dbmate-apply belfry\n```\n\n### Connect RPC\n\nThis project uses [connectrpc](https://connectrpc.com/) to build gRPC & HTTP compatible APIs. The Protobuf files are located in the `proto/` directory and contain the service and message definitions.\n\nThe `buf` CLI is used for code gen and linting.\n\n#### Generating Connect Server Code\n\nAfter updating a file in the `proto/` directory, the server code must be (re)generated. This can happen by calling:\n\n```shell\nnx buf-generate belfry\n```\n\n#### Linting Protobufs\n\nThe Protobuf files can be linted using the `buf` linter configurations. This ensure the API adheres to best practices. To lint the Protobuf files, run the following:\n\n```shell\nnx buf-lint belfry\n```\n```\n\n```yaml platform/apps/belfry/buf.gen.yaml\n---\nversion: v2\nmanaged:\n  enabled: true\n  override:\n    - file_option: go_package_prefix\n      value: github.com/immuta/platform/apps/belfry/internal/service\n  disable:\n    - file_option: go_package_prefix\n      module: buf.build/bufbuild/protovalidate\nplugins:\n  - local: protoc-gen-go\n    out: internal/service\n    opt: paths=source_relative\n  - local: protoc-gen-connect-go\n    out: internal/service\n    opt: paths=source_relative\n```\n\n```lock platform/apps/belfry/buf.lock\n# Generated by buf. DO NOT EDIT.\nversion: v2\ndeps:\n  - name: buf.build/bufbuild/protovalidate\n    commit: 5a7b106cbb87462d9a8c9ffecdbd2e38\n    digest: b5:0f2dc6c9453e9cc9e9f36807aaa5f94022e837d91fef4dcaeed79a35c0843cc64eba28ff077aab24da3b2cb12639ad256246f9f9a36c033b99d5754b19996b7e\n```\n\n```yaml platform/apps/belfry/buf.yaml\n---\nversion: v2\nmodules:\n  - path: proto\nlint:\n  use:\n    - STANDARD\n  except:\n    # Disable rule requiring the directory structure to match the package name\n    - PACKAGE_DIRECTORY_MATCH\nbreaking:\n  use:\n    - FILE\ndeps:\n  - buf.build/bufbuild/protovalidate\n```\n\nbuild/package\n```platform/apps/belfry/build/package/Dockerfile\nARG REGISTRY=registry.ic-ops.net\nARG ROCKYLINUX_VERSION=9\nARG GO_VERSION=1.23\nARG GOPROXY=\"athens.infrastructure.immuta.io,direct\"\nARG GONOSUMDB=\"github.com/immuta/*\"\nARG UID=6788\nARG DESTDIR=/out\nARG BELFRY_BASE_DIR=/opt/immuta/belfry\n\nFROM ${REGISTRY}/base/golang:${GO_VERSION}-rockylinux${ROCKYLINUX_VERSION}-minimal AS base\nFROM ${REGISTRY}/base/rockylinux:${ROCKYLINUX_VERSION}-hardened AS runtime-base\n\nFROM base AS belfry-config\n\nARG DESTDIR\nARG UID\nARG BELFRY_BASE_DIR\n\nRUN set -eux; \\\n    mkdir -p -m 0700 \"${DESTDIR}${BELFRY_BASE_DIR}\"; \\\n    chown -R ${UID}:${UID} \"${DESTDIR}/opt/immuta\"\n\nFROM base AS belfry-build\n\nARG DESTDIR\nARG GOPROXY\nARG GONOSUMDB\n\nENV GOPROXY=$GOPROXY\nENV GONOSUMDB=$GONOSUMDB\n\nCOPY . src/\nWORKDIR src/apps/belfry\n\nRUN set -eux; \\\n    mkdir -p ${DESTDIR}; \\\n    go mod download; \\\n    go build -ldflags=\"-s -w\" -a -o \"${DESTDIR}/belfry\" cmd/belfry/main.go\n\nFROM runtime-base\n\nARG DESTDIR\nARG UID\nARG SERVICE_VERSION\n\nENV DEFAULT_UID=$UID\nENV SERVICE_VERSION=$SERVICE_VERSION\n\nCOPY --from=belfry-build ${DESTDIR}/ /usr/bin\nCOPY --from=belfry-config ${DESTDIR}/ /\n\nUSER $UID\n\nENTRYPOINT [\"/usr/bin/belfry\"]\n```\n\n\ncmd/belfry\n```go platform/apps/belfry/cmd/belfry/main.go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log/slog\"\n\t\"net/url\"\n\t\"os\"\n\n\t\"github.com/urfave/cli/v2\"\n\n\t\"github.com/immuta/platform/apps/belfry/db\"\n\t\"github.com/immuta/platform/apps/belfry/internal/config\"\n\t\"github.com/immuta/platform/apps/belfry/internal/instrumentation\"\n\t\"github.com/immuta/platform/apps/belfry/internal/server\"\n)\n\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\n\tcfg, err := config.LoadConfig()\n\tif err != nil {\n\t\tslog.Error(\"failed to initialize config\", \"err\", err)\n\t\tos.Exit(1)\n\t}\n\n\tif err := instrumentation.Initialize(ctx, cfg); err != nil {\n\t\tslog.Error(\"failed to initialize instrumentation\", \"err\", err)\n\t\tos.Exit(1)\n\t}\n\n\tapp := &cli.App{\n\t\tDefaultCommand: \"server\",\n\t\tCommands: []*cli.Command{\n\t\t\t{\n\t\t\t\tName:  \"server\",\n\t\t\t\tUsage: \"run api server\",\n\t\t\t\tAction: func(_ *cli.Context) error {\n\t\t\t\t\treturn server.Run(ctx, cancel, cfg)\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tName:  \"migrate\",\n\t\t\t\tUsage: \"apply database migrations\",\n\t\t\t\tAction: func(_ *cli.Context) error {\n\t\t\t\t\tu, err := url.Parse(cfg.Database.URL)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn fmt.Errorf(\"unable to parse database url: %w\", err)\n\t\t\t\t\t}\n\n\t\t\t\t\treturn db.Migrate(cfg.Migrations, u)\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tif err := app.Run(os.Args); err != nil {\n\t\tslog.Error(\"error running app\", \"err\", err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n\ndb\n```go platform/apps/belfry/db/migrate.go\npackage db\n\nimport (\n\t\"embed\"\n\t\"net/url\"\n\n\t\"github.com/amacneil/dbmate/v2/pkg/dbmate\"\n\t// Necessary to run migrations.\n\t_ \"github.com/amacneil/dbmate/v2/pkg/driver/postgres\"\n\n\t\"github.com/immuta/platform/apps/belfry/internal/config\"\n)\n\n//go:embed migrations/*.sql\nvar migrations embed.FS\n\nfunc Migrate(cfg config.Migrations, url *url.URL) error {\n\tdb := dbmate.New(url)\n\tdb.FS = migrations\n\tdb.MigrationsDir = []string{\"migrations\"}\n\tdb.AutoDumpSchema = false\n\tdb.WaitBefore = true\n\tdb.WaitTimeout = cfg.WaitTimeout\n\tdb.WaitInterval = cfg.WaitInterval\n\tdb.MigrationsTableName = \"belfry.schema_migrations\"\n\n\t// Create migrations table if not exist and apply migrations\n\treturn db.Migrate()\n}\n```\n\nmigrations\n```sql platform/apps/belfry/db/migrations/20241112190351_initial.sql\n-- migrate:up\nCREATE SCHEMA IF NOT EXISTS belfry;\n\n-- Providers\nCREATE TYPE belfry.provider_type AS ENUM ('email', 'inbox');\n\nCREATE TABLE belfry.providers (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  type belfry.provider_type NOT NULL,\n  name TEXT NOT NULL,\n  workflow_name TEXT NOT NULL,\n  workflow_task_queue TEXT NOT NULL,\n\n  UNIQUE(name, type)\n);\n\n-- Notifications\nCREATE TYPE belfry.notification_type AS ENUM ('approval', 'information', 'digest');\nCREATE TYPE belfry.notification_status AS ENUM ('created', 'processed', 'failed');\n\nCREATE TABLE belfry.notifications (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  tenant_id UUID NOT NULL,\n  recipient_ids UUID[] NOT NULL,\n  -- Will be made not null when provider logic is implemented\n  provider_ids UUID[],\n  message TEXT NOT NULL,\n  priority integer NOT NULL,\n  type belfry.notification_type NOT NULL,\n  data JSONB DEFAULT '{}'::jsonb,\n  status belfry.notification_status NOT NULL DEFAULT 'created',\n  created_at TIMESTAMP DEFAULT current_timestamp\n);\n\n-- Deliveries\nCREATE TYPE belfry.delivery_status AS ENUM ('created', 'delivered', 'failed');\n\nCREATE TABLE belfry.deliveries (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  notification_id UUID NOT NULL,\n  provider_id UUID NOT NULL,\n  recipient_id UUID NOT NULL,\n  status belfry.delivery_status NOT NULL DEFAULT 'created',\n  sent_at TIMESTAMP,\n  read_at TIMESTAMP,\n\n  FOREIGN KEY (notification_id) REFERENCES belfry.notifications(id),\n  FOREIGN KEY (provider_id) REFERENCES belfry.providers(id),\n\n  UNIQUE(notification_id, provider_id, recipient_id)\n);\n\nCREATE VIEW belfry.inbox_messages AS\nSELECT\n  d.notification_id,\n  d.recipient_id,\n  d.provider_id,\n  n.tenant_id,\n  n.message,\n  n.data,\n  n.priority,\n  n.type,\n  n.created_at\nFROM belfry.deliveries AS d\nINNER JOIN belfry.providers AS p\n  ON p.id = d.provider_id\nINNER JOIN belfry.notifications AS n\n  ON n.id = d.notification_id\nWHERE p.type = 'inbox'::belfry.provider_type;\n\n-- migrate:down\nDROP VIEW belfry.inbox_messages;\n\nDROP TABLE belfry.deliveries;\nDROP TYPE belfry.delivery_status;\n\nDROP TABLE belfry.notifications;\nDROP TYPE belfry.notification_status;\nDROP TYPE belfry.notification_type;\n\nDROP TABLE belfry.providers;\nDROP TYPE belfry.provider_type;\n\nDROP SCHEMA belfry;\n```\n\n```sql platform/apps/belfry/db/migrations/20241113190712_recipients_tables.sql\n-- migrate:up\nCREATE TYPE belfry.recipient_type AS ENUM ('user');\n\nCREATE TABLE belfry.recipients (\n  id uuid PRIMARY KEY,\n  tenant_id uuid NOT NULL,\n  email TEXT NOT NULL,\n  type belfry.recipient_type NOT NULL\n);\n\nCREATE TABLE belfry.notification_types (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  name TEXT NOT NULL,\n  category TEXT NOT NULL,\n\n  UNIQUE(name, category)\n);\n\nINSERT INTO belfry.notification_types (name, category)\nVALUES\n('approval', 'general'),\n('information', 'general'),\n('digest', 'general');\n\nALTER TABLE belfry.notifications\nADD type_id uuid,\nADD CONSTRAINT notifications_type_id_fkey FOREIGN KEY (type_id) REFERENCES belfry.notification_types(id);\n\nUPDATE belfry.notifications\nSET type_id = (SELECT id FROM belfry.notification_types WHERE name = type::text);\n\nALTER TABLE belfry.notifications\nALTER COLUMN type_id SET NOT NULL;\n\nDROP VIEW belfry.inbox_messages;\n\nCREATE VIEW belfry.inbox_messages AS\nSELECT\n  d.notification_id,\n  d.recipient_id,\n  d.provider_id,\n  n.tenant_id,\n  n.message,\n  n.data,\n  n.priority,\n  CONCAT(nt.name, ':', nt.category)::TEXT AS type,\n  n.created_at\nFROM belfry.deliveries AS d\nINNER JOIN belfry.providers AS p\n  ON p.id = d.provider_id\nINNER JOIN belfry.notifications AS n\n  ON n.id = d.notification_id\nINNER JOIN belfry.notification_types AS nt\n  on n.type_id = nt.id\nWHERE p.type = 'inbox'::belfry.provider_type;\n\nALTER TABLE belfry.notifications\nDROP COLUMN type;\n\nDROP TYPE belfry.notification_type;\n\nCREATE TABLE belfry.recipient_preferences (\n  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n  recipient_id uuid NOT NULL,\n  provider_id uuid NOT NULL,\n  notification_type_id uuid NOT NULL,\n  threshold INT NOT NULL,\n  enabled BOOL NOT NULL DEFAULT true,\n  schedule TEXT,\n\n  UNIQUE(recipient_id, provider_id, notification_type_id),\n\n  FOREIGN KEY (recipient_id) REFERENCES belfry.recipients(id),\n  FOREIGN KEY (provider_id) REFERENCES belfry.providers(id),\n  FOREIGN KEY (notification_type_id) REFERENCES belfry.notification_types(id)\n);\n\n-- migrate:down\n\nDROP TABLE belfry.recipient_preferences;\n\nCREATE TYPE belfry.notification_type AS ENUM ('approval', 'information', 'digest', 'unknown');\n\nALTER TABLE belfry.notifications\nADD COLUMN type belfry.notification_type;\n\n-- This is unsafe in the future when we may have types that don't match the original enum set.\n-- How do I mitigate this?\nUPDATE belfry.notifications\nSET type = (\nSELECT\n  CASE\n    WHEN name IN ('approval', 'information', 'digest') THEN name\n    ELSE 'unknown'\n  END\nFROM belfry.notification_types\nWHERE id = type_id\n)::belfry.notification_type;\n\nALTER TABLE belfry.notifications\nALTER COLUMN type SET NOT NULL;\n\nDROP VIEW belfry.inbox_messages;\n\nCREATE VIEW belfry.inbox_messages AS\nSELECT\n  d.notification_id,\n  d.recipient_id,\n  d.provider_id,\n  n.tenant_id,\n  n.message,\n  n.data,\n  n.priority,\n  n.type,\n  n.created_at\nFROM belfry.deliveries AS d\nINNER JOIN belfry.providers AS p\n  ON p.id = d.provider_id\nINNER JOIN belfry.notifications AS n\n  ON n.id = d.notification_id\nWHERE p.type = 'inbox'::belfry.provider_type;\n\nALTER TABLE belfry.notifications\nDROP COLUMN type_id;\n\nDROP TABLE belfry.notification_types;\n\nDROP TABLE belfry.recipients;\n\nDROP TYPE belfry.recipient_type;\n```\n\n\nqueries\n```sql platform/apps/belfry/db/queries/deliveries.sql\n-- name: GetDelivery :one\nSELECT *\nFROM belfry.deliveries\nWHERE id = $1;\n\n-- name: GetDeliveriesByNotification :many\nSELECT *\nFROM belfry.deliveries\nWHERE notification_id = $1;\n\n-- name: CreateDelivery :one\nINSERT INTO belfry.deliveries (\n  notification_id,\n  provider_id,\n  recipient_id\n) VALUES (\n  $1, $2, $3\n)\nRETURNING *;\n\n-- name: UpdateDelivery :one\nUPDATE belfry.deliveries SET\n  status = COALESCE(sqlc.narg('status'), status),\n  sent_at = COALESCE(sqlc.narg('sent_at'), sent_at),\n  read_at = COALESCE(sqlc.narg('read_at'), read_at)\nWHERE id = $1\nRETURNING *;\n\n-- name: CreateDeliveriesForNotification :many\nWITH inserted_rows AS (\n  INSERT INTO belfry.deliveries (notification_id, recipient_id, provider_id)\n  SELECT n.id, r.recipient_id, p.provider_id\n  FROM belfry.notifications n\n  CROSS JOIN unnest(n.recipient_ids) AS r(recipient_id)\n  CROSS JOIN unnest(n.provider_ids) AS p(provider_id)\n  WHERE n.id = $1\n  ON CONFLICT (notification_id, recipient_id, provider_id) DO NOTHING\n  RETURNING *\n)\nSELECT * FROM belfry.deliveries\nWHERE notification_id = $1\nUNION ALL\nSELECT * FROM inserted_rows;\n```\n\n```sql platform/apps/belfry/db/queries/inbox.sql\n-- name: GetInboxMessages :many\nSELECT *\nFROM belfry.inbox_messages\nWHERE recipient_id = $1\n  AND provider_id = $2\n  AND tenant_id = $3;\n```\n\n```sql platform/apps/belfry/db/queries/notification_types.sql\n-- name: GetNotificationType :one\nSELECT *\nFROM belfry.notification_types\nWHERE id = $1;\n\n-- name: GetNotificationTypeByNameAndCategory :one\nSELECT *\nFROM belfry.notification_types\nWHERE name = $1\n  AND category = $2;\n\n-- name: CreateNotificationType :one\nINSERT INTO belfry.notification_types (\n  name, category\n) VALUES (\n  $1, $2\n)\nRETURNING *\n;\n```\n\n```sql platform/apps/belfry/db/queries/notifications.sql\n-- name: GetNotification :one\nSELECT\nn.*,\nCONCAT(t.name, ':', t.category)::TEXT AS type\nFROM belfry.notifications AS n\nINNER JOIN belfry.notification_types AS t\n  ON n.type_id = t.id\nWHERE n.id = $1;\n\n-- name: GetNotificationsByStatus :many\nSELECT\nn.*,\nCONCAT(t.name, ':', t.category)::TEXT AS type\nFROM belfry.notifications AS n\nINNER JOIN belfry.notification_types AS t\n  ON n.type_id = t.id\nWHERE status = $1;\n\n-- name: CreateNotification :one\nINSERT INTO belfry.notifications (\n  tenant_id,\n  recipient_ids,\n  provider_ids,\n  message,\n  priority,\n  type_id,\n  data\n) VALUES (\n  $1, $2, $3, $4, $5, $6, $7\n)\nRETURNING *;\n\n-- name: UpdateNotificationStatus :exec\nUPDATE belfry.notifications SET\n  status = $2\nWHERE id = $1;\n```\n\n```sql platform/apps/belfry/db/queries/providers.sql\n-- name: GetProvider :one\nSELECT *\nFROM belfry.providers\nWHERE id = $1;\n\n-- name: GetProvidersByNameAndType :one\nSELECT *\nFROM belfry.providers\nWHERE type = $1\n  AND name = $2;\n\n-- name: CreateProvider :one\nINSERT INTO belfry.providers (\n  type, name, workflow_name, workflow_task_queue\n) VALUES (\n  $1, $2, $3, $4\n)\nRETURNING *\n;\n\n-- name: DeleteProvider :exec\nDELETE FROM belfry.providers\nWHERE id = $1;\n\n-- name: UpdateProvider :one\nUPDATE belfry.providers SET\n  workflow_name = COALESCE(sqlc.narg('workflow_name'), workflow_name),\n  workflow_task_queue = COALESCE(sqlc.narg('workflow_task_queue'), workflow_task_queue)\nWHERE ID = $1\nRETURNING *;\n```\n\n\n```sql platform/apps/belfry/db/schema_snapshot.sql\nSET statement_timeout = 0;\nSET lock_timeout = 0;\nSET idle_in_transaction_session_timeout = 0;\nSET client_encoding = 'UTF8';\nSET standard_conforming_strings = on;\nSELECT pg_catalog.set_config('search_path', '', false);\nSET check_function_bodies = false;\nSET xmloption = content;\nSET client_min_messages = warning;\nSET row_security = off;\n\n--\n-- Name: belfry; Type: SCHEMA; Schema: -; Owner: -\n--\n\nCREATE SCHEMA belfry;\n\n\n--\n-- Name: delivery_status; Type: TYPE; Schema: belfry; Owner: -\n--\n\nCREATE TYPE belfry.delivery_status AS ENUM (\n    'created',\n    'delivered',\n    'failed'\n);\n\n\n--\n-- Name: notification_status; Type: TYPE; Schema: belfry; Owner: -\n--\n\nCREATE TYPE belfry.notification_status AS ENUM (\n    'created',\n    'processed',\n    'failed'\n);\n\n\n--\n-- Name: provider_type; Type: TYPE; Schema: belfry; Owner: -\n--\n\nCREATE TYPE belfry.provider_type AS ENUM (\n    'email',\n    'inbox'\n);\n\n\n--\n-- Name: recipient_type; Type: TYPE; Schema: belfry; Owner: -\n--\n\nCREATE TYPE belfry.recipient_type AS ENUM (\n    'user'\n);\n\n\nSET default_tablespace = '';\n\nSET default_table_access_method = heap;\n\n--\n-- Name: deliveries; Type: TABLE; Schema: belfry; Owner: -\n--\n\nCREATE TABLE belfry.deliveries (\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    notification_id uuid NOT NULL,\n    provider_id uuid NOT NULL,\n    recipient_id uuid NOT NULL,\n    status belfry.delivery_status DEFAULT 'created'::belfry.delivery_status NOT NULL,\n    sent_at timestamp without time zone,\n    read_at timestamp without time zone\n);\n\n\n--\n-- Name: notification_types; Type: TABLE; Schema: belfry; Owner: -\n--\n\nCREATE TABLE belfry.notification_types (\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    name text NOT NULL,\n    category text NOT NULL\n);\n\n\n--\n-- Name: notifications; Type: TABLE; Schema: belfry; Owner: -\n--\n\nCREATE TABLE belfry.notifications (\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    tenant_id uuid NOT NULL,\n    recipient_ids uuid[] NOT NULL,\n    provider_ids uuid[],\n    message text NOT NULL,\n    priority integer NOT NULL,\n    data jsonb DEFAULT '{}'::jsonb,\n    status belfry.notification_status DEFAULT 'created'::belfry.notification_status NOT NULL,\n    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,\n    type_id uuid NOT NULL\n);\n\n\n--\n-- Name: providers; Type: TABLE; Schema: belfry; Owner: -\n--\n\nCREATE TABLE belfry.providers (\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    type belfry.provider_type NOT NULL,\n    name text NOT NULL,\n    workflow_name text NOT NULL,\n    workflow_task_queue text NOT NULL\n);\n\n\n--\n-- Name: inbox_messages; Type: VIEW; Schema: belfry; Owner: -\n--\n\nCREATE VIEW belfry.inbox_messages AS\n SELECT d.notification_id,\n    d.recipient_id,\n    d.provider_id,\n    n.tenant_id,\n    n.message,\n    n.data,\n    n.priority,\n    concat(nt.name, ':', nt.category) AS type,\n    n.created_at\n   FROM (((belfry.deliveries d\n     JOIN belfry.providers p ON ((p.id = d.provider_id)))\n     JOIN belfry.notifications n ON ((n.id = d.notification_id)))\n     JOIN belfry.notification_types nt ON ((n.type_id = nt.id)))\n  WHERE (p.type = 'inbox'::belfry.provider_type);\n\n\n--\n-- Name: recipient_preferences; Type: TABLE; Schema: belfry; Owner: -\n--\n\nCREATE TABLE belfry.recipient_preferences (\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    recipient_id uuid NOT NULL,\n    provider_id uuid NOT NULL,\n    notification_type_id uuid NOT NULL,\n    threshold integer NOT NULL,\n    enabled boolean DEFAULT true NOT NULL,\n    schedule text\n);\n\n\n--\n-- Name: recipients; Type: TABLE; Schema: belfry; Owner: -\n--\n\nCREATE TABLE belfry.recipients (\n    id uuid NOT NULL,\n    tenant_id uuid NOT NULL,\n    email text NOT NULL,\n    type belfry.recipient_type NOT NULL\n);\n\n\n--\n-- Name: schema_migrations; Type: TABLE; Schema: belfry; Owner: -\n--\n\nCREATE TABLE belfry.schema_migrations (\n    version character varying(128) NOT NULL\n);\n\n\n--\n-- Name: deliveries deliveries_notification_id_provider_id_recipient_id_key; Type: CONSTRAINT; Schema: belfry; Owner: -\n--\n\nALTER TABLE ONLY belfry.deliveries\n    ADD CONSTRAINT deliveries_notification_id_provider_id_recipient_id_key UNIQUE (notification_id, provider_id, recipient_id);\n\n\n--\n-- Name: deliveries deliveries_pkey; Type: CONSTRAINT; Schema: belfry; Owner: -\n--\n\nALTER TABLE ONLY belfry.deliveries\n    ADD CONSTRAINT deliveries_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: notification_types notification_types_name_category_key; Type: CONSTRAINT; Schema: belfry; Owner: -\n--\n\nALTER TABLE ONLY belfry.notification_types\n    ADD CONSTRAINT notification_types_name_category_key UNIQUE (name, category);\n\n\n--\n-- Name: notification_types notification_types_pkey; Type: CONSTRAINT; Schema: belfry; Owner: -\n--\n\nALTER TABLE ONLY belfry.notification_types\n    ADD CONSTRAINT notification_types_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: notifications notifications_pkey; Type: CONSTRAINT; Schema: belfry; Owner: -\n--\n\nALTER TABLE ONLY belfry.notifications\n    ADD CONSTRAINT notifications_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: providers providers_name_type_key; Type: CONSTRAINT; Schema: belfry; Owner: -\n--\n\nALTER TABLE ONLY belfry.providers\n    ADD CONSTRAINT providers_name_type_key UNIQUE (name, type);\n\n\n--\n-- Name: providers providers_pkey; Type: CONSTRAINT; Schema: belfry; Owner: -\n--\n\nALTER TABLE ONLY belfry.providers\n    ADD CONSTRAINT providers_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: recipient_preferences recipient_preferences_pkey; Type: CONSTRAINT; Schema: belfry; Owner: -\n--\n\nALTER TABLE ONLY belfry.recipient_preferences\n    ADD CONSTRAINT recipient_preferences_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: recipient_preferences recipient_preferences_recipient_id_provider_id_notification_key; Type: CONSTRAINT; Schema: belfry; Owner: -\n--\n\nALTER TABLE ONLY belfry.recipient_preferences\n    ADD CONSTRAINT recipient_preferences_recipient_id_provider_id_notification_key UNIQUE (recipient_id, provider_id, notification_type_id);\n\n\n--\n-- Name: recipients recipients_pkey; Type: CONSTRAINT; Schema: belfry; Owner: -\n--\n\nALTER TABLE ONLY belfry.recipients\n    ADD CONSTRAINT recipients_pkey PRIMARY KEY (id);\n\n\n--\n-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: belfry; Owner: -\n--\n\nALTER TABLE ONLY belfry.schema_migrations\n    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);\n\n\n--\n-- Name: deliveries deliveries_notification_id_fkey; Type: FK CONSTRAINT; Schema: belfry; Owner: -\n--\n\nALTER TABLE ONLY belfry.deliveries\n    ADD CONSTRAINT deliveries_notification_id_fkey FOREIGN KEY (notification_id) REFERENCES belfry.notifications(id);\n\n\n--\n-- Name: deliveries deliveries_provider_id_fkey; Type: FK CONSTRAINT; Schema: belfry; Owner: -\n--\n\nALTER TABLE ONLY belfry.deliveries\n    ADD CONSTRAINT deliveries_provider_id_fkey FOREIGN KEY (provider_id) REFERENCES belfry.providers(id);\n\n\n--\n-- Name: notifications notifications_type_id_fkey; Type: FK CONSTRAINT; Schema: belfry; Owner: -\n--\n\nALTER TABLE ONLY belfry.notifications\n    ADD CONSTRAINT notifications_type_id_fkey FOREIGN KEY (type_id) REFERENCES belfry.notification_types(id);\n\n\n--\n-- Name: recipient_preferences recipient_preferences_notification_type_id_fkey; Type: FK CONSTRAINT; Schema: belfry; Owner: -\n--\n\nALTER TABLE ONLY belfry.recipient_preferences\n    ADD CONSTRAINT recipient_preferences_notification_type_id_fkey FOREIGN KEY (notification_type_id) REFERENCES belfry.notification_types(id);\n\n\n--\n-- Name: recipient_preferences recipient_preferences_provider_id_fkey; Type: FK CONSTRAINT; Schema: belfry; Owner: -\n--\n\nALTER TABLE ONLY belfry.recipient_preferences\n    ADD CONSTRAINT recipient_preferences_provider_id_fkey FOREIGN KEY (provider_id) REFERENCES belfry.providers(id);\n\n\n--\n-- Name: recipient_preferences recipient_preferences_recipient_id_fkey; Type: FK CONSTRAINT; Schema: belfry; Owner: -\n--\n\nALTER TABLE ONLY belfry.recipient_preferences\n    ADD CONSTRAINT recipient_preferences_recipient_id_fkey FOREIGN KEY (recipient_id) REFERENCES belfry.recipients(id);\n\n\n--\n-- PostgreSQL database dump complete\n--\n\n\n--\n-- Dbmate schema migrations\n--\n\nINSERT INTO belfry.schema_migrations (version) VALUES\n    ('20241112190351'),\n    ('20241113190712');\n```\n\n\ndeploy\nlocal\n```yaml platform/apps/belfry/deploy/local/config.yaml\n---\nnotifications:\n  retryCount: 5\nservice:\n  environment: local\n  version: latest\nobservability:\n  metrics:\n    enabled: true\n    exporter: prometheus\n```\n\n```yaml platform/apps/belfry/deploy/local/deployment-patch.yaml\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: belfry\n  namespace: belfry\nspec:\n  template:\n    spec:\n      initContainers:\n        - image: \"platform/notification-service\"\n          name: belfry-migrate\n          args:\n            - migrate\n          env:\n            - name: CONFIG_BASE_DIR\n              value: /opt/immuta/belfry\n            - name: SERVICE_ENVIRONMENT\n              value: local\n            - name: HOST_IP\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.hostIP\n            - name: OTEL_EXPORTER_OTLP_ENDPOINT\n              value: \"http://$(HOST_IP):4317\"\n          envFrom:\n            - secretRef:\n                name: belfry-secret\n          volumeMounts:\n            - name: belfry-config\n              mountPath: /opt/immuta/belfry\n```\n\n```yaml platform/apps/belfry/deploy/local/kustomization.yaml\n---\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n  - ../../kubernetes/bootstrap\n  - ../../kubernetes/base\n  - pvc.yaml\n  - service.yaml\n  - statefulset.yaml\npatches:\n  - path: deployment-patch.yaml\nsecretGenerator:\n  - name: belfry-secret\n    namespace: belfry\n    behavior: merge\n    literals:\n      - \"DATABASE_URL=postgres://postgres:password@postgres.belfry:5432/belfry?sslmode=disable\"\n  - name: postgres-secret\n    namespace: belfry\n    literals:\n      - POSTGRES_PASSWORD=password\nconfigMapGenerator:\n  - name: postgres-config\n    namespace: belfry\n    literals:\n      - POSTGRES_DB=belfry\n      - POSTGRES_USER=postgres\n  - name: belfry-config\n    namespace: belfry\n    behavior: replace\n    files:\n      - config.yaml\n```\n\n```yaml platform/apps/belfry/deploy/local/pvc.yaml\n---\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: postgres-pvc\n  namespace: belfry\n  labels:\n    app: postgres\nspec:\n  storageClassName: hostpath\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 5Gi\n```\n\n```yaml platform/apps/belfry/deploy/local/service.yaml\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: postgres\n  namespace: belfry\nspec:\n  selector:\n    app: postgres\n  ports:\n    - protocol: TCP\n      port: 5432\n      targetPort: 5432\n```\n\n```yaml platform/apps/belfry/deploy/local/statefulset.yaml\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: postgres\n  namespace: belfry\nspec:\n  serviceName: postgres\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n        - name: postgres\n          image: postgres:15\n          imagePullPolicy: \"IfNotPresent\"\n          ports:\n            - containerPort: 5432\n          envFrom:\n            - configMapRef:\n                name: postgres-config\n          env:\n            - name: POSTGRES_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secret\n                  key: POSTGRES_PASSWORD\n          volumeMounts:\n            - mountPath: /var/lib/postgresql/data\n              name: pgdb\n      volumes:\n        - name: pgdb\n          persistentVolumeClaim:\n            claimName: postgres-pvc\n```\n\n\nsaas\neks-saas-nonprod-use1-1\nbootstrap\n```yaml platform/apps/belfry/deploy/saas/eks-saas-nonprod-use1-1/bootstrap/kustomization.yaml\n---\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n  - ../../../../kubernetes/bootstrap\n  - ../../netpol\n  - secret.yaml\nnamespace: belfry\nlabels:\n  - pairs:\n      tags.datadoghq.com/env: nonprod\ncommonAnnotations:\n  argocd.argoproj.io/sync-wave: \"-2\"\n```\n\n```yaml platform/apps/belfry/deploy/saas/eks-saas-nonprod-use1-1/bootstrap/secret.yaml\n---\napiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: belfry-secret\nspec:\n  refreshInterval: \"1h\"\n  secretStoreRef:\n    name: vault\n    kind: ClusterSecretStore\n  target:\n    name: belfry-secret\n    creationPolicy: Merge\n    template:\n      data:\n        DATABASE_URL: \"postgres://{{ .user }}:{{ .pass }}@saas-psql-nonprod-use1.cc0aeusfev6i.us-east-1.rds.amazonaws.com:5432/belfry\"\n  dataFrom:\n    - extract:\n        key: secret/data/saas/platform/na/belfry/belfry_db_admin_user\n```\n\n\ninit\n```yaml platform/apps/belfry/deploy/saas/eks-saas-nonprod-use1-1/init/job-patch.yaml\n---\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: belfry-init\nspec:\n  backoffLimit: 1\n  template:\n    spec:\n      restartPolicy: Never\n      containers:\n        - name: belfry-init\n          env:\n            - name: SERVICE_ENVIRONMENT\n              value: nonprod\n            - name: HOST_IP\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.hostIP\n            - name: OTEL_EXPORTER_OTLP_ENDPOINT\n              value: \"http://$(HOST_IP):4317\"\n```\n\n```yaml platform/apps/belfry/deploy/saas/eks-saas-nonprod-use1-1/init/kustomization.yaml\n---\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n  - ../../../../kubernetes/init\nnamespace: belfry\npatches:\n  - path: job-patch.yaml\nlabels:\n  - pairs:\n      tags.datadoghq.com/env: nonprod\ncommonAnnotations:\n  argocd.argoproj.io/hook: Sync\n  argocd.argoproj.io/sync-wave: \"-1\"\n  argocd.argoproj.io/hook-delete-policy: HookSucceeded\n```\n\n\nservices\n```yaml platform/apps/belfry/deploy/saas/eks-saas-nonprod-use1-1/services/deployment-patch.yaml\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: belfry\n  namespace: belfry\nspec:\n  replicas: 2\n  template:\n    spec:\n      containers:\n        - name: belfry\n          env:\n            - name: SERVICE_ENVIRONMENT\n              value: nonprod\n            - name: HOST_IP\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.hostIP\n            - name: OTEL_EXPORTER_OTLP_ENDPOINT\n              value: \"http://$(HOST_IP):4317\"\n      topologySpreadConstraints:\n        - maxSkew: 1\n          topologyKey: \"topology.kubernetes.io/zone\"\n          whenUnsatisfiable: ScheduleAnyway\n          labelSelector:\n            matchExpressions:\n              - key: app.kubernetes.io/name\n                operator: In\n                values:\n                  - belfry\n              - key: app.kubernetes.io/component\n                operator: In\n                values:\n                  - api\n```\n\n```yaml platform/apps/belfry/deploy/saas/eks-saas-nonprod-use1-1/services/kustomization.yaml\n---\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n  - ../../../../kubernetes/base\nnamespace: belfry\nlabels:\n  - pairs:\n      tags.datadoghq.com/env: nonprod\npatches:\n  - path: deployment-patch.yaml\n```\n\n\n\neks-saas-nonprod-use2-1\nbootstrap\n```yaml platform/apps/belfry/deploy/saas/eks-saas-nonprod-use2-1/bootstrap/kustomization.yaml\n---\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n  - ../../../../kubernetes/bootstrap\n  - ../../netpol\n  - secret.yaml\nnamespace: belfry\nlabels:\n  - pairs:\n      tags.datadoghq.com/env: nonprod\ncommonAnnotations:\n  argocd.argoproj.io/sync-wave: \"-2\"\n```\n\n```yaml platform/apps/belfry/deploy/saas/eks-saas-nonprod-use2-1/bootstrap/secret.yaml\n---\napiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: belfry-secret\nspec:\n  refreshInterval: \"1h\"\n  secretStoreRef:\n    name: vault\n    kind: ClusterSecretStore\n  target:\n    name: belfry-secret\n    creationPolicy: Merge\n    template:\n      data:\n        DATABASE_URL: \"postgres://{{ .user }}:{{ .pass }}@saas-psql-nonprod-use1.cc0aeusfev6i.us-east-1.rds.amazonaws.com:5432/belfry\"\n  dataFrom:\n    - extract:\n        key: secret/data/saas/platform/na/belfry/belfry_db_admin_user\n```\n\n\ninit\n```yaml platform/apps/belfry/deploy/saas/eks-saas-nonprod-use2-1/init/job-patch.yaml\n---\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: belfry-init\nspec:\n  backoffLimit: 1\n  template:\n    spec:\n      restartPolicy: Never\n      containers:\n        - name: belfry-init\n          env:\n            - name: SERVICE_ENVIRONMENT\n              value: nonprod\n            - name: HOST_IP\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.hostIP\n            - name: OTEL_EXPORTER_OTLP_ENDPOINT\n              value: \"http://$(HOST_IP):4317\"\n```\n\n```yaml platform/apps/belfry/deploy/saas/eks-saas-nonprod-use2-1/init/kustomization.yaml\n---\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n  - ../../../../kubernetes/init\nnamespace: belfry\npatches:\n  - path: job-patch.yaml\nlabels:\n  - pairs:\n      tags.datadoghq.com/env: nonprod\ncommonAnnotations:\n  argocd.argoproj.io/hook: Sync\n  argocd.argoproj.io/sync-wave: \"-1\"\n  argocd.argoproj.io/hook-delete-policy: HookSucceeded\n```\n\n\nservices\n```yaml platform/apps/belfry/deploy/saas/eks-saas-nonprod-use2-1/services/deployment-patch.yaml\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: belfry\n  namespace: belfry\nspec:\n  replicas: 2\n  template:\n    spec:\n      containers:\n        - name: belfry\n          env:\n            - name: SERVICE_ENVIRONMENT\n              value: nonprod\n            - name: HOST_IP\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.hostIP\n            - name: OTEL_EXPORTER_OTLP_ENDPOINT\n              value: \"http://$(HOST_IP):4317\"\n      topologySpreadConstraints:\n        - maxSkew: 1\n          topologyKey: \"topology.kubernetes.io/zone\"\n          whenUnsatisfiable: ScheduleAnyway\n          labelSelector:\n            matchExpressions:\n              - key: app.kubernetes.io/name\n                operator: In\n                values:\n                  - belfry\n              - key: app.kubernetes.io/component\n                operator: In\n                values:\n                  - api\n```\n\n```yaml platform/apps/belfry/deploy/saas/eks-saas-nonprod-use2-1/services/kustomization.yaml\n---\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n  - ../../../../kubernetes/base\nnamespace: belfry\nlabels:\n  - pairs:\n      tags.datadoghq.com/env: nonprod\npatches:\n  - path: deployment-patch.yaml\n```\n\n\n\nnetpol\n```yaml platform/apps/belfry/deploy/saas/netpol/allow-dns.yaml\n---\n# Network policy to allow access to kube-dns and have the dns-proxy\n# intercept the traffic, but allow all DNS patterns\napiVersion: cilium.io/v2\nkind: CiliumNetworkPolicy\nmetadata:\n  name: all-dns\n  namespace: belfry\nspec:\n  endpointSelector: {}\n  egress:\n    - toEndpoints:\n        - matchLabels:\n            io.kubernetes.pod.namespace: kube-system\n            k8s-app: kube-dns\n      toPorts:\n        - ports:\n            - port: \"53\"\n              protocol: UDP\n          rules:\n            dns:\n              - matchPattern: \"*\"\n```\n\n```yaml platform/apps/belfry/deploy/saas/netpol/belfry.yaml\n---\napiVersion: cilium.io/v2\nkind: CiliumNetworkPolicy\nmetadata:\n  name: belfry\n  namespace: belfry\nspec:\n  endpointSelector:\n    matchLabels:\n      app.kubernetes.io/name: belfry\n  ingress:\n    - fromEndpoints:\n        - matchLabels:\n            app.kubernetes.io/name: marketplace\n            io.kubernetes.pod.namespace: marketplace\n      toPorts:\n        - ports:\n            - port: \"8081\"\n  egress:\n    - toFQDNs:  # STS and RDS access to connect to DB\n        - matchPattern: \"rds.amazonaws.com\"\n        - matchPattern: \"rds.*.amazonaws.com\"\n        - matchPattern: \"*.*.rds.amazonaws.com\"\n        - matchPattern: \"*.*.*.rds.amazonaws.com\"\n        - matchPattern: \"sts.amazonaws.com\"\n        - matchPattern: \"sts.*.amazonaws.com\"\n      toPorts:\n        - ports:\n            - port: \"443\"\n    - toFQDNs:  # Connect to RDS postgres\n        - matchPattern: \"*.*.*.rds.amazonaws.com\"\n      toPorts:\n        - ports:\n            - port: \"5432\"\n    - toEndpoints:  # send traces to otel collector\n        - matchLabels:\n            ic-ops.net/otel: collector\n          matchExpressions:\n            - key: io.kubernetes.pod.namespace\n              operator: Exists\n      toPorts:\n        - ports:\n            - port: \"4317\"\n              protocol: TCP\n            - port: \"4318\"\n              protocol: TCP\n    - toEntities:  # send traces to agent on host (datadog)\n        - host\n      toPorts:\n        - ports:\n            - port: \"4317\"\n            - port: \"4318\"\n```\n\n```yaml platform/apps/belfry/deploy/saas/netpol/kustomization.yaml\n---\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n  - allow-dns.yaml\n  - belfry.yaml\n```\n\n\n\n\n```yaml platform/apps/belfry/docker-compose.nx.yaml\n---\nservices:\n  postgres:\n    profiles: [\"dbmate-up\", \"dbmate-down\", \"sqlc-generate\", \"sqlc-vet\"]\n    image: postgres:15\n    environment:\n      POSTGRES_USER: ${POSTGRES_USER:-postgres}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}\n      POSTGRES_DB: ${POSTGRES_DB:-belfry}\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n    volumes:\n      - postgres:/var/lib/postgresql/data\n    networks:\n      - postgres\n  dbmate-up:\n    profiles: [\"dbmate-up\"]\n    image: amacneil/dbmate\n    command: >\n      --url postgres://postgres:password@postgres:5432/belfry?sslmode=disable up\n\n    depends_on:\n      postgres:\n        condition: service_healthy\n    volumes:\n      - ./db:/db\n    networks:\n      - postgres\n    environment:\n      DBMATE_SCHEMA_FILE: \"/db/schema_snapshot.sql\"\n      DBMATE_MIGRATIONS_TABLE: \"belfry.schema_migrations\"\n  dbmate-down:\n    profiles: [\"dbmate-down\"]\n    image: amacneil/dbmate\n    command: >\n      --url postgres://postgres:password@postgres:5432/belfry?sslmode=disable down\n\n    depends_on:\n      postgres:\n        condition: service_healthy\n    volumes:\n      - ./db:/db\n    networks:\n      - postgres\n    environment:\n      DBMATE_SCHEMA_FILE: \"/db/schema_snapshot.sql\"\n      DBMATE_MIGRATIONS_TABLE: \"belfry.schema_migrations\"\n  sqlc-generate:\n    profiles: [\"sqlc-generate\"]\n    image: sqlc/sqlc\n    environment:\n      DATABASE_URL: postgres://postgres:password@postgres:5432/belfry?sslmode=disable\n    working_dir: /src\n    volumes:\n      - ./:/src\n    networks:\n      - postgres\n    command: generate\n    depends_on:\n      postgres:\n        condition: service_healthy\n  sqlc-vet:\n    profiles: [\"sqlc-vet\"]\n    image: sqlc/sqlc\n    environment:\n      DATABASE_URL: postgres://postgres:password@postgres:5432/belfry?sslmode=disable\n    working_dir: /src\n    volumes:\n      - ./:/src\n    networks:\n      - postgres\n    command: vet\n    depends_on:\n      postgres:\n        condition: service_healthy\nvolumes:\n  postgres:\nnetworks:\n  postgres:\n```\n\n```yaml platform/apps/belfry/docker-compose.yaml\n---\nservices:\n  postgres:\n    image: postgres:15\n    environment:\n      POSTGRES_USER: ${POSTGRES_USER:-postgres}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}\n      POSTGRES_DB: ${POSTGRES_DB:-belfry}\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U postgres\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n    ports:\n      - \"5432:5432\"\n    networks:\n      - postgres\n    volumes:\n      - postgres:/var/lib/postgresql/data\n  migrate:\n    image: amacneil/dbmate\n    command: >\n      --url postgres://postgres:password@postgres:5432/belfry?sslmode=disable up\n\n    networks:\n      - postgres\n    depends_on:\n      postgres:\n        condition: service_healthy\n    volumes:\n      - ./db/migrations/:/db/migrations\nvolumes:\n  postgres:\nnetworks:\n  postgres:\n```\n\n```mod platform/apps/belfry/go.mod\nmodule github.com/immuta/platform/apps/belfry\n\ngo 1.23\n\nrequire (\n\tbuf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go v1.34.2-20240717164558-a6c49f84cc0f.2\n\tconnectrpc.com/connect v1.17.0\n\tconnectrpc.com/grpchealth v1.3.0\n\tconnectrpc.com/grpcreflect v1.2.0\n\tconnectrpc.com/otelconnect v0.7.1\n\tconnectrpc.com/validate v0.1.0\n\tgithub.com/amacneil/dbmate/v2 v2.21.0\n\tgithub.com/exaring/otelpgx v0.6.2\n\tgithub.com/go-logr/logr v1.4.2\n\tgithub.com/google/uuid v1.6.0\n\tgithub.com/immuta/platform/libs/logging v0.0.0-20241101175613-b5ed204d5ada\n\tgithub.com/immuta/platform/libs/observability v0.0.0-20241101175613-b5ed204d5ada\n\tgithub.com/jackc/pgerrcode v0.0.0-20240316143900-6e2875d9b438\n\tgithub.com/jackc/pgx/v5 v5.7.1\n\tgithub.com/kkyr/fig v0.4.0\n\tgithub.com/stretchr/testify v1.9.0\n\tgithub.com/testcontainers/testcontainers-go v0.34.0\n\tgithub.com/urfave/cli/v2 v2.27.4\n\tgo.opentelemetry.io/otel v1.30.0\n\tgo.opentelemetry.io/otel/sdk v1.27.0\n\tgolang.org/x/net v0.29.0\n\tgoogle.golang.org/protobuf v1.34.2\n)\n\nrequire (\n\tdario.cat/mergo v1.0.0 // indirect\n\tgithub.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1 // indirect\n\tgithub.com/Microsoft/go-winio v0.6.2 // indirect\n\tgithub.com/antlr/antlr4/runtime/Go/antlr/v4 v4.0.0-20230512164433-5d1fd1a340c9 // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/bufbuild/protovalidate-go v0.3.0 // indirect\n\tgithub.com/cenkalti/backoff/v4 v4.3.0 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n\tgithub.com/containerd/containerd v1.7.18 // indirect\n\tgithub.com/containerd/log v0.1.0 // indirect\n\tgithub.com/containerd/platforms v0.2.1 // indirect\n\tgithub.com/cpuguy83/dockercfg v0.3.2 // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.4 // indirect\n\tgithub.com/creack/pty v1.1.21 // indirect\n\tgithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect\n\tgithub.com/distribution/reference v0.6.0 // indirect\n\tgithub.com/docker/docker v27.1.1+incompatible // indirect\n\tgithub.com/docker/go-connections v0.5.0 // indirect\n\tgithub.com/docker/go-units v0.5.0 // indirect\n\tgithub.com/felixge/httpsnoop v1.0.4 // indirect\n\tgithub.com/go-logr/stdr v1.2.2 // indirect\n\tgithub.com/go-ole/go-ole v1.2.6 // indirect\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/google/cel-go v0.17.7 // indirect\n\tgithub.com/grpc-ecosystem/grpc-gateway/v2 v2.22.0 // indirect\n\tgithub.com/jackc/pgpassfile v1.0.0 // indirect\n\tgithub.com/jackc/pgservicefile v0.0.0-20240606120523-5a60cdf6a761 // indirect\n\tgithub.com/jackc/puddle/v2 v2.2.2 // indirect\n\tgithub.com/klauspost/compress v1.17.9 // indirect\n\tgithub.com/lib/pq v1.10.9 // indirect\n\tgithub.com/lufia/plan9stats v0.0.0-20211012122336-39d0f177ccd0 // indirect\n\tgithub.com/magiconair/properties v1.8.7 // indirect\n\tgithub.com/mitchellh/mapstructure v1.5.0 // indirect\n\tgithub.com/moby/docker-image-spec v1.3.1 // indirect\n\tgithub.com/moby/patternmatcher v0.6.0 // indirect\n\tgithub.com/moby/sys/sequential v0.5.0 // indirect\n\tgithub.com/moby/sys/user v0.1.0 // indirect\n\tgithub.com/moby/term v0.5.0 // indirect\n\tgithub.com/morikuni/aec v1.0.0 // indirect\n\tgithub.com/opencontainers/go-digest v1.0.0 // indirect\n\tgithub.com/opencontainers/image-spec v1.1.0 // indirect\n\tgithub.com/pelletier/go-toml/v2 v2.1.1 // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect\n\tgithub.com/power-devops/perfstat v0.0.0-20210106213030-5aafc221ea8c // indirect\n\tgithub.com/prometheus/client_golang v1.19.1 // indirect\n\tgithub.com/prometheus/client_model v0.6.1 // indirect\n\tgithub.com/prometheus/common v0.53.0 // indirect\n\tgithub.com/prometheus/procfs v0.15.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/shirou/gopsutil/v3 v3.23.12 // indirect\n\tgithub.com/shoenig/go-m1cpu v0.1.6 // indirect\n\tgithub.com/sirupsen/logrus v1.9.3 // indirect\n\tgithub.com/stoewer/go-strcase v1.3.0 // indirect\n\tgithub.com/stretchr/objx v0.5.2 // indirect\n\tgithub.com/tklauser/go-sysconf v0.3.12 // indirect\n\tgithub.com/tklauser/numcpus v0.6.1 // indirect\n\tgithub.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1 // indirect\n\tgithub.com/yusufpapurcu/wmi v1.2.3 // indirect\n\tgo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.55.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc v1.27.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp v1.27.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.27.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc v1.27.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.27.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/prometheus v0.49.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/stdout/stdoutmetric v1.27.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/stdout/stdouttrace v1.27.0 // indirect\n\tgo.opentelemetry.io/otel/metric v1.30.0 // indirect\n\tgo.opentelemetry.io/otel/sdk/metric v1.27.0 // indirect\n\tgo.opentelemetry.io/otel/trace v1.30.0 // indirect\n\tgo.opentelemetry.io/proto/otlp v1.2.0 // indirect\n\tgolang.org/x/crypto v0.27.0 // indirect\n\tgolang.org/x/exp v0.0.0-20240909161429-701f63a606c0 // indirect\n\tgolang.org/x/sync v0.8.0 // indirect\n\tgolang.org/x/sys v0.25.0 // indirect\n\tgolang.org/x/text v0.18.0 // indirect\n\tgoogle.golang.org/genproto/googleapis/api v0.0.0-20240903143218-8af14fe29dc1 // indirect\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1 // indirect\n\tgoogle.golang.org/grpc v1.66.2 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n\nreplace buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go => buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go v1.34.2-20240717164558-a6c49f84cc0f.2\n\nreplace (\n\tgithub.com/immuta/platform/libs/logging => ../../libs/logging\n\tgithub.com/immuta/platform/libs/observability => ../../libs/observability\n)\n```\n\n```sum platform/apps/belfry/go.sum\nbuf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go v1.34.2-20240717164558-a6c49f84cc0f.2 h1:SZRVx928rbYZ6hEKUIN+vtGDkl7uotABRWGY4OAg5gM=\nbuf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go v1.34.2-20240717164558-a6c49f84cc0f.2/go.mod h1:ylS4c28ACSI59oJrOdW4pHS4n0Hw4TgSPHn8rpHl4Yw=\nconnectrpc.com/connect v1.17.0 h1:W0ZqMhtVzn9Zhn2yATuUokDLO5N+gIuBWMOnsQrfmZk=\nconnectrpc.com/connect v1.17.0/go.mod h1:0292hj1rnx8oFrStN7cB4jjVBeqs+Yx5yDIC2prWDO8=\nconnectrpc.com/grpchealth v1.3.0 h1:FA3OIwAvuMokQIXQrY5LbIy8IenftksTP/lG4PbYN+E=\nconnectrpc.com/grpchealth v1.3.0/go.mod h1:3vpqmX25/ir0gVgW6RdnCPPZRcR6HvqtXX5RNPmDXHM=\nconnectrpc.com/grpcreflect v1.2.0 h1:Q6og1S7HinmtbEuBvARLNwYmTbhEGRpHDhqrPNlmK+U=\nconnectrpc.com/grpcreflect v1.2.0/go.mod h1:nwSOKmE8nU5u/CidgHtPYk1PFI3U9ignz7iDMxOYkSY=\nconnectrpc.com/otelconnect v0.7.1 h1:scO5pOb0i4yUE66CnNrHeK1x51yq0bE0ehPg6WvzXJY=\nconnectrpc.com/otelconnect v0.7.1/go.mod h1:dh3bFgHBTb2bkqGCeVVOtHJreSns7uu9wwL2Tbz17ms=\nconnectrpc.com/validate v0.1.0 h1:r55jirxMK7HO/xZwVHj3w2XkVFarsUM77ZDy367NtH4=\nconnectrpc.com/validate v0.1.0/go.mod h1:GU47c9/x/gd+u9wRSPkrQOP46gx2rMN+Wo37EHgI3Ow=\ndario.cat/mergo v1.0.0 h1:AGCNq9Evsj31mOgNPcLyXc+4PNABt905YmuqPYYpBWk=\ndario.cat/mergo v1.0.0/go.mod h1:uNxQE+84aUszobStD9th8a29P2fMDhsBdgRYvZOxGmk=\nfilippo.io/edwards25519 v1.1.0 h1:FNf4tywRC1HmFuKW5xopWpigGjJKiJSV0Cqo0cJWDaA=\nfilippo.io/edwards25519 v1.1.0/go.mod h1:BxyFTGdWcka3PhytdK4V28tE5sGfRvvvRV7EaN4VDT4=\ngithub.com/AdaLogics/go-fuzz-headers v0.0.0-20230811130428-ced1acdcaa24 h1:bvDV9vkmnHYOMsOr4WLk+Vo07yKIzd94sVoIqshQ4bU=\ngithub.com/AdaLogics/go-fuzz-headers v0.0.0-20230811130428-ced1acdcaa24/go.mod h1:8o94RPi1/7XTJvwPpRSzSUedZrtlirdB3r9Z20bi2f8=\ngithub.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1 h1:UQHMgLO+TxOElx5B5HZ4hJQsoJ/PvUvKRhJHDQXO8P8=\ngithub.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1/go.mod h1:xomTg63KZ2rFqZQzSB4Vz2SUXa1BpHTVz9L5PTmPC4E=\ngithub.com/Microsoft/go-winio v0.6.2 h1:F2VQgta7ecxGYO8k3ZZz3RS8fVIXVxONVUPlNERoyfY=\ngithub.com/Microsoft/go-winio v0.6.2/go.mod h1:yd8OoFMLzJbo9gZq8j5qaps8bJ9aShtEA8Ipt1oGCvU=\ngithub.com/amacneil/dbmate/v2 v2.21.0 h1:9j9EW5cPcMK2bnlzXr8kYitWE6GiXqfeDP7jG0ch7iE=\ngithub.com/amacneil/dbmate/v2 v2.21.0/go.mod h1:0r3NwZlWPZ2nlfY8zB4PW4e7rTJX+vMfkt4sdv8Kfso=\ngithub.com/antlr/antlr4/runtime/Go/antlr/v4 v4.0.0-20230512164433-5d1fd1a340c9 h1:goHVqTbFX3AIo0tzGr14pgfAW2ZfPChKO21Z9MGf/gk=\ngithub.com/antlr/antlr4/runtime/Go/antlr/v4 v4.0.0-20230512164433-5d1fd1a340c9/go.mod h1:pSwJ0fSY5KhvocuWSx4fz3BA8OrA1bQn+K1Eli3BRwM=\ngithub.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/bufbuild/protovalidate-go v0.3.0 h1:t9zKgM//9VtPnP0TvyFqWubLQtSbwLwEUVOxgtX9/os=\ngithub.com/bufbuild/protovalidate-go v0.3.0/go.mod h1:4mZkDYMGJlnHHQ9rPOhVEZ4bA13iOJBRLzywxy8f/lo=\ngithub.com/cenkalti/backoff/v4 v4.3.0 h1:MyRJ/UdXutAwSAT+s3wNd7MfTIcy71VQueUuFK343L8=\ngithub.com/cenkalti/backoff/v4 v4.3.0/go.mod h1:Y3VNntkOUPxTVeUxJ/G5vcM//AlwfmyYozVcomhLiZE=\ngithub.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\ngithub.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/containerd/containerd v1.7.18 h1:jqjZTQNfXGoEaZdW1WwPU0RqSn1Bm2Ay/KJPUuO8nao=\ngithub.com/containerd/containerd v1.7.18/go.mod h1:IYEk9/IO6wAPUz2bCMVUbsfXjzw5UNP5fLz4PsUygQ4=\ngithub.com/containerd/log v0.1.0 h1:TCJt7ioM2cr/tfR8GPbGf9/VRAX8D2B4PjzCpfX540I=\ngithub.com/containerd/log v0.1.0/go.mod h1:VRRf09a7mHDIRezVKTRCrOq78v577GXq3bSa3EhrzVo=\ngithub.com/containerd/platforms v0.2.1 h1:zvwtM3rz2YHPQsF2CHYM8+KtB5dvhISiXh5ZpSBQv6A=\ngithub.com/containerd/platforms v0.2.1/go.mod h1:XHCb+2/hzowdiut9rkudds9bE5yJ7npe7dG/wG+uFPw=\ngithub.com/cpuguy83/dockercfg v0.3.2 h1:DlJTyZGBDlXqUZ2Dk2Q3xHs/FtnooJJVaad2S9GKorA=\ngithub.com/cpuguy83/dockercfg v0.3.2/go.mod h1:sugsbF4//dDlL/i+S+rtpIWp+5h0BHJHfjj5/jFyUJc=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.4 h1:wfIWP927BUkWJb2NmU/kNDYIBTh/ziUX91+lVfRxZq4=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.4/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/creack/pty v1.1.21 h1:1/QdRyBaHHJP61QkWMXlOIBfsgdDeeKfK8SYVUWJKf0=\ngithub.com/creack/pty v1.1.21/go.mod h1:MOBLtS5ELjhRRrroQr9kyvTxUAFNvYEK993ew/Vr4O4=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/distribution/reference v0.6.0 h1:0IXCQ5g4/QMHHkarYzh5l+u8T3t73zM5QvfrDyIgxBk=\ngithub.com/distribution/reference v0.6.0/go.mod h1:BbU0aIcezP1/5jX/8MP0YiH4SdvB5Y4f/wlDRiLyi3E=\ngithub.com/docker/docker v27.1.1+incompatible h1:hO/M4MtV36kzKldqnA37IWhebRA+LnqqcqDja6kVaKY=\ngithub.com/docker/docker v27.1.1+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\ngithub.com/docker/go-connections v0.5.0 h1:USnMq7hx7gwdVZq1L49hLXaFtUdTADjXGp+uj1Br63c=\ngithub.com/docker/go-connections v0.5.0/go.mod h1:ov60Kzw0kKElRwhNs9UlUHAE/F9Fe6GLaXnqyDdmEXc=\ngithub.com/docker/go-units v0.5.0 h1:69rxXcBk27SvSaaxTtLh/8llcHD8vYHT7WSdRZ/jvr4=\ngithub.com/docker/go-units v0.5.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/envoyproxy/protoc-gen-validate v1.0.4 h1:gVPz/FMfvh57HdSJQyvBtF00j8JU4zdyUgIUNhlgg0A=\ngithub.com/envoyproxy/protoc-gen-validate v1.0.4/go.mod h1:qys6tmnRsYrQqIhm2bvKZH4Blx/1gTIZ2UKVY1M+Yew=\ngithub.com/exaring/otelpgx v0.6.2 h1:z1ayuDusPITNOhzvmx3nLpFax+tv7Hu7mdrjtgW3ZeA=\ngithub.com/exaring/otelpgx v0.6.2/go.mod h1:DuRveXIeRNz6VJrMTj2uCBFqiocMx4msCN1mIMmbZUI=\ngithub.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=\ngithub.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=\ngithub.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=\ngithub.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=\ngithub.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=\ngithub.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=\ngithub.com/go-ole/go-ole v1.2.6 h1:/Fpf6oFPoeFik9ty7siob0G6Ke8QvQEuVcuChpwXzpY=\ngithub.com/go-ole/go-ole v1.2.6/go.mod h1:pprOEPIfldk/42T2oK7lQ4v4JSDwmV0As9GaiUsvbm0=\ngithub.com/go-sql-driver/mysql v1.8.1 h1:LedoTUt/eveggdHS9qUFC1EFSa8bU2+1pZjSRpvNJ1Y=\ngithub.com/go-sql-driver/mysql v1.8.1/go.mod h1:wEBSXgmK//2ZFJyE+qWnIsVGmvmEKlqwuVSjsCm7DZg=\ngithub.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=\ngithub.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=\ngithub.com/google/cel-go v0.17.7 h1:6ebJFzu1xO2n7TLtN+UBqShGBhlD85bhvglh5DpcfqQ=\ngithub.com/google/cel-go v0.17.7/go.mod h1:HXZKzB0LXqer5lHHgfWAnlYwJaQBDKMjxjulNQzhwhY=\ngithub.com/google/go-cmp v0.5.6/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/grpc-ecosystem/grpc-gateway/v2 v2.22.0 h1:asbCHRVmodnJTuQ3qamDwqVOIjwqUPTYmYuemVOx+Ys=\ngithub.com/grpc-ecosystem/grpc-gateway/v2 v2.22.0/go.mod h1:ggCgvZ2r7uOoQjOyu2Y1NhHmEPPzzuhWgcza5M1Ji1I=\ngithub.com/jackc/pgerrcode v0.0.0-20240316143900-6e2875d9b438 h1:Dj0L5fhJ9F82ZJyVOmBx6msDp/kfd1t9GRfny/mfJA0=\ngithub.com/jackc/pgerrcode v0.0.0-20240316143900-6e2875d9b438/go.mod h1:a/s9Lp5W7n/DD0VrVoyJ00FbP2ytTPDVOivvn2bMlds=\ngithub.com/jackc/pgpassfile v1.0.0 h1:/6Hmqy13Ss2zCq62VdNG8tM1wchn8zjSGOBJ6icpsIM=\ngithub.com/jackc/pgpassfile v1.0.0/go.mod h1:CEx0iS5ambNFdcRtxPj5JhEz+xB6uRky5eyVu/W2HEg=\ngithub.com/jackc/pgservicefile v0.0.0-20240606120523-5a60cdf6a761 h1:iCEnooe7UlwOQYpKFhBabPMi4aNAfoODPEFNiAnClxo=\ngithub.com/jackc/pgservicefile v0.0.0-20240606120523-5a60cdf6a761/go.mod h1:5TJZWKEWniPve33vlWYSoGYefn3gLQRzjfDlhSJ9ZKM=\ngithub.com/jackc/pgx/v5 v5.7.1 h1:x7SYsPBYDkHDksogeSmZZ5xzThcTgRz++I5E+ePFUcs=\ngithub.com/jackc/pgx/v5 v5.7.1/go.mod h1:e7O26IywZZ+naJtWWos6i6fvWK+29etgITqrqHLfoZA=\ngithub.com/jackc/puddle/v2 v2.2.2 h1:PR8nw+E/1w0GLuRFSmiioY6UooMp6KJv0/61nB7icHo=\ngithub.com/jackc/puddle/v2 v2.2.2/go.mod h1:vriiEXHvEE654aYKXXjOvZM39qJ0q+azkZFrfEOc3H4=\ngithub.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/kkyr/fig v0.4.0 h1:4D/g72a8ij1fgRypuIbEoqIT7ukf2URVBtE777/gkbc=\ngithub.com/kkyr/fig v0.4.0/go.mod h1:U4Rq/5eUNJ8o5UvOEc9DiXtNf41srOLn2r/BfCyuc58=\ngithub.com/klauspost/compress v1.17.9 h1:6KIumPrER1LHsvBVuDa0r5xaG0Es51mhhB9BQB2qeMA=\ngithub.com/klauspost/compress v1.17.9/go.mod h1:Di0epgTjJY877eYKx5yC51cX2A2Vl2ibi7bDH9ttBbw=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/lib/pq v1.10.9 h1:YXG7RB+JIjhP29X+OtkiDnYaXQwpS4JEWq7dtCCRUEw=\ngithub.com/lib/pq v1.10.9/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/lufia/plan9stats v0.0.0-20211012122336-39d0f177ccd0 h1:6E+4a0GO5zZEnZ81pIr0yLvtUWk2if982qA3F3QD6H4=\ngithub.com/lufia/plan9stats v0.0.0-20211012122336-39d0f177ccd0/go.mod h1:zJYVVT2jmtg6P3p1VtQj7WsuWi/y4VnjVBn7F8KPB3I=\ngithub.com/magiconair/properties v1.8.7 h1:IeQXZAiQcpL9mgcAe1Nu6cX9LLw6ExEHKjN0VQdvPDY=\ngithub.com/magiconair/properties v1.8.7/go.mod h1:Dhd985XPs7jluiymwWYZ0G4Z61jb3vdS329zhj2hYo0=\ngithub.com/mattn/go-sqlite3 v1.14.23 h1:gbShiuAP1W5j9UOksQ06aiiqPMxYecovVGwmTxWtuw0=\ngithub.com/mattn/go-sqlite3 v1.14.23/go.mod h1:Uh1q+B4BYcTPb+yiD3kU8Ct7aC0hY9fxUwlHK0RXw+Y=\ngithub.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=\ngithub.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/moby/docker-image-spec v1.3.1 h1:jMKff3w6PgbfSa69GfNg+zN/XLhfXJGnEx3Nl2EsFP0=\ngithub.com/moby/docker-image-spec v1.3.1/go.mod h1:eKmb5VW8vQEh/BAr2yvVNvuiJuY6UIocYsFu/DxxRpo=\ngithub.com/moby/patternmatcher v0.6.0 h1:GmP9lR19aU5GqSSFko+5pRqHi+Ohk1O69aFiKkVGiPk=\ngithub.com/moby/patternmatcher v0.6.0/go.mod h1:hDPoyOpDY7OrrMDLaYoY3hf52gNCR/YOUYxkhApJIxc=\ngithub.com/moby/sys/sequential v0.5.0 h1:OPvI35Lzn9K04PBbCLW0g4LcFAJgHsvXsRyewg5lXtc=\ngithub.com/moby/sys/sequential v0.5.0/go.mod h1:tH2cOOs5V9MlPiXcQzRC+eEyab644PWKGRYaaV5ZZlo=\ngithub.com/moby/sys/user v0.1.0 h1:WmZ93f5Ux6het5iituh9x2zAG7NFY9Aqi49jjE1PaQg=\ngithub.com/moby/sys/user v0.1.0/go.mod h1:fKJhFOnsCN6xZ5gSfbM6zaHGgDJMrqt9/reuj4T7MmU=\ngithub.com/moby/term v0.5.0 h1:xt8Q1nalod/v7BqbG21f8mQPqH+xAaC9C3N3wfWbVP0=\ngithub.com/moby/term v0.5.0/go.mod h1:8FzsFHVUBGZdbDsJw/ot+X+d5HLUbvklYLJ9uGfcI3Y=\ngithub.com/morikuni/aec v1.0.0 h1:nP9CBfwrvYnBRgY6qfDQkygYDmYwOilePFkwzv4dU8A=\ngithub.com/morikuni/aec v1.0.0/go.mod h1:BbKIizmSmc5MMPqRYbxO4ZU0S0+P200+tUnFx7PXmsc=\ngithub.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=\ngithub.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=\ngithub.com/opencontainers/image-spec v1.1.0 h1:8SG7/vwALn54lVB/0yZ/MMwhFrPYtpEHQb2IpWsCzug=\ngithub.com/opencontainers/image-spec v1.1.0/go.mod h1:W4s4sFTMaBeK1BQLXbG4AdM2szdn85PY75RI83NrTrM=\ngithub.com/pelletier/go-toml/v2 v2.1.1 h1:LWAJwfNvjQZCFIDKWYQaM62NcYeYViCmWIwmOStowAI=\ngithub.com/pelletier/go-toml/v2 v2.1.1/go.mod h1:tJU2Z3ZkXwnxa4DPO899bsyIoywizdUvyaeZurnPPDc=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/power-devops/perfstat v0.0.0-20210106213030-5aafc221ea8c h1:ncq/mPwQF4JjgDlrVEn3C11VoGHZN7m8qihwgMEtzYw=\ngithub.com/power-devops/perfstat v0.0.0-20210106213030-5aafc221ea8c/go.mod h1:OmDBASR4679mdNQnz2pUhc2G8CO2JrUAVFDRBDP/hJE=\ngithub.com/prometheus/client_golang v1.19.1 h1:wZWJDwK+NameRJuPGDhlnFgx8e8HN3XHQeLaYJFJBOE=\ngithub.com/prometheus/client_golang v1.19.1/go.mod h1:mP78NwGzrVks5S2H6ab8+ZZGJLZUq1hoULYBAYBw1Ho=\ngithub.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=\ngithub.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=\ngithub.com/prometheus/common v0.53.0 h1:U2pL9w9nmJwJDa4qqLQ3ZaePJ6ZTwt7cMD3AG3+aLCE=\ngithub.com/prometheus/common v0.53.0/go.mod h1:BrxBKv3FWBIGXw89Mg1AeBq7FSyRzXWI3l3e7W3RN5U=\ngithub.com/prometheus/procfs v0.15.0 h1:A82kmvXJq2jTu5YUhSGNlYoxh85zLnKgPz4bMZgI5Ek=\ngithub.com/prometheus/procfs v0.15.0/go.mod h1:Y0RJ/Y5g5wJpkTisOtqwDSo4HwhGmLB4VQSw2sQJLHk=\ngithub.com/rogpeppe/go-internal v1.13.1 h1:KvO1DLK/DRN07sQ1LQKScxyZJuNnedQ5/wKSR38lUII=\ngithub.com/rogpeppe/go-internal v1.13.1/go.mod h1:uMEvuHeurkdAXX61udpOXGD/AzZDWNMNyH2VO9fmH0o=\ngithub.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/shirou/gopsutil/v3 v3.23.12 h1:z90NtUkp3bMtmICZKpC4+WaknU1eXtp5vtbQ11DgpE4=\ngithub.com/shirou/gopsutil/v3 v3.23.12/go.mod h1:1FrWgea594Jp7qmjHUUPlJDTPgcsb9mGnXDxavtikzM=\ngithub.com/shoenig/go-m1cpu v0.1.6 h1:nxdKQNcEB6vzgA2E2bvzKIYRuNj7XNJ4S/aRSwKzFtM=\ngithub.com/shoenig/go-m1cpu v0.1.6/go.mod h1:1JJMcUBvfNwpq05QDQVAnx3gUHr9IYF7GNg9SUEw2VQ=\ngithub.com/shoenig/test v0.6.4 h1:kVTaSd7WLz5WZ2IaoM0RSzRsUD+m8wRR+5qvntpn4LU=\ngithub.com/shoenig/test v0.6.4/go.mod h1:byHiCGXqrVaflBLAMq/srcZIHynQPQgeyvkvXnjqq0k=\ngithub.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=\ngithub.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/stoewer/go-strcase v1.3.0 h1:g0eASXYtp+yvN9fK8sH94oCIk0fau9uV1/ZdJ0AVEzs=\ngithub.com/stoewer/go-strcase v1.3.0/go.mod h1:fAH5hQ5pehh+j3nZfvwdk2RgEgQjAoM8wodgtPmh1xo=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/objx v0.5.2 h1:xuMeJ0Sdp5ZMRXx/aWO6RZxdr3beISkG5/G/aIRr3pY=\ngithub.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/testcontainers/testcontainers-go v0.34.0 h1:5fbgF0vIN5u+nD3IWabQwRybuB4GY8G2HHgCkbMzMHo=\ngithub.com/testcontainers/testcontainers-go v0.34.0/go.mod h1:6P/kMkQe8yqPHfPWNulFGdFHTD8HB2vLq/231xY2iPQ=\ngithub.com/tklauser/go-sysconf v0.3.12 h1:0QaGUFOdQaIVdPgfITYzaTegZvdCjmYO52cSFAEVmqU=\ngithub.com/tklauser/go-sysconf v0.3.12/go.mod h1:Ho14jnntGE1fpdOqQEEaiKRpvIavV0hSfmBq8nJbHYI=\ngithub.com/tklauser/numcpus v0.6.1 h1:ng9scYS7az0Bk4OZLvrNXNSAO2Pxr1XXRAPyjhIx+Fk=\ngithub.com/tklauser/numcpus v0.6.1/go.mod h1:1XfjsgE2zo8GVw7POkMbHENHzVg3GzmoZ9fESEdAacY=\ngithub.com/urfave/cli/v2 v2.27.4 h1:o1owoI+02Eb+K107p27wEX9Bb8eqIoZCfLXloLUSWJ8=\ngithub.com/urfave/cli/v2 v2.27.4/go.mod h1:m4QzxcD2qpra4z7WhzEGn74WZLViBnMpb1ToCAKdGRQ=\ngithub.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1 h1:gEOO8jv9F4OT7lGCjxCBTO/36wtF6j2nSip77qHd4x4=\ngithub.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1/go.mod h1:Ohn+xnUBiLI6FVj/9LpzZWtj1/D6lUovWYBkxHVV3aM=\ngithub.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yusufpapurcu/wmi v1.2.3 h1:E1ctvB7uKFMOJw3fdOW32DwGE9I7t++CRUEMKvFoFiw=\ngithub.com/yusufpapurcu/wmi v1.2.3/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQmPyzfmi0=\ngithub.com/zenizh/go-capturer v0.0.0-20211219060012-52ea6c8fed04 h1:qXafrlZL1WsJW5OokjraLLRURHiw0OzKHD/RNdspp4w=\ngithub.com/zenizh/go-capturer v0.0.0-20211219060012-52ea6c8fed04/go.mod h1:FiwNQxz6hGoNFBC4nIx+CxZhI3nne5RmIOlT/MXcSD4=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.55.0 h1:ZIg3ZT/aQ7AfKqdwp7ECpOK6vHqquXXuyTjIO8ZdmPs=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.55.0/go.mod h1:DQAwmETtZV00skUwgD6+0U89g80NKsJE3DCKeLLPQMI=\ngo.opentelemetry.io/otel v1.30.0 h1:F2t8sK4qf1fAmY9ua4ohFS/K+FUuOPemHUIXHtktrts=\ngo.opentelemetry.io/otel v1.30.0/go.mod h1:tFw4Br9b7fOS+uEao81PJjVMjW/5fvNCbpsDIXqP0pc=\ngo.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc v1.27.0 h1:bFgvUr3/O4PHj3VQcFEuYKvRZJX1SJDQ+11JXuSB3/w=\ngo.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc v1.27.0/go.mod h1:xJntEd2KL6Qdg5lwp97HMLQDVeAhrYxmzFseAMDPQ8I=\ngo.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp v1.27.0 h1:CIHWikMsN3wO+wq1Tp5VGdVRTcON+DmOJSfDjXypKOc=\ngo.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp v1.27.0/go.mod h1:TNupZ6cxqyFEpLXAZW7On+mLFL0/g0TE3unIYL91xWc=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.27.0 h1:R9DE4kQ4k+YtfLI2ULwX82VtNQ2J8yZmA7ZIF/D+7Mc=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.27.0/go.mod h1:OQFyQVrDlbe+R7xrEyDr/2Wr67Ol0hRUgsfA+V5A95s=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc v1.27.0 h1:qFffATk0X+HD+f1Z8lswGiOQYKHRlzfmdJm0wEaVrFA=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc v1.27.0/go.mod h1:MOiCmryaYtc+V0Ei+Tx9o5S1ZjA7kzLucuVuyzBZloQ=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.27.0 h1:QY7/0NeRPKlzusf40ZE4t1VlMKbqSNT7cJRYzWuja0s=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.27.0/go.mod h1:HVkSiDhTM9BoUJU8qE6j2eSWLLXvi1USXjyd2BXT8PY=\ngo.opentelemetry.io/otel/exporters/prometheus v0.49.0 h1:Er5I1g/YhfYv9Affk9nJLfH/+qCCVVg1f2R9AbJfqDQ=\ngo.opentelemetry.io/otel/exporters/prometheus v0.49.0/go.mod h1:KfQ1wpjf3zsHjzP149P4LyAwWRupc6c7t1ZJ9eXpKQM=\ngo.opentelemetry.io/otel/exporters/stdout/stdoutmetric v1.27.0 h1:/jlt1Y8gXWiHG9FBx6cJaIC5hYx5Fe64nC8w5Cylt/0=\ngo.opentelemetry.io/otel/exporters/stdout/stdoutmetric v1.27.0/go.mod h1:bmToOGOBZ4hA9ghphIc1PAf66VA8KOtsuy3+ScStG20=\ngo.opentelemetry.io/otel/exporters/stdout/stdouttrace v1.27.0 h1:/0YaXu3755A/cFbtXp+21lkXgI0QE5avTWA2HjU9/WE=\ngo.opentelemetry.io/otel/exporters/stdout/stdouttrace v1.27.0/go.mod h1:m7SFxp0/7IxmJPLIY3JhOcU9CoFzDaCPL6xxQIxhA+o=\ngo.opentelemetry.io/otel/metric v1.30.0 h1:4xNulvn9gjzo4hjg+wzIKG7iNFEaBMX00Qd4QIZs7+w=\ngo.opentelemetry.io/otel/metric v1.30.0/go.mod h1:aXTfST94tswhWEb+5QjlSqG+cZlmyXy/u8jFpor3WqQ=\ngo.opentelemetry.io/otel/sdk v1.27.0 h1:mlk+/Y1gLPLn84U4tI8d3GNJmGT/eXe3ZuOXN9kTWmI=\ngo.opentelemetry.io/otel/sdk v1.27.0/go.mod h1:Ha9vbLwJE6W86YstIywK2xFfPjbWlCuwPtMkKdz/Y4A=\ngo.opentelemetry.io/otel/sdk/metric v1.27.0 h1:5uGNOlpXi+Hbo/DRoI31BSb1v+OGcpv2NemcCrOL8gI=\ngo.opentelemetry.io/otel/sdk/metric v1.27.0/go.mod h1:we7jJVrYN2kh3mVBlswtPU22K0SA+769l93J6bsyvqw=\ngo.opentelemetry.io/otel/trace v1.30.0 h1:7UBkkYzeg3C7kQX8VAidWh2biiQbtAKjyIML8dQ9wmc=\ngo.opentelemetry.io/otel/trace v1.30.0/go.mod h1:5EyKqTzzmyqB9bwtCCq6pDLktPK6fmGf/Dph+8VI02o=\ngo.opentelemetry.io/proto/otlp v1.2.0 h1:pVeZGk7nXDC9O2hncA6nHldxEjm6LByfA2aN8IOkz94=\ngo.opentelemetry.io/proto/otlp v1.2.0/go.mod h1:gGpR8txAl5M03pDhMC79G6SdqNV26naRm/KDsgaHD8A=\ngo.uber.org/goleak v1.3.0 h1:2K3zAYmnTNqV73imy9J1T3WC+gmCePx2hEGkimedGto=\ngo.uber.org/goleak v1.3.0/go.mod h1:CoHD4mav9JJNrW/WLlf7HGZPjdw8EucARQHekz1X6bE=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.27.0 h1:GXm2NjJrPaiv/h1tb2UH8QfgC/hOf/+z0p6PT8o1w7A=\ngolang.org/x/crypto v0.27.0/go.mod h1:1Xngt8kV6Dvbssa53Ziq6Eqn0HqbZi5Z6R0ZpwQzt70=\ngolang.org/x/exp v0.0.0-20240909161429-701f63a606c0 h1:e66Fs6Z+fZTbFBAxKfP3PALWBtpfqks2bwGcexMxgtk=\ngolang.org/x/exp v0.0.0-20240909161429-701f63a606c0/go.mod h1:2TbTHSBQa924w8M6Xs1QcRcFwyucIwBGpK1p2f1YFFY=\ngolang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.29.0 h1:5ORfpBpCs4HzDYoodCDBbwHzdR5UrLBZ3sOnUJmFoHo=\ngolang.org/x/net v0.29.0/go.mod h1:gLkgy8jTGERgjzMic6DS9+SP0ajcu6Xu3Orq/SpETg0=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.8.0 h1:3NFvSEYkUoMifnESzZl15y791HH1qU2xm6eCJU5ZPXQ=\ngolang.org/x/sync v0.8.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201204225414-ed752295db88/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210616094352-59db8d763f22/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.11.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.15.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.25.0 h1:r+8e+loiHxRqhXVl6ML1nO3l1+oFoWbnlu2Ehimmi34=\ngolang.org/x/sys v0.25.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.24.0 h1:Mh5cbb+Zk2hqqXNO7S1iTjEphVL+jb8ZWaqh/g+JWkM=\ngolang.org/x/term v0.24.0/go.mod h1:lOBK/LVxemqiMij05LGJ0tzNr8xlmwBRJ81PX6wVLH8=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.18.0 h1:XvMDiNzPAl0jr17s6W9lcaIhGUfUORdGCNsuLmPG224=\ngolang.org/x/text v0.18.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=\ngolang.org/x/time v0.6.0 h1:eTDhh4ZXt5Qf0augr54TN6suAUudPcawVZeIAPU7D4U=\ngolang.org/x/time v0.6.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20240903143218-8af14fe29dc1 h1:hjSy6tcFQZ171igDaN5QHOw2n6vx40juYbC/x67CEhc=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20240903143218-8af14fe29dc1/go.mod h1:qpvKtACPCQhAdu3PyQgV4l3LMXZEtft7y8QcarRsp9I=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1 h1:pPJltXNxVzT4pK9yD8vR9X75DaWYYmLGMsEvBfFQZzQ=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1/go.mod h1:UqMtugtsSgubUsoxbuAoiCXvqvErP7Gf0so0mK9tHxU=\ngoogle.golang.org/grpc v1.66.2 h1:3QdXkuq3Bkh7w+ywLdLvM56cmGvQHUMZpiCzt6Rqaoo=\ngoogle.golang.org/grpc v1.66.2/go.mod h1:s3/l6xSSCURdVfAnL+TqCNMyTDAGN6+lZeVxnZR128Y=\ngoogle.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=\ngoogle.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngotest.tools/v3 v3.5.1 h1:EENdUnS3pdur5nybKYIh2Vfgc8IUNBjxDPSjtiJcOzU=\ngotest.tools/v3 v3.5.1/go.mod h1:isy3WKz7GK6uNw/sbHzfKBLvlvXwUyV06n6brMxxopU=\n```\n\nhack\n```sh platform/apps/belfry/hack/deploy-nonprod.sh\n#!/bin/bash\nset -o errexit\n\nexport SHORT_SHA=$(git rev-parse --short HEAD)\n\ngit config --global user.name 'Belfry CD Pipeline'\ngit config --global user.email 'sre+buildautomation@immuta.com'\ngit config --global pull.rebase false\ngit clone git@gitlab.infrastructure.immuta.io:infrastructure/kubernetes/application-deployment.git\ncd application-deployment\ngit checkout master\n\nCLUSTERS=\"eks-saas-nonprod-use1-1 eks-saas-nonprod-use2-1\"\nfor cluster in $CLUSTERS; do\n  pushd \"clusters/${cluster}/apps/belfry\"\n  # Update kustomize image tag\n  kustomize edit set image \"platform/notification-service=registry.ic-ops.net/platform/notification-service:git-${SHORT_SHA}\"\n\n  git diff\n  git commit -am \"<CD Job> Update deployment hash of belfry to $SHORT_SHA\"\n  git push\n  popd\ndone\n```\n\n\ninternal\nconfig\n```go platform/apps/belfry/internal/config/config.go\npackage config\n\nimport (\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/kkyr/fig\"\n)\n\ntype Config struct {\n\tService       Service       `fig:\"service\" required:\"true\"`\n\tDatabase      Database      `fig:\"database\" required:\"true\"`\n\tLog           Log           `fig:\"log\"`\n\tObservability Observability `fig:\"observability\"`\n\tNotifications Notifications `fig:\"notifications\"`\n\tServer        Server        `fig:\"server\"`\n\tMigrations    Migrations    `fig:\"migrations\"`\n}\n\n// Service contains configuration information about the running\n// service. This is used for Observability in both: DataDog and OTEL\n// respective resource conventions.\ntype Service struct {\n\tName        string `fig:\"name\" default:\"belfry\"`\n\tEnvironment string `fig:\"environment\" required:\"true\"`\n\tVersion     string `fig:\"version\" required:\"true\"`\n}\n\n// Log handles all logging configuration.\ntype Log struct {\n\tLevel string `fig:\"level\" default:\"INFO\"`\n}\n\n// Observability provides options to configure OpenTelemetry.\ntype Observability struct {\n\tTracing Tracing `fig:\"tracing\"`\n\tMetrics Metrics `fig:\"metrics\"`\n\tLogging Logging `fig:\"logging\"`\n}\n\n// Logging provides configuration non-standard log injectors.\ntype Logging struct {\n\tDataDog DataDog `fig:\"datadog\"`\n}\n\n// DataDog provides configuration for DataDog log injection.\ntype DataDog struct {\n\t// Enabled enables DataDog log injection\n\tEnabled bool `fig:\"enabled\"`\n}\n\n// Metrics provides configuration for OTEL Metrics instrumentation.\ntype Metrics struct {\n\t// Exporter defines the meter provider/extractor to use (e.g. otlp_grpc)\n\tExporter string `fig:\"exporter\" default:\"otel_gprc\"`\n\t// Prometheus provides additional configuration when using the\n\t// prom otel exporter.\n\tPrometheus Prometheus `fig:\"prometheus\"`\n\t// Enabled enables the Metrics extractor\n\tEnabled bool `fig:\"enabled\"`\n}\n\n// Prometheus provides configuration for the Prometheus HTTP Handler\n// when using the Prometheus Metrics Exporter.\ntype Prometheus struct {\n\t// Endpoint is the endpoint to serve the metrics on the prom server\n\tEndpoint string `fig:\"endpoint\" default:\"/metrics\"`\n\t// Port is the port to serve the prometheus server on\n\tPort int `fig:\"port\" default:\"9090\"`\n}\n\n// Tracing provides configuration for OTEL Tracing instrumentation.\ntype Tracing struct {\n\t// Exporter defines the trace provider/extractor to use (e.g. otlp_grpc)\n\tExporter string `fig:\"exporter\" default:\"otel_gprc\"`\n\t// Enabled enables the trace provider/extractor\n\tEnabled bool `fig:\"enabled\"`\n}\n\ntype Server struct {\n\tPort int `fig:\"port\" default:\"8081\"`\n}\n\ntype Database struct {\n\tURL string `fig:\"url\" required:\"true\"`\n}\n\ntype Notifications struct {\n\tRetryInterval time.Duration `fig:\"incomplete_retry_interval\" default:\"60s\"`\n}\n\ntype Migrations struct {\n\tWaitTimeout  time.Duration `fig:\"wait_timeout\" default:\"60s\"`\n\tWaitInterval time.Duration `fig:\"wait_interval\" default:\"15s\"`\n}\n\nfunc LoadConfig() (*Config, error) {\n\tvar cfg Config\n\tif err := fig.Load(&cfg,\n\t\tfig.File(LookUpEnvOrDefault(\"CONFIG_NAME\", \"config.yaml\")),\n\t\tfig.Dirs(LookUpEnvOrDefault(\"CONFIG_BASE_DIR\", \"/opt/immuta/belfry\")),\n\t\tfig.UseEnv(LookUpEnvOrDefault(\"ENV_PREFIX\", \"\")),\n\t); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &cfg, nil\n}\n\nfunc LookUpEnvOrDefault(key, defaultValue string) string {\n\tif value, ok := os.LookupEnv(key); ok {\n\t\treturn value\n\t}\n\n\treturn defaultValue\n}\n```\n\n\ndatabase\n```go platform/apps/belfry/internal/database/db.go\n// Code generated by sqlc. DO NOT EDIT.\n// versions:\n//   sqlc v1.27.0\n\npackage database\n\nimport (\n\t\"context\"\n\n\t\"github.com/jackc/pgx/v5\"\n\t\"github.com/jackc/pgx/v5/pgconn\"\n)\n\ntype DBTX interface {\n\tExec(context.Context, string, ...interface{}) (pgconn.CommandTag, error)\n\tQuery(context.Context, string, ...interface{}) (pgx.Rows, error)\n\tQueryRow(context.Context, string, ...interface{}) pgx.Row\n}\n\nfunc New(db DBTX) *Queries {\n\treturn &Queries{db: db}\n}\n\ntype Queries struct {\n\tdb DBTX\n}\n\nfunc (q *Queries) WithTx(tx pgx.Tx) *Queries {\n\treturn &Queries{\n\t\tdb: tx,\n\t}\n}\n```\n\n```go platform/apps/belfry/internal/database/db_test.go\npackage database\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/url\"\n\t\"testing\"\n\n\t\"github.com/amacneil/dbmate/v2/pkg/dbmate\"\n\t_ \"github.com/amacneil/dbmate/v2/pkg/driver/postgres\"\n\t\"github.com/jackc/pgx/v5\"\n\t\"github.com/jackc/pgx/v5/pgxpool\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"github.com/testcontainers/testcontainers-go\"\n\t\"github.com/testcontainers/testcontainers-go/wait\"\n)\n\ntype DatabaseTestSuite struct {\n\tsuite.Suite\n\tpostgres postgres\n\n\tpool *pgxpool.Pool\n\ttx   pgx.Tx\n}\n\ntype postgres struct {\n\tcontainer                            testcontainers.Container\n\tuser, password, database, host, port string\n}\n\nfunc (s *DatabaseTestSuite) dbURL() string {\n\treturn fmt.Sprintf(\"postgres://%s:%s@%s:%s/%s?sslmode=disable\",\n\t\ts.postgres.user, s.postgres.password, s.postgres.host, s.postgres.port, s.postgres.database)\n}\n\nfunc (s *DatabaseTestSuite) Accept(l testcontainers.Log) {\n\ts.T().Logf(\"%s: %s\", l.LogType, l.Content)\n}\n\nfunc (s *DatabaseTestSuite) SetupSuite() {\n\ts.postgres.user = \"postgres\"\n\ts.postgres.password = \"password\"\n\ts.postgres.database = \"belfry\"\n\n\tctx := context.Background()\n\n\tct, err := testcontainers.GenericContainer(ctx,\n\t\ttestcontainers.GenericContainerRequest{\n\t\t\tContainerRequest: testcontainers.ContainerRequest{\n\t\t\t\tImage:        \"registry.ic-ops.net/cache-docker-hub/postgres:15\",\n\t\t\t\tExposedPorts: []string{\"5432/tcp\"},\n\t\t\t\tWaitingFor:   wait.ForExposedPort(),\n\t\t\t\tEnv: map[string]string{\n\t\t\t\t\t\"POSTGRES_USER\":     s.postgres.user,\n\t\t\t\t\t\"POSTGRES_PASSWORD\": s.postgres.password,\n\t\t\t\t\t\"POSTGRES_DB\":       s.postgres.database,\n\t\t\t\t},\n\t\t\t\tTmpfs: map[string]string{\"/var/lib/postgresql/data\": \"rw\"},\n\t\t\t},\n\t\t\tStarted: true,\n\t\t})\n\ts.NoError(err)\n\n\ts.postgres.container = ct\n\n\tip, err := ct.Host(ctx)\n\ts.NoError(err)\n\ts.postgres.host = ip\n\n\tport, err := ct.MappedPort(ctx, \"5432\")\n\ts.NoError(err)\n\ts.postgres.port = port.Port()\n\n\tu, err := url.Parse(s.dbURL())\n\tif err != nil {\n\t\ts.FailNow(\"unable to parse database url\", err)\n\t}\n\n\tdbm := dbmate.New(u)\n\tdbm.MigrationsDir = []string{\"../../db/migrations\"}\n\tdbm.AutoDumpSchema = false\n\n\tif err := dbm.CreateAndMigrate(); err != nil {\n\t\ts.FailNow(\"error applying migrations\", err)\n\t}\n\n\tpool, err := pgxpool.New(ctx, s.dbURL())\n\ts.NoError(err)\n\ts.pool = pool\n}\n\nfunc (s *DatabaseTestSuite) SetupTest() {\n\ttx, err := s.pool.Begin(context.Background())\n\tif err != nil {\n\t\ts.FailNow(\"failed to begin transaction\", err)\n\t}\n\n\ts.tx = tx\n}\n\nfunc (s *DatabaseTestSuite) TearDownTest() {\n\tif err := s.tx.Rollback(context.Background()); err != nil {\n\t\ts.FailNow(\"failed to rollback transaction\", err)\n\t}\n}\n\nfunc (s *DatabaseTestSuite) TearDownSuite() {\n\tctx := context.Background()\n\ts.NoError(s.postgres.container.Terminate(ctx))\n}\n\nfunc TestDatabaseTestSuite(t *testing.T) {\n\tsuite.Run(t, new(DatabaseTestSuite))\n}\n```\n\n```go platform/apps/belfry/internal/database/deliveries.sql.go\n// Code generated by sqlc. DO NOT EDIT.\n// versions:\n//   sqlc v1.27.0\n// source: deliveries.sql\n\npackage database\n\nimport (\n\t\"context\"\n\n\t\"github.com/jackc/pgx/v5/pgtype\"\n)\n\nconst createDeliveriesForNotification = `-- name: CreateDeliveriesForNotification :many\nWITH inserted_rows AS (\n  INSERT INTO belfry.deliveries (notification_id, recipient_id, provider_id)\n  SELECT n.id, r.recipient_id, p.provider_id\n  FROM belfry.notifications n\n  CROSS JOIN unnest(n.recipient_ids) AS r(recipient_id)\n  CROSS JOIN unnest(n.provider_ids) AS p(provider_id)\n  WHERE n.id = $1\n  ON CONFLICT (notification_id, recipient_id, provider_id) DO NOTHING\n  RETURNING id, notification_id, provider_id, recipient_id, status, sent_at, read_at\n)\nSELECT id, notification_id, provider_id, recipient_id, status, sent_at, read_at FROM belfry.deliveries\nWHERE notification_id = $1\nUNION ALL\nSELECT id, notification_id, provider_id, recipient_id, status, sent_at, read_at FROM inserted_rows\n`\n\nfunc (q *Queries) CreateDeliveriesForNotification(ctx context.Context, id string) ([]*Delivery, error) {\n\trows, err := q.db.Query(ctx, createDeliveriesForNotification, id)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\tvar items []*Delivery\n\tfor rows.Next() {\n\t\tvar i Delivery\n\t\tif err := rows.Scan(\n\t\t\t&i.ID,\n\t\t\t&i.NotificationID,\n\t\t\t&i.ProviderID,\n\t\t\t&i.RecipientID,\n\t\t\t&i.Status,\n\t\t\t&i.SentAt,\n\t\t\t&i.ReadAt,\n\t\t); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\titems = append(items, &i)\n\t}\n\tif err := rows.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn items, nil\n}\n\nconst createDelivery = `-- name: CreateDelivery :one\nINSERT INTO belfry.deliveries (\n  notification_id,\n  provider_id,\n  recipient_id\n) VALUES (\n  $1, $2, $3\n)\nRETURNING id, notification_id, provider_id, recipient_id, status, sent_at, read_at\n`\n\ntype CreateDeliveryParams struct {\n\tNotificationID string\n\tProviderID     string\n\tRecipientID    string\n}\n\nfunc (q *Queries) CreateDelivery(ctx context.Context, arg CreateDeliveryParams) (*Delivery, error) {\n\trow := q.db.QueryRow(ctx, createDelivery, arg.NotificationID, arg.ProviderID, arg.RecipientID)\n\tvar i Delivery\n\terr := row.Scan(\n\t\t&i.ID,\n\t\t&i.NotificationID,\n\t\t&i.ProviderID,\n\t\t&i.RecipientID,\n\t\t&i.Status,\n\t\t&i.SentAt,\n\t\t&i.ReadAt,\n\t)\n\treturn &i, err\n}\n\nconst getDeliveriesByNotification = `-- name: GetDeliveriesByNotification :many\nSELECT id, notification_id, provider_id, recipient_id, status, sent_at, read_at\nFROM belfry.deliveries\nWHERE notification_id = $1\n`\n\nfunc (q *Queries) GetDeliveriesByNotification(ctx context.Context, notificationID string) ([]*Delivery, error) {\n\trows, err := q.db.Query(ctx, getDeliveriesByNotification, notificationID)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\tvar items []*Delivery\n\tfor rows.Next() {\n\t\tvar i Delivery\n\t\tif err := rows.Scan(\n\t\t\t&i.ID,\n\t\t\t&i.NotificationID,\n\t\t\t&i.ProviderID,\n\t\t\t&i.RecipientID,\n\t\t\t&i.Status,\n\t\t\t&i.SentAt,\n\t\t\t&i.ReadAt,\n\t\t); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\titems = append(items, &i)\n\t}\n\tif err := rows.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn items, nil\n}\n\nconst getDelivery = `-- name: GetDelivery :one\nSELECT id, notification_id, provider_id, recipient_id, status, sent_at, read_at\nFROM belfry.deliveries\nWHERE id = $1\n`\n\nfunc (q *Queries) GetDelivery(ctx context.Context, id string) (*Delivery, error) {\n\trow := q.db.QueryRow(ctx, getDelivery, id)\n\tvar i Delivery\n\terr := row.Scan(\n\t\t&i.ID,\n\t\t&i.NotificationID,\n\t\t&i.ProviderID,\n\t\t&i.RecipientID,\n\t\t&i.Status,\n\t\t&i.SentAt,\n\t\t&i.ReadAt,\n\t)\n\treturn &i, err\n}\n\nconst updateDelivery = `-- name: UpdateDelivery :one\nUPDATE belfry.deliveries SET\n  status = COALESCE($2, status),\n  sent_at = COALESCE($3, sent_at),\n  read_at = COALESCE($4, read_at)\nWHERE id = $1\nRETURNING id, notification_id, provider_id, recipient_id, status, sent_at, read_at\n`\n\ntype UpdateDeliveryParams struct {\n\tID     string\n\tStatus NullDeliveryStatus\n\tSentAt pgtype.Timestamp\n\tReadAt pgtype.Timestamp\n}\n\nfunc (q *Queries) UpdateDelivery(ctx context.Context, arg UpdateDeliveryParams) (*Delivery, error) {\n\trow := q.db.QueryRow(ctx, updateDelivery,\n\t\targ.ID,\n\t\targ.Status,\n\t\targ.SentAt,\n\t\targ.ReadAt,\n\t)\n\tvar i Delivery\n\terr := row.Scan(\n\t\t&i.ID,\n\t\t&i.NotificationID,\n\t\t&i.ProviderID,\n\t\t&i.RecipientID,\n\t\t&i.Status,\n\t\t&i.SentAt,\n\t\t&i.ReadAt,\n\t)\n\treturn &i, err\n}\n```\n\n```go platform/apps/belfry/internal/database/deliveries_test.go\npackage database\n\nimport (\n\t\"context\"\n\n\t\"github.com/google/uuid\"\n)\n\nfunc (s *DatabaseTestSuite) Test_GetDelivery() {\n\tctx := context.Background()\n\tdb := New(s.tx)\n\n\tt, err := db.CreateNotificationType(ctx, CreateNotificationTypeParams{\n\t\tName:     \"fizz\",\n\t\tCategory: \"buzz\",\n\t})\n\ts.NoError(err)\n\n\tp, err := db.CreateProvider(ctx, CreateProviderParams{\n\t\tType:              ProviderTypeInbox,\n\t\tName:              \"foo\",\n\t\tWorkflowTaskQueue: \"bar\",\n\t\tWorkflowName:      \"foo\",\n\t})\n\ts.NoError(err)\n\n\tn, err := db.CreateNotification(ctx, CreateNotificationParams{\n\t\tTenantID:     uuid.NewString(),\n\t\tRecipientIds: []string{uuid.NewString()},\n\t\tProviderIds:  []string{p.ID},\n\t\tMessage:      \"foo\",\n\t\tPriority:     1,\n\t\tTypeID:       t.ID,\n\t})\n\ts.NoError(err)\n\n\td, err := db.CreateDelivery(ctx, CreateDeliveryParams{\n\t\tNotificationID: n.ID,\n\t\tProviderID:     p.ID,\n\t\tRecipientID:    n.RecipientIds[0],\n\t})\n\ts.NoError(err)\n\n\tgot, err := db.GetDelivery(ctx, d.ID)\n\ts.NoError(err)\n\ts.Equal(d, got)\n}\n\nfunc (s *DatabaseTestSuite) Test_CreateDeliveriesForNotification() {\n\tctx := context.Background()\n\tdb := New(s.tx)\n\n\tt, err := db.CreateNotificationType(ctx, CreateNotificationTypeParams{\n\t\tName:     \"fizz\",\n\t\tCategory: \"buzz\",\n\t})\n\ts.NoError(err)\n\n\tp, err := db.CreateProvider(ctx, CreateProviderParams{\n\t\tType:              ProviderTypeEmail,\n\t\tName:              \"test\",\n\t\tWorkflowTaskQueue: \"bar\",\n\t\tWorkflowName:      \"foo\",\n\t})\n\ts.NoError(err)\n\n\tn, err := db.CreateNotification(ctx, CreateNotificationParams{\n\t\tTenantID:     uuid.NewString(),\n\t\tRecipientIds: []string{uuid.NewString()},\n\t\tProviderIds:  []string{p.ID},\n\t\tMessage:      \"foo\",\n\t\tPriority:     1,\n\t\tTypeID:       t.ID,\n\t})\n\ts.NoError(err)\n\n\tdeliveries, err := db.CreateDeliveriesForNotification(ctx, n.ID)\n\ts.NoError(err)\n\n\ts.Len(deliveries, 1)\n\ts.Equal(deliveries[0].NotificationID, n.ID)\n\ts.Equal(deliveries[0].RecipientID, n.RecipientIds[0])\n\ts.Equal(deliveries[0].ProviderID, n.ProviderIds[0])\n\ts.Equal(deliveries[0].Status, DeliveryStatusCreated)\n\ts.NotEmpty(deliveries[0].ID)\n}\n\nfunc (s *DatabaseTestSuite) Test_UpdateDelivery_status() {\n\tctx := context.Background()\n\tdb := New(s.tx)\n\n\tt, err := db.CreateNotificationType(ctx, CreateNotificationTypeParams{\n\t\tName:     \"fizz\",\n\t\tCategory: \"buzz\",\n\t})\n\ts.NoError(err)\n\n\tp, err := db.CreateProvider(ctx, CreateProviderParams{\n\t\tType:              ProviderTypeInbox,\n\t\tName:              \"foo\",\n\t\tWorkflowTaskQueue: \"bar\",\n\t\tWorkflowName:      \"foo\",\n\t})\n\ts.NoError(err)\n\n\tn, err := db.CreateNotification(ctx, CreateNotificationParams{\n\t\tTenantID:     uuid.NewString(),\n\t\tRecipientIds: []string{uuid.NewString()},\n\t\tProviderIds:  []string{p.ID},\n\t\tMessage:      \"foo\",\n\t\tPriority:     1,\n\t\tTypeID:       t.ID,\n\t})\n\ts.NoError(err)\n\n\td, err := db.CreateDelivery(ctx, CreateDeliveryParams{\n\t\tNotificationID: n.ID,\n\t\tProviderID:     p.ID,\n\t\tRecipientID:    n.RecipientIds[0],\n\t})\n\ts.NoError(err)\n\n\tgot, err := db.UpdateDelivery(ctx, UpdateDeliveryParams{\n\t\tID:     d.ID,\n\t\tStatus: NullDeliveryStatus{DeliveryStatus: DeliveryStatusDelivered, Valid: true},\n\t})\n\ts.NoError(err)\n\ts.Equal(&Delivery{\n\t\tID:             d.ID,\n\t\tNotificationID: d.NotificationID,\n\t\tProviderID:     d.ProviderID,\n\t\tRecipientID:    d.RecipientID,\n\t\tStatus:         DeliveryStatusDelivered,\n\t}, got)\n}\n```\n\n```go platform/apps/belfry/internal/database/inbox.sql.go\n// Code generated by sqlc. DO NOT EDIT.\n// versions:\n//   sqlc v1.27.0\n// source: inbox.sql\n\npackage database\n\nimport (\n\t\"context\"\n)\n\nconst getInboxMessages = `-- name: GetInboxMessages :many\nSELECT notification_id, recipient_id, provider_id, tenant_id, message, data, priority, type, created_at\nFROM belfry.inbox_messages\nWHERE recipient_id = $1\n  AND provider_id = $2\n  AND tenant_id = $3\n`\n\ntype GetInboxMessagesParams struct {\n\tRecipientID string\n\tProviderID  string\n\tTenantID    string\n}\n\nfunc (q *Queries) GetInboxMessages(ctx context.Context, arg GetInboxMessagesParams) ([]*InboxMessage, error) {\n\trows, err := q.db.Query(ctx, getInboxMessages, arg.RecipientID, arg.ProviderID, arg.TenantID)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\tvar items []*InboxMessage\n\tfor rows.Next() {\n\t\tvar i InboxMessage\n\t\tif err := rows.Scan(\n\t\t\t&i.NotificationID,\n\t\t\t&i.RecipientID,\n\t\t\t&i.ProviderID,\n\t\t\t&i.TenantID,\n\t\t\t&i.Message,\n\t\t\t&i.Data,\n\t\t\t&i.Priority,\n\t\t\t&i.Type,\n\t\t\t&i.CreatedAt,\n\t\t); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\titems = append(items, &i)\n\t}\n\tif err := rows.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn items, nil\n}\n```\n\n```go platform/apps/belfry/internal/database/inbox_test.go\npackage database\n\nimport (\n\t\"context\"\n\n\t\"github.com/google/uuid\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *DatabaseTestSuite) TestGetInboxMessages() {\n\tctx := context.Background()\n\tdb := New(s.tx)\n\n\tt, err := db.CreateNotificationType(ctx, CreateNotificationTypeParams{\n\t\tName:     \"fizz\",\n\t\tCategory: \"buzz\",\n\t})\n\ts.NoError(err)\n\n\tp, err := db.CreateProvider(ctx, CreateProviderParams{\n\t\tType:              ProviderTypeInbox,\n\t\tName:              \"test\",\n\t\tWorkflowName:      \"foo\",\n\t\tWorkflowTaskQueue: \"bar\",\n\t})\n\ts.NoError(err)\n\n\tn, err := db.CreateNotification(ctx, CreateNotificationParams{\n\t\tTenantID:     uuid.NewString(),\n\t\tRecipientIds: []string{uuid.NewString()},\n\t\tProviderIds:  []string{p.ID},\n\t\tMessage:      \"foo\",\n\t\tPriority:     1,\n\t\tTypeID:       t.ID,\n\t})\n\ts.NoError(err)\n\n\td, err := db.CreateDelivery(ctx, CreateDeliveryParams{\n\t\tNotificationID: n.ID,\n\t\tProviderID:     p.ID,\n\t\tRecipientID:    n.RecipientIds[0],\n\t})\n\ts.NoError(err)\n\n\tinbox, err := db.GetInboxMessages(ctx, GetInboxMessagesParams{\n\t\tRecipientID: d.RecipientID,\n\t\tProviderID:  d.ProviderID,\n\t\tTenantID:    n.TenantID,\n\t})\n\ts.NoError(err)\n\trequire.Len(s.T(), inbox, 1)\n\ts.Equal(&InboxMessage{\n\t\tNotificationID: n.ID,\n\t\tRecipientID:    d.RecipientID,\n\t\tProviderID:     d.ProviderID,\n\t\tTenantID:       n.TenantID,\n\t\tMessage:        n.Message,\n\t\tData:           n.Data,\n\t\tCreatedAt:      n.CreatedAt,\n\t\tPriority:       1,\n\t\tType:           \"fizz:buzz\",\n\t}, inbox[0])\n}\n\nfunc (s *DatabaseTestSuite) TestGetInboxMessages_wrongProviderType() {\n\tctx := context.Background()\n\tdb := New(s.tx)\n\n\tt, err := db.CreateNotificationType(ctx, CreateNotificationTypeParams{\n\t\tName:     \"fizz\",\n\t\tCategory: \"buzz\",\n\t})\n\ts.NoError(err)\n\n\tp, err := db.CreateProvider(ctx, CreateProviderParams{\n\t\tType:              ProviderTypeEmail,\n\t\tName:              \"test\",\n\t\tWorkflowName:      \"foo\",\n\t\tWorkflowTaskQueue: \"bar\",\n\t})\n\ts.NoError(err)\n\n\tn, err := db.CreateNotification(ctx, CreateNotificationParams{\n\t\tTenantID:     uuid.NewString(),\n\t\tRecipientIds: []string{uuid.NewString()},\n\t\tProviderIds:  []string{p.ID},\n\t\tMessage:      \"foo\",\n\t\tPriority:     1,\n\t\tTypeID:       t.ID,\n\t})\n\ts.NoError(err)\n\n\td, err := db.CreateDelivery(ctx, CreateDeliveryParams{\n\t\tNotificationID: n.ID,\n\t\tProviderID:     p.ID,\n\t\tRecipientID:    n.RecipientIds[0],\n\t})\n\ts.NoError(err)\n\n\tinbox, err := db.GetInboxMessages(ctx, GetInboxMessagesParams{\n\t\tRecipientID: d.RecipientID,\n\t\tProviderID:  d.ProviderID,\n\t\tTenantID:    n.TenantID,\n\t})\n\ts.NoError(err)\n\trequire.Len(s.T(), inbox, 0)\n}\n```\n\nmocks\n```go platform/apps/belfry/internal/database/mocks/mock_querier.go\n// Code generated by mockery. DO NOT EDIT.\n\npackage mocks\n\nimport (\n\tcontext \"context\"\n\n\tdatabase \"github.com/immuta/platform/apps/belfry/internal/database\"\n\tmock \"github.com/stretchr/testify/mock\"\n)\n\n// MockQuerier is an autogenerated mock type for the Querier type\ntype MockQuerier struct {\n\tmock.Mock\n}\n\ntype MockQuerier_Expecter struct {\n\tmock *mock.Mock\n}\n\nfunc (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {\n\treturn &MockQuerier_Expecter{mock: &_m.Mock}\n}\n\n// CreateDeliveriesForNotification provides a mock function with given fields: ctx, id\nfunc (_m *MockQuerier) CreateDeliveriesForNotification(ctx context.Context, id string) ([]*database.Delivery, error) {\n\tret := _m.Called(ctx, id)\n\n\tif len(ret) == 0 {\n\t\tpanic(\"no return value specified for CreateDeliveriesForNotification\")\n\t}\n\n\tvar r0 []*database.Delivery\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, string) ([]*database.Delivery, error)); ok {\n\t\treturn rf(ctx, id)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, string) []*database.Delivery); ok {\n\t\tr0 = rf(ctx, id)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]*database.Delivery)\n\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, string) error); ok {\n\t\tr1 = rf(ctx, id)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}\n\n// MockQuerier_CreateDeliveriesForNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDeliveriesForNotification'\ntype MockQuerier_CreateDeliveriesForNotification_Call struct {\n\t*mock.Call\n}\n\n// CreateDeliveriesForNotification is a helper method to define mock.On call\n//   - ctx context.Context\n//   - id string\nfunc (_e *MockQuerier_Expecter) CreateDeliveriesForNotification(ctx interface{}, id interface{}) *MockQuerier_CreateDeliveriesForNotification_Call {\n\treturn &MockQuerier_CreateDeliveriesForNotification_Call{Call: _e.mock.On(\"CreateDeliveriesForNotification\", ctx, id)}\n}\n\nfunc (_c *MockQuerier_CreateDeliveriesForNotification_Call) Run(run func(ctx context.Context, id string)) *MockQuerier_CreateDeliveriesForNotification_Call {\n\t_c.Call.Run(func(args mock.Arguments) {\n\t\trun(args[0].(context.Context), args[1].(string))\n\t})\n\treturn _c\n}\n\nfunc (_c *MockQuerier_CreateDeliveriesForNotification_Call) Return(_a0 []*database.Delivery, _a1 error) *MockQuerier_CreateDeliveriesForNotification_Call {\n\t_c.Call.Return(_a0, _a1)\n\treturn _c\n}\n\nfunc (_c *MockQuerier_CreateDeliveriesForNotification_Call) RunAndReturn(run func(context.Context, string) ([]*database.Delivery, error)) *MockQuerier_CreateDeliveriesForNotification_Call {\n\t_c.Call.Return(run)\n\treturn _c\n}\n\n// CreateDelivery provides a mock function with given fields: ctx, arg\nfunc (_m *MockQuerier) CreateDelivery(ctx context.Context, arg database.CreateDeliveryParams) (*database.Delivery, error) {\n\tret := _m.Called(ctx, arg)\n\n\tif len(ret) == 0 {\n\t\tpanic(\"no return value specified for CreateDelivery\")\n\t}\n\n\tvar r0 *database.Delivery\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, database.CreateDeliveryParams) (*database.Delivery, error)); ok {\n\t\treturn rf(ctx, arg)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, database.CreateDeliveryParams) *database.Delivery); ok {\n\t\tr0 = rf(ctx, arg)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*database.Delivery)\n\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, database.CreateDeliveryParams) error); ok {\n\t\tr1 = rf(ctx, arg)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}\n\n// MockQuerier_CreateDelivery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDelivery'\ntype MockQuerier_CreateDelivery_Call struct {\n\t*mock.Call\n}\n\n// CreateDelivery is a helper method to define mock.On call\n//   - ctx context.Context\n//   - arg database.CreateDeliveryParams\nfunc (_e *MockQuerier_Expecter) CreateDelivery(ctx interface{}, arg interface{}) *MockQuerier_CreateDelivery_Call {\n\treturn &MockQuerier_CreateDelivery_Call{Call: _e.mock.On(\"CreateDelivery\", ctx, arg)}\n}\n\nfunc (_c *MockQuerier_CreateDelivery_Call) Run(run func(ctx context.Context, arg database.CreateDeliveryParams)) *MockQuerier_CreateDelivery_Call {\n\t_c.Call.Run(func(args mock.Arguments) {\n\t\trun(args[0].(context.Context), args[1].(database.CreateDeliveryParams))\n\t})\n\treturn _c\n}\n\nfunc (_c *MockQuerier_CreateDelivery_Call) Return(_a0 *database.Delivery, _a1 error) *MockQuerier_CreateDelivery_Call {\n\t_c.Call.Return(_a0, _a1)\n\treturn _c\n}\n\nfunc (_c *MockQuerier_CreateDelivery_Call) RunAndReturn(run func(context.Context, database.CreateDeliveryParams) (*database.Delivery, error)) *MockQuerier_CreateDelivery_Call {\n\t_c.Call.Return(run)\n\treturn _c\n}\n\n// CreateNotification provides a mock function with given fields: ctx, arg\nfunc (_m *MockQuerier) CreateNotification(ctx context.Context, arg database.CreateNotificationParams) (*database.Notification, error) {\n\tret := _m.Called(ctx, arg)\n\n\tif len(ret) == 0 {\n\t\tpanic(\"no return value specified for CreateNotification\")\n\t}\n\n\tvar r0 *database.Notification\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, database.CreateNotificationParams) (*database.Notification, error)); ok {\n\t\treturn rf(ctx, arg)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, database.CreateNotificationParams) *database.Notification); ok {\n\t\tr0 = rf(ctx, arg)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*database.Notification)\n\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, database.CreateNotificationParams) error); ok {\n\t\tr1 = rf(ctx, arg)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}\n\n// MockQuerier_CreateNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotification'\ntype MockQuerier_CreateNotification_Call struct {\n\t*mock.Call\n}\n\n// CreateNotification is a helper method to define mock.On call\n//   - ctx context.Context\n//   - arg database.CreateNotificationParams\nfunc (_e *MockQuerier_Expecter) CreateNotification(ctx interface{}, arg interface{}) *MockQuerier_CreateNotification_Call {\n\treturn &MockQuerier_CreateNotification_Call{Call: _e.mock.On(\"CreateNotification\", ctx, arg)}\n}\n\nfunc (_c *MockQuerier_CreateNotification_Call) Run(run func(ctx context.Context, arg database.CreateNotificationParams)) *MockQuerier_CreateNotification_Call {\n\t_c.Call.Run(func(args mock.Arguments) {\n\t\trun(args[0].(context.Context), args[1].(database.CreateNotificationParams))\n\t})\n\treturn _c\n}\n\nfunc (_c *MockQuerier_CreateNotification_Call) Return(_a0 *database.Notification, _a1 error) *MockQuerier_CreateNotification_Call {\n\t_c.Call.Return(_a0, _a1)\n\treturn _c\n}\n\nfunc (_c *MockQuerier_CreateNotification_Call) RunAndReturn(run func(context.Context, database.CreateNotificationParams) (*database.Notification, error)) *MockQuerier_CreateNotification_Call {\n\t_c.Call.Return(run)\n\treturn _c\n}\n\n// CreateNotificationType provides a mock function with given fields: ctx, arg\nfunc (_m *MockQuerier) CreateNotificationType(ctx context.Context, arg database.CreateNotificationTypeParams) (*database.NotificationType, error) {\n\tret := _m.Called(ctx, arg)\n\n\tif len(ret) == 0 {\n\t\tpanic(\"no return value specified for CreateNotificationType\")\n\t}\n\n\tvar r0 *database.NotificationType\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, database.CreateNotificationTypeParams) (*database.NotificationType, error)); ok {\n\t\treturn rf(ctx, arg)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, database.CreateNotificationTypeParams) *database.NotificationType); ok {\n\t\tr0 = rf(ctx, arg)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*database.NotificationType)\n\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, database.CreateNotificationTypeParams) error); ok {\n\t\tr1 = rf(ctx, arg)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}\n\n// MockQuerier_CreateNotificationType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotificationType'\ntype MockQuerier_CreateNotificationType_Call struct {\n\t*mock.Call\n}\n\n// CreateNotificationType is a helper method to define mock.On call\n//   - ctx context.Context\n//   - arg database.CreateNotificationTypeParams\nfunc (_e *MockQuerier_Expecter) CreateNotificationType(ctx interface{}, arg interface{}) *MockQuerier_CreateNotificationType_Call {\n\treturn &MockQuerier_CreateNotificationType_Call{Call: _e.mock.On(\"CreateNotificationType\", ctx, arg)}\n}\n\nfunc (_c *MockQuerier_CreateNotificationType_Call) Run(run func(ctx context.Context, arg database.CreateNotificationTypeParams)) *MockQuerier_CreateNotificationType_Call {\n\t_c.Call.Run(func(args mock.Arguments) {\n\t\trun(args[0].(context.Context), args[1].(database.CreateNotificationTypeParams))\n\t})\n\treturn _c\n}\n\nfunc (_c *MockQuerier_CreateNotificationType_Call) Return(_a0 *database.NotificationType, _a1 error) *MockQuerier_CreateNotificationType_Call {\n\t_c.Call.Return(_a0, _a1)\n\treturn _c\n}\n\nfunc (_c *MockQuerier_CreateNotificationType_Call) RunAndReturn(run func(context.Context, database.CreateNotificationTypeParams) (*database.NotificationType, error)) *MockQuerier_CreateNotificationType_Call {\n\t_c.Call.Return(run)\n\treturn _c\n}\n\n// CreateProvider provides a mock function with given fields: ctx, arg\nfunc (_m *MockQuerier) CreateProvider(ctx context.Context, arg database.CreateProviderParams) (*database.Provider, error) {\n\tret := _m.Called(ctx, arg)\n\n\tif len(ret) == 0 {\n\t\tpanic(\"no return value specified for CreateProvider\")\n\t}\n\n\tvar r0 *database.Provider\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, database.CreateProviderParams) (*database.Provider, error)); ok {\n\t\treturn rf(ctx, arg)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, database.CreateProviderParams) *database.Provider); ok {\n\t\tr0 = rf(ctx, arg)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*database.Provider)\n\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, database.CreateProviderParams) error); ok {\n\t\tr1 = rf(ctx, arg)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}\n\n// MockQuerier_CreateProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProvider'\ntype MockQuerier_CreateProvider_Call struct {\n\t*mock.Call\n}\n\n// CreateProvider is a helper method to define mock.On call\n//   - ctx context.Context\n//   - arg database.CreateProviderParams\nfunc (_e *MockQuerier_Expecter) CreateProvider(ctx interface{}, arg interface{}) *MockQuerier_CreateProvider_Call {\n\treturn &MockQuerier_CreateProvider_Call{Call: _e.mock.On(\"CreateProvider\", ctx, arg)}\n}\n\nfunc (_c *MockQuerier_CreateProvider_Call) Run(run func(ctx context.Context, arg database.CreateProviderParams)) *MockQuerier_CreateProvider_Call {\n\t_c.Call.Run(func(args mock.Arguments) {\n\t\trun(args[0].(context.Context), args[1].(database.CreateProviderParams))\n\t})\n\treturn _c\n}\n\nfunc (_c *MockQuerier_CreateProvider_Call) Return(_a0 *database.Provider, _a1 error) *MockQuerier_CreateProvider_Call {\n\t_c.Call.Return(_a0, _a1)\n\treturn _c\n}\n\nfunc (_c *MockQuerier_CreateProvider_Call) RunAndReturn(run func(context.Context, database.CreateProviderParams) (*database.Provider, error)) *MockQuerier_CreateProvider_Call {\n\t_c.Call.Return(run)\n\treturn _c\n}\n\n// DeleteProvider provides a mock function with given fields: ctx, id\nfunc (_m *MockQuerier) DeleteProvider(ctx context.Context, id string) error {\n\tret := _m.Called(ctx, id)\n\n\tif len(ret) == 0 {\n\t\tpanic(\"no return value specified for DeleteProvider\")\n\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(context.Context, string) error); ok {\n\t\tr0 = rf(ctx, id)\n\t} else {\n\t\tr0 = ret.Error(0)\n\t}\n\n\treturn r0\n}\n\n// MockQuerier_DeleteProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProvider'\ntype MockQuerier_DeleteProvider_Call struct {\n\t*mock.Call\n}\n\n// DeleteProvider is a helper method to define mock.On call\n//   - ctx context.Context\n//   - id string\nfunc (_e *MockQuerier_Expecter) DeleteProvider(ctx interface{}, id interface{}) *MockQuerier_DeleteProvider_Call {\n\treturn &MockQuerier_DeleteProvider_Call{Call: _e.mock.On(\"DeleteProvider\", ctx, id)}\n}\n\nfunc (_c *MockQuerier_DeleteProvider_Call) Run(run func(ctx context.Context, id string)) *MockQuerier_DeleteProvider_Call {\n\t_c.Call.Run(func(args mock.Arguments) {\n\t\trun(args[0].(context.Context), args[1].(string))\n\t})\n\treturn _c\n}\n\nfunc (_c *MockQuerier_DeleteProvider_Call) Return(_a0 error) *MockQuerier_DeleteProvider_Call {\n\t_c.Call.Return(_a0)\n\treturn _c\n}\n\nfunc (_c *MockQuerier_DeleteProvider_Call) RunAndReturn(run func(context.Context, string) error) *MockQuerier_DeleteProvider_Call {\n\t_c.Call.Return(run)\n\treturn _c\n}\n\n// GetDeliveriesByNotification provides a mock function with given fields: ctx, notificationID\nfunc (_m *MockQuerier) GetDeliveriesByNotification(ctx context.Context, notificationID string) ([]*database.Delivery, error) {\n\tret := _m.Called(ctx, notificationID)\n\n\tif len(ret) == 0 {\n\t\tpanic(\"no return value specified for GetDeliveriesByNotification\")\n\t}\n\n\tvar r0 []*database.Delivery\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, string) ([]*database.Delivery, error)); ok {\n\t\treturn rf(ctx, notificationID)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, string) []*database.Delivery); ok {\n\t\tr0 = rf(ctx, notificationID)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]*database.Delivery)\n\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, string) error); ok {\n\t\tr1 = rf(ctx, notificationID)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}\n\n// MockQuerier_GetDeliveriesByNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeliveriesByNotification'\ntype MockQuerier_GetDeliveriesByNotification_Call struct {\n\t*mock.Call\n}\n\n// GetDeliveriesByNotification is a helper method to define mock.On call\n//   - ctx context.Context\n//   - notificationID string\nfunc (_e *MockQuerier_Expecter) GetDeliveriesByNotification(ctx interface{}, notificationID interface{}) *MockQuerier_GetDeliveriesByNotification_Call {\n\treturn &MockQuerier_GetDeliveriesByNotification_Call{Call: _e.mock.On(\"GetDeliveriesByNotification\", ctx, notificationID)}\n}\n\nfunc (_c *MockQuerier_GetDeliveriesByNotification_Call) Run(run func(ctx context.Context, notificationID string)) *MockQuerier_GetDeliveriesByNotification_Call {\n\t_c.Call.Run(func(args mock.Arguments) {\n\t\trun(args[0].(context.Context), args[1].(string))\n\t})\n\treturn _c\n}\n\nfunc (_c *MockQuerier_GetDeliveriesByNotification_Call) Return(_a0 []*database.Delivery, _a1 error) *MockQuerier_GetDeliveriesByNotification_Call {\n\t_c.Call.Return(_a0, _a1)\n\treturn _c\n}\n\nfunc (_c *MockQuerier_GetDeliveriesByNotification_Call) RunAndReturn(run func(context.Context, string) ([]*database.Delivery, error)) *MockQuerier_GetDeliveriesByNotification_Call {\n\t_c.Call.Return(run)\n\treturn _c\n}\n\n// GetDelivery provides a mock function with given fields: ctx, id\nfunc (_m *MockQuerier) GetDelivery(ctx context.Context, id string) (*database.Delivery, error) {\n\tret := _m.Called(ctx, id)\n\n\tif len(ret) == 0 {\n\t\tpanic(\"no return value specified for GetDelivery\")\n\t}\n\n\tvar r0 *database.Delivery\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, string) (*database.Delivery, error)); ok {\n\t\treturn rf(ctx, id)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, string) *database.Delivery); ok {\n\t\tr0 = rf(ctx, id)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*database.Delivery)\n\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, string) error); ok {\n\t\tr1 = rf(ctx, id)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}\n\n// MockQuerier_GetDelivery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDelivery'\ntype MockQuerier_GetDelivery_Call struct {\n\t*mock.Call\n}\n\n// GetDelivery is a helper method to define mock.On call\n//   - ctx context.Context\n//   - id string\nfunc (_e *MockQuerier_Expecter) GetDelivery(ctx interface{}, id interface{}) *MockQuerier_GetDelivery_Call {\n\treturn &MockQuerier_GetDelivery_Call{Call: _e.mock.On(\"GetDelivery\", ctx, id)}\n}\n\nfunc (_c *MockQuerier_GetDelivery_Call) Run(run func(ctx context.Context, id string)) *MockQuerier_GetDelivery_Call {\n\t_c.Call.Run(func(args mock.Arguments) {\n\t\trun(args[0].(context.Context), args[1].(string))\n\t})\n\treturn _c\n}\n\nfunc (_c *MockQuerier_GetDelivery_Call) Return(_a0 *database.Delivery, _a1 error) *MockQuerier_GetDelivery_Call {\n\t_c.Call.Return(_a0, _a1)\n\treturn _c\n}\n\nfunc (_c *MockQuerier_GetDelivery_Call) RunAndReturn(run func(context.Context, string) (*database.Delivery, error)) *MockQuerier_GetDelivery_Call {\n\t_c.Call.Return(run)\n\treturn _c\n}\n\n// GetInboxMessages provides a mock function with given fields: ctx, arg\nfunc (_m *MockQuerier) GetInboxMessages(ctx context.Context, arg database.GetInboxMessagesParams) ([]*database.InboxMessage, error) {\n\tret := _m.Called(ctx, arg)\n\n\tif len(ret) == 0 {\n\t\tpanic(\"no return value specified for GetInboxMessages\")\n\t}\n\n\tvar r0 []*database.InboxMessage\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, database.GetInboxMessagesParams) ([]*database.InboxMessage, error)); ok {\n\t\treturn rf(ctx, arg)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, database.GetInboxMessagesParams) []*database.InboxMessage); ok {\n\t\tr0 = rf(ctx, arg)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]*database.InboxMessage)\n\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, database.GetInboxMessagesParams) error); ok {\n\t\tr1 = rf(ctx, arg)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}\n\n// MockQuerier_GetInboxMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInboxMessages'\ntype MockQuerier_GetInboxMessages_Call struct {\n\t*mock.Call\n}\n\n// GetInboxMessages is a helper method to define mock.On call\n//   - ctx context.Context\n//   - arg database.GetInboxMessagesParams\nfunc (_e *MockQuerier_Expecter) GetInboxMessages(ctx interface{}, arg interface{}) *MockQuerier_GetInboxMessages_Call {\n\treturn &MockQuerier_GetInboxMessages_Call{Call: _e.mock.On(\"GetInboxMessages\", ctx, arg)}\n}\n\nfunc (_c *MockQuerier_GetInboxMessages_Call) Run(run func(ctx context.Context, arg database.GetInboxMessagesParams)) *MockQuerier_GetInboxMessages_Call {\n\t_c.Call.Run(func(args mock.Arguments) {\n\t\trun(args[0].(context.Context), args[1].(database.GetInboxMessagesParams))\n\t})\n\treturn _c\n}\n\nfunc (_c *MockQuerier_GetInboxMessages_Call) Return(_a0 []*database.InboxMessage, _a1 error) *MockQuerier_GetInboxMessages_Call {\n\t_c.Call.Return(_a0, _a1)\n\treturn _c\n}\n\nfunc (_c *MockQuerier_GetInboxMessages_Call) RunAndReturn(run func(context.Context, database.GetInboxMessagesParams) ([]*database.InboxMessage, error)) *MockQuerier_GetInboxMessages_Call {\n\t_c.Call.Return(run)\n\treturn _c\n}\n\n// GetNotification provides a mock function with given fields: ctx, id\nfunc (_m *MockQuerier) GetNotification(ctx context.Context, id string) (*database.GetNotificationRow, error) {\n\tret := _m.Called(ctx, id)\n\n\tif len(ret) == 0 {\n\t\tpanic(\"no return value specified for GetNotification\")\n\t}\n\n\tvar r0 *database.GetNotificationRow\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, string) (*database.GetNotificationRow, error)); ok {\n\t\treturn rf(ctx, id)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, string) *database.GetNotificationRow); ok {\n\t\tr0 = rf(ctx, id)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*database.GetNotificationRow)\n\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, string) error); ok {\n\t\tr1 = rf(ctx, id)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}\n\n// MockQuerier_GetNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotification'\ntype MockQuerier_GetNotification_Call struct {\n\t*mock.Call\n}\n\n// GetNotification is a helper method to define mock.On call\n//   - ctx context.Context\n//   - id string\nfunc (_e *MockQuerier_Expecter) GetNotification(ctx interface{}, id interface{}) *MockQuerier_GetNotification_Call {\n\treturn &MockQuerier_GetNotification_Call{Call: _e.mock.On(\"GetNotification\", ctx, id)}\n}\n\nfunc (_c *MockQuerier_GetNotification_Call) Run(run func(ctx context.Context, id string)) *MockQuerier_GetNotification_Call {\n\t_c.Call.Run(func(args mock.Arguments) {\n\t\trun(args[0].(context.Context), args[1].(string))\n\t})\n\treturn _c\n}\n\nfunc (_c *MockQuerier_GetNotification_Call) Return(_a0 *database.GetNotificationRow, _a1 error) *MockQuerier_GetNotification_Call {\n\t_c.Call.Return(_a0, _a1)\n\treturn _c\n}\n\nfunc (_c *MockQuerier_GetNotification_Call) RunAndReturn(run func(context.Context, string) (*database.GetNotificationRow, error)) *MockQuerier_GetNotification_Call {\n\t_c.Call.Return(run)\n\treturn _c\n}\n\n// GetNotificationType provides a mock function with given fields: ctx, id\nfunc (_m *MockQuerier) GetNotificationType(ctx context.Context, id string) (*database.NotificationType, error) {\n\tret := _m.Called(ctx, id)\n\n\tif len(ret) == 0 {\n\t\tpanic(\"no return value specified for GetNotificationType\")\n\t}\n\n\tvar r0 *database.NotificationType\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, string) (*database.NotificationType, error)); ok {\n\t\treturn rf(ctx, id)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, string) *database.NotificationType); ok {\n\t\tr0 = rf(ctx, id)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*database.NotificationType)\n\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, string) error); ok {\n\t\tr1 = rf(ctx, id)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}\n\n// MockQuerier_GetNotificationType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationType'\ntype MockQuerier_GetNotificationType_Call struct {\n\t*mock.Call\n}\n\n// GetNotificationType is a helper method to define mock.On call\n//   - ctx context.Context\n//   - id string\nfunc (_e *MockQuerier_Expecter) GetNotificationType(ctx interface{}, id interface{}) *MockQuerier_GetNotificationType_Call {\n\treturn &MockQuerier_GetNotificationType_Call{Call: _e.mock.On(\"GetNotificationType\", ctx, id)}\n}\n\nfunc (_c *MockQuerier_GetNotificationType_Call) Run(run func(ctx context.Context, id string)) *MockQuerier_GetNotificationType_Call {\n\t_c.Call.Run(func(args mock.Arguments) {\n\t\trun(args[0].(context.Context), args[1].(string))\n\t})\n\treturn _c\n}\n\nfunc (_c *MockQuerier_GetNotificationType_Call) Return(_a0 *database.NotificationType, _a1 error) *MockQuerier_GetNotificationType_Call {\n\t_c.Call.Return(_a0, _a1)\n\treturn _c\n}\n\nfunc (_c *MockQuerier_GetNotificationType_Call) RunAndReturn(run func(context.Context, string) (*database.NotificationType, error)) *MockQuerier_GetNotificationType_Call {\n\t_c.Call.Return(run)\n\treturn _c\n}\n\n// GetNotificationTypeByNameAndCategory provides a mock function with given fields: ctx, arg\nfunc (_m *MockQuerier) GetNotificationTypeByNameAndCategory(ctx context.Context, arg database.GetNotificationTypeByNameAndCategoryParams) (*database.NotificationType, error) {\n\tret := _m.Called(ctx, arg)\n\n\tif len(ret) == 0 {\n\t\tpanic(\"no return value specified for GetNotificationTypeByNameAndCategory\")\n\t}\n\n\tvar r0 *database.NotificationType\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, database.GetNotificationTypeByNameAndCategoryParams) (*database.NotificationType, error)); ok {\n\t\treturn rf(ctx, arg)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, database.GetNotificationTypeByNameAndCategoryParams) *database.NotificationType); ok {\n\t\tr0 = rf(ctx, arg)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*database.NotificationType)\n\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, database.GetNotificationTypeByNameAndCategoryParams) error); ok {\n\t\tr1 = rf(ctx, arg)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}\n\n// MockQuerier_GetNotificationTypeByNameAndCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationTypeByNameAndCategory'\ntype MockQuerier_GetNotificationTypeByNameAndCategory_Call struct {\n\t*mock.Call\n}\n\n// GetNotificationTypeByNameAndCategory is a helper method to define mock.On call\n//   - ctx context.Context\n//   - arg database.GetNotificationTypeByNameAndCategoryParams\nfunc (_e *MockQuerier_Expecter) GetNotificationTypeByNameAndCategory(ctx interface{}, arg interface{}) *MockQuerier_GetNotificationTypeByNameAndCategory_Call {\n\treturn &MockQuerier_GetNotificationTypeByNameAndCategory_Call{Call: _e.mock.On(\"GetNotificationTypeByNameAndCategory\", ctx, arg)}\n}\n\nfunc (_c *MockQuerier_GetNotificationTypeByNameAndCategory_Call) Run(run func(ctx context.Context, arg database.GetNotificationTypeByNameAndCategoryParams)) *MockQuerier_GetNotificationTypeByNameAndCategory_Call {\n\t_c.Call.Run(func(args mock.Arguments) {\n\t\trun(args[0].(context.Context), args[1].(database.GetNotificationTypeByNameAndCategoryParams))\n\t})\n\treturn _c\n}\n\nfunc (_c *MockQuerier_GetNotificationTypeByNameAndCategory_Call) Return(_a0 *database.NotificationType, _a1 error) *MockQuerier_GetNotificationTypeByNameAndCategory_Call {\n\t_c.Call.Return(_a0, _a1)\n\treturn _c\n}\n\nfunc (_c *MockQuerier_GetNotificationTypeByNameAndCategory_Call) RunAndReturn(run func(context.Context, database.GetNotificationTypeByNameAndCategoryParams) (*database.NotificationType, error)) *MockQuerier_GetNotificationTypeByNameAndCategory_Call {\n\t_c.Call.Return(run)\n\treturn _c\n}\n\n// GetNotificationsByStatus provides a mock function with given fields: ctx, status\nfunc (_m *MockQuerier) GetNotificationsByStatus(ctx context.Context, status database.NotificationStatus) ([]*database.GetNotificationsByStatusRow, error) {\n\tret := _m.Called(ctx, status)\n\n\tif len(ret) == 0 {\n\t\tpanic(\"no return value specified for GetNotificationsByStatus\")\n\t}\n\n\tvar r0 []*database.GetNotificationsByStatusRow\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, database.NotificationStatus) ([]*database.GetNotificationsByStatusRow, error)); ok {\n\t\treturn rf(ctx, status)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, database.NotificationStatus) []*database.GetNotificationsByStatusRow); ok {\n\t\tr0 = rf(ctx, status)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).([]*database.GetNotificationsByStatusRow)\n\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, database.NotificationStatus) error); ok {\n\t\tr1 = rf(ctx, status)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}\n\n// MockQuerier_GetNotificationsByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationsByStatus'\ntype MockQuerier_GetNotificationsByStatus_Call struct {\n\t*mock.Call\n}\n\n// GetNotificationsByStatus is a helper method to define mock.On call\n//   - ctx context.Context\n//   - status database.NotificationStatus\nfunc (_e *MockQuerier_Expecter) GetNotificationsByStatus(ctx interface{}, status interface{}) *MockQuerier_GetNotificationsByStatus_Call {\n\treturn &MockQuerier_GetNotificationsByStatus_Call{Call: _e.mock.On(\"GetNotificationsByStatus\", ctx, status)}\n}\n\nfunc (_c *MockQuerier_GetNotificationsByStatus_Call) Run(run func(ctx context.Context, status database.NotificationStatus)) *MockQuerier_GetNotificationsByStatus_Call {\n\t_c.Call.Run(func(args mock.Arguments) {\n\t\trun(args[0].(context.Context), args[1].(database.NotificationStatus))\n\t})\n\treturn _c\n}\n\nfunc (_c *MockQuerier_GetNotificationsByStatus_Call) Return(_a0 []*database.GetNotificationsByStatusRow, _a1 error) *MockQuerier_GetNotificationsByStatus_Call {\n\t_c.Call.Return(_a0, _a1)\n\treturn _c\n}\n\nfunc (_c *MockQuerier_GetNotificationsByStatus_Call) RunAndReturn(run func(context.Context, database.NotificationStatus) ([]*database.GetNotificationsByStatusRow, error)) *MockQuerier_GetNotificationsByStatus_Call {\n\t_c.Call.Return(run)\n\treturn _c\n}\n\n// GetProvider provides a mock function with given fields: ctx, id\nfunc (_m *MockQuerier) GetProvider(ctx context.Context, id string) (*database.Provider, error) {\n\tret := _m.Called(ctx, id)\n\n\tif len(ret) == 0 {\n\t\tpanic(\"no return value specified for GetProvider\")\n\t}\n\n\tvar r0 *database.Provider\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, string) (*database.Provider, error)); ok {\n\t\treturn rf(ctx, id)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, string) *database.Provider); ok {\n\t\tr0 = rf(ctx, id)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*database.Provider)\n\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, string) error); ok {\n\t\tr1 = rf(ctx, id)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}\n\n// MockQuerier_GetProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvider'\ntype MockQuerier_GetProvider_Call struct {\n\t*mock.Call\n}\n\n// GetProvider is a helper method to define mock.On call\n//   - ctx context.Context\n//   - id string\nfunc (_e *MockQuerier_Expecter) GetProvider(ctx interface{}, id interface{}) *MockQuerier_GetProvider_Call {\n\treturn &MockQuerier_GetProvider_Call{Call: _e.mock.On(\"GetProvider\", ctx, id)}\n}\n\nfunc (_c *MockQuerier_GetProvider_Call) Run(run func(ctx context.Context, id string)) *MockQuerier_GetProvider_Call {\n\t_c.Call.Run(func(args mock.Arguments) {\n\t\trun(args[0].(context.Context), args[1].(string))\n\t})\n\treturn _c\n}\n\nfunc (_c *MockQuerier_GetProvider_Call) Return(_a0 *database.Provider, _a1 error) *MockQuerier_GetProvider_Call {\n\t_c.Call.Return(_a0, _a1)\n\treturn _c\n}\n\nfunc (_c *MockQuerier_GetProvider_Call) RunAndReturn(run func(context.Context, string) (*database.Provider, error)) *MockQuerier_GetProvider_Call {\n\t_c.Call.Return(run)\n\treturn _c\n}\n\n// GetProvidersByNameAndType provides a mock function with given fields: ctx, arg\nfunc (_m *MockQuerier) GetProvidersByNameAndType(ctx context.Context, arg database.GetProvidersByNameAndTypeParams) (*database.Provider, error) {\n\tret := _m.Called(ctx, arg)\n\n\tif len(ret) == 0 {\n\t\tpanic(\"no return value specified for GetProvidersByNameAndType\")\n\t}\n\n\tvar r0 *database.Provider\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, database.GetProvidersByNameAndTypeParams) (*database.Provider, error)); ok {\n\t\treturn rf(ctx, arg)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, database.GetProvidersByNameAndTypeParams) *database.Provider); ok {\n\t\tr0 = rf(ctx, arg)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*database.Provider)\n\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, database.GetProvidersByNameAndTypeParams) error); ok {\n\t\tr1 = rf(ctx, arg)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}\n\n// MockQuerier_GetProvidersByNameAndType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvidersByNameAndType'\ntype MockQuerier_GetProvidersByNameAndType_Call struct {\n\t*mock.Call\n}\n\n// GetProvidersByNameAndType is a helper method to define mock.On call\n//   - ctx context.Context\n//   - arg database.GetProvidersByNameAndTypeParams\nfunc (_e *MockQuerier_Expecter) GetProvidersByNameAndType(ctx interface{}, arg interface{}) *MockQuerier_GetProvidersByNameAndType_Call {\n\treturn &MockQuerier_GetProvidersByNameAndType_Call{Call: _e.mock.On(\"GetProvidersByNameAndType\", ctx, arg)}\n}\n\nfunc (_c *MockQuerier_GetProvidersByNameAndType_Call) Run(run func(ctx context.Context, arg database.GetProvidersByNameAndTypeParams)) *MockQuerier_GetProvidersByNameAndType_Call {\n\t_c.Call.Run(func(args mock.Arguments) {\n\t\trun(args[0].(context.Context), args[1].(database.GetProvidersByNameAndTypeParams))\n\t})\n\treturn _c\n}\n\nfunc (_c *MockQuerier_GetProvidersByNameAndType_Call) Return(_a0 *database.Provider, _a1 error) *MockQuerier_GetProvidersByNameAndType_Call {\n\t_c.Call.Return(_a0, _a1)\n\treturn _c\n}\n\nfunc (_c *MockQuerier_GetProvidersByNameAndType_Call) RunAndReturn(run func(context.Context, database.GetProvidersByNameAndTypeParams) (*database.Provider, error)) *MockQuerier_GetProvidersByNameAndType_Call {\n\t_c.Call.Return(run)\n\treturn _c\n}\n\n// UpdateDelivery provides a mock function with given fields: ctx, arg\nfunc (_m *MockQuerier) UpdateDelivery(ctx context.Context, arg database.UpdateDeliveryParams) (*database.Delivery, error) {\n\tret := _m.Called(ctx, arg)\n\n\tif len(ret) == 0 {\n\t\tpanic(\"no return value specified for UpdateDelivery\")\n\t}\n\n\tvar r0 *database.Delivery\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, database.UpdateDeliveryParams) (*database.Delivery, error)); ok {\n\t\treturn rf(ctx, arg)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, database.UpdateDeliveryParams) *database.Delivery); ok {\n\t\tr0 = rf(ctx, arg)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*database.Delivery)\n\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, database.UpdateDeliveryParams) error); ok {\n\t\tr1 = rf(ctx, arg)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}\n\n// MockQuerier_UpdateDelivery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDelivery'\ntype MockQuerier_UpdateDelivery_Call struct {\n\t*mock.Call\n}\n\n// UpdateDelivery is a helper method to define mock.On call\n//   - ctx context.Context\n//   - arg database.UpdateDeliveryParams\nfunc (_e *MockQuerier_Expecter) UpdateDelivery(ctx interface{}, arg interface{}) *MockQuerier_UpdateDelivery_Call {\n\treturn &MockQuerier_UpdateDelivery_Call{Call: _e.mock.On(\"UpdateDelivery\", ctx, arg)}\n}\n\nfunc (_c *MockQuerier_UpdateDelivery_Call) Run(run func(ctx context.Context, arg database.UpdateDeliveryParams)) *MockQuerier_UpdateDelivery_Call {\n\t_c.Call.Run(func(args mock.Arguments) {\n\t\trun(args[0].(context.Context), args[1].(database.UpdateDeliveryParams))\n\t})\n\treturn _c\n}\n\nfunc (_c *MockQuerier_UpdateDelivery_Call) Return(_a0 *database.Delivery, _a1 error) *MockQuerier_UpdateDelivery_Call {\n\t_c.Call.Return(_a0, _a1)\n\treturn _c\n}\n\nfunc (_c *MockQuerier_UpdateDelivery_Call) RunAndReturn(run func(context.Context, database.UpdateDeliveryParams) (*database.Delivery, error)) *MockQuerier_UpdateDelivery_Call {\n\t_c.Call.Return(run)\n\treturn _c\n}\n\n// UpdateNotificationStatus provides a mock function with given fields: ctx, arg\nfunc (_m *MockQuerier) UpdateNotificationStatus(ctx context.Context, arg database.UpdateNotificationStatusParams) error {\n\tret := _m.Called(ctx, arg)\n\n\tif len(ret) == 0 {\n\t\tpanic(\"no return value specified for UpdateNotificationStatus\")\n\t}\n\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func(context.Context, database.UpdateNotificationStatusParams) error); ok {\n\t\tr0 = rf(ctx, arg)\n\t} else {\n\t\tr0 = ret.Error(0)\n\t}\n\n\treturn r0\n}\n\n// MockQuerier_UpdateNotificationStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNotificationStatus'\ntype MockQuerier_UpdateNotificationStatus_Call struct {\n\t*mock.Call\n}\n\n// UpdateNotificationStatus is a helper method to define mock.On call\n//   - ctx context.Context\n//   - arg database.UpdateNotificationStatusParams\nfunc (_e *MockQuerier_Expecter) UpdateNotificationStatus(ctx interface{}, arg interface{}) *MockQuerier_UpdateNotificationStatus_Call {\n\treturn &MockQuerier_UpdateNotificationStatus_Call{Call: _e.mock.On(\"UpdateNotificationStatus\", ctx, arg)}\n}\n\nfunc (_c *MockQuerier_UpdateNotificationStatus_Call) Run(run func(ctx context.Context, arg database.UpdateNotificationStatusParams)) *MockQuerier_UpdateNotificationStatus_Call {\n\t_c.Call.Run(func(args mock.Arguments) {\n\t\trun(args[0].(context.Context), args[1].(database.UpdateNotificationStatusParams))\n\t})\n\treturn _c\n}\n\nfunc (_c *MockQuerier_UpdateNotificationStatus_Call) Return(_a0 error) *MockQuerier_UpdateNotificationStatus_Call {\n\t_c.Call.Return(_a0)\n\treturn _c\n}\n\nfunc (_c *MockQuerier_UpdateNotificationStatus_Call) RunAndReturn(run func(context.Context, database.UpdateNotificationStatusParams) error) *MockQuerier_UpdateNotificationStatus_Call {\n\t_c.Call.Return(run)\n\treturn _c\n}\n\n// UpdateProvider provides a mock function with given fields: ctx, arg\nfunc (_m *MockQuerier) UpdateProvider(ctx context.Context, arg database.UpdateProviderParams) (*database.Provider, error) {\n\tret := _m.Called(ctx, arg)\n\n\tif len(ret) == 0 {\n\t\tpanic(\"no return value specified for UpdateProvider\")\n\t}\n\n\tvar r0 *database.Provider\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, database.UpdateProviderParams) (*database.Provider, error)); ok {\n\t\treturn rf(ctx, arg)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, database.UpdateProviderParams) *database.Provider); ok {\n\t\tr0 = rf(ctx, arg)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*database.Provider)\n\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, database.UpdateProviderParams) error); ok {\n\t\tr1 = rf(ctx, arg)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}\n\n// MockQuerier_UpdateProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProvider'\ntype MockQuerier_UpdateProvider_Call struct {\n\t*mock.Call\n}\n\n// UpdateProvider is a helper method to define mock.On call\n//   - ctx context.Context\n//   - arg database.UpdateProviderParams\nfunc (_e *MockQuerier_Expecter) UpdateProvider(ctx interface{}, arg interface{}) *MockQuerier_UpdateProvider_Call {\n\treturn &MockQuerier_UpdateProvider_Call{Call: _e.mock.On(\"UpdateProvider\", ctx, arg)}\n}\n\nfunc (_c *MockQuerier_UpdateProvider_Call) Run(run func(ctx context.Context, arg database.UpdateProviderParams)) *MockQuerier_UpdateProvider_Call {\n\t_c.Call.Run(func(args mock.Arguments) {\n\t\trun(args[0].(context.Context), args[1].(database.UpdateProviderParams))\n\t})\n\treturn _c\n}\n\nfunc (_c *MockQuerier_UpdateProvider_Call) Return(_a0 *database.Provider, _a1 error) *MockQuerier_UpdateProvider_Call {\n\t_c.Call.Return(_a0, _a1)\n\treturn _c\n}\n\nfunc (_c *MockQuerier_UpdateProvider_Call) RunAndReturn(run func(context.Context, database.UpdateProviderParams) (*database.Provider, error)) *MockQuerier_UpdateProvider_Call {\n\t_c.Call.Return(run)\n\treturn _c\n}\n\n// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.\n// The first argument is typically a *testing.T value.\nfunc NewMockQuerier(t interface {\n\tmock.TestingT\n\tCleanup(func())\n}) *MockQuerier {\n\tmock := &MockQuerier{}\n\tmock.Mock.Test(t)\n\n\tt.Cleanup(func() { mock.AssertExpectations(t) })\n\n\treturn mock\n}\n```\n\n\n```go platform/apps/belfry/internal/database/models.go\n// Code generated by sqlc. DO NOT EDIT.\n// versions:\n//   sqlc v1.27.0\n\npackage database\n\nimport (\n\t\"database/sql/driver\"\n\t\"fmt\"\n\n\t\"github.com/jackc/pgx/v5/pgtype\"\n)\n\ntype DeliveryStatus string\n\nconst (\n\tDeliveryStatusCreated   DeliveryStatus = \"created\"\n\tDeliveryStatusDelivered DeliveryStatus = \"delivered\"\n\tDeliveryStatusFailed    DeliveryStatus = \"failed\"\n)\n\nfunc (e *DeliveryStatus) Scan(src interface{}) error {\n\tswitch s := src.(type) {\n\tcase []byte:\n\t\t*e = DeliveryStatus(s)\n\tcase string:\n\t\t*e = DeliveryStatus(s)\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported scan type for DeliveryStatus: %T\", src)\n\t}\n\treturn nil\n}\n\ntype NullDeliveryStatus struct {\n\tDeliveryStatus DeliveryStatus\n\tValid          bool // Valid is true if DeliveryStatus is not NULL\n}\n\n// Scan implements the Scanner interface.\nfunc (ns *NullDeliveryStatus) Scan(value interface{}) error {\n\tif value == nil {\n\t\tns.DeliveryStatus, ns.Valid = \"\", false\n\t\treturn nil\n\t}\n\tns.Valid = true\n\treturn ns.DeliveryStatus.Scan(value)\n}\n\n// Value implements the driver Valuer interface.\nfunc (ns NullDeliveryStatus) Value() (driver.Value, error) {\n\tif !ns.Valid {\n\t\treturn nil, nil\n\t}\n\treturn string(ns.DeliveryStatus), nil\n}\n\nfunc (e DeliveryStatus) Valid() bool {\n\tswitch e {\n\tcase DeliveryStatusCreated,\n\t\tDeliveryStatusDelivered,\n\t\tDeliveryStatusFailed:\n\t\treturn true\n\t}\n\treturn false\n}\n\ntype NotificationStatus string\n\nconst (\n\tNotificationStatusCreated   NotificationStatus = \"created\"\n\tNotificationStatusProcessed NotificationStatus = \"processed\"\n\tNotificationStatusFailed    NotificationStatus = \"failed\"\n)\n\nfunc (e *NotificationStatus) Scan(src interface{}) error {\n\tswitch s := src.(type) {\n\tcase []byte:\n\t\t*e = NotificationStatus(s)\n\tcase string:\n\t\t*e = NotificationStatus(s)\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported scan type for NotificationStatus: %T\", src)\n\t}\n\treturn nil\n}\n\ntype NullNotificationStatus struct {\n\tNotificationStatus NotificationStatus\n\tValid              bool // Valid is true if NotificationStatus is not NULL\n}\n\n// Scan implements the Scanner interface.\nfunc (ns *NullNotificationStatus) Scan(value interface{}) error {\n\tif value == nil {\n\t\tns.NotificationStatus, ns.Valid = \"\", false\n\t\treturn nil\n\t}\n\tns.Valid = true\n\treturn ns.NotificationStatus.Scan(value)\n}\n\n// Value implements the driver Valuer interface.\nfunc (ns NullNotificationStatus) Value() (driver.Value, error) {\n\tif !ns.Valid {\n\t\treturn nil, nil\n\t}\n\treturn string(ns.NotificationStatus), nil\n}\n\nfunc (e NotificationStatus) Valid() bool {\n\tswitch e {\n\tcase NotificationStatusCreated,\n\t\tNotificationStatusProcessed,\n\t\tNotificationStatusFailed:\n\t\treturn true\n\t}\n\treturn false\n}\n\ntype ProviderType string\n\nconst (\n\tProviderTypeEmail ProviderType = \"email\"\n\tProviderTypeInbox ProviderType = \"inbox\"\n)\n\nfunc (e *ProviderType) Scan(src interface{}) error {\n\tswitch s := src.(type) {\n\tcase []byte:\n\t\t*e = ProviderType(s)\n\tcase string:\n\t\t*e = ProviderType(s)\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported scan type for ProviderType: %T\", src)\n\t}\n\treturn nil\n}\n\ntype NullProviderType struct {\n\tProviderType ProviderType\n\tValid        bool // Valid is true if ProviderType is not NULL\n}\n\n// Scan implements the Scanner interface.\nfunc (ns *NullProviderType) Scan(value interface{}) error {\n\tif value == nil {\n\t\tns.ProviderType, ns.Valid = \"\", false\n\t\treturn nil\n\t}\n\tns.Valid = true\n\treturn ns.ProviderType.Scan(value)\n}\n\n// Value implements the driver Valuer interface.\nfunc (ns NullProviderType) Value() (driver.Value, error) {\n\tif !ns.Valid {\n\t\treturn nil, nil\n\t}\n\treturn string(ns.ProviderType), nil\n}\n\nfunc (e ProviderType) Valid() bool {\n\tswitch e {\n\tcase ProviderTypeEmail,\n\t\tProviderTypeInbox:\n\t\treturn true\n\t}\n\treturn false\n}\n\ntype RecipientType string\n\nconst (\n\tRecipientTypeUser RecipientType = \"user\"\n)\n\nfunc (e *RecipientType) Scan(src interface{}) error {\n\tswitch s := src.(type) {\n\tcase []byte:\n\t\t*e = RecipientType(s)\n\tcase string:\n\t\t*e = RecipientType(s)\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported scan type for RecipientType: %T\", src)\n\t}\n\treturn nil\n}\n\ntype NullRecipientType struct {\n\tRecipientType RecipientType\n\tValid         bool // Valid is true if RecipientType is not NULL\n}\n\n// Scan implements the Scanner interface.\nfunc (ns *NullRecipientType) Scan(value interface{}) error {\n\tif value == nil {\n\t\tns.RecipientType, ns.Valid = \"\", false\n\t\treturn nil\n\t}\n\tns.Valid = true\n\treturn ns.RecipientType.Scan(value)\n}\n\n// Value implements the driver Valuer interface.\nfunc (ns NullRecipientType) Value() (driver.Value, error) {\n\tif !ns.Valid {\n\t\treturn nil, nil\n\t}\n\treturn string(ns.RecipientType), nil\n}\n\nfunc (e RecipientType) Valid() bool {\n\tswitch e {\n\tcase RecipientTypeUser:\n\t\treturn true\n\t}\n\treturn false\n}\n\ntype Delivery struct {\n\tID             string\n\tNotificationID string\n\tProviderID     string\n\tRecipientID    string\n\tStatus         DeliveryStatus\n\tSentAt         pgtype.Timestamp\n\tReadAt         pgtype.Timestamp\n}\n\ntype InboxMessage struct {\n\tNotificationID string\n\tRecipientID    string\n\tProviderID     string\n\tTenantID       string\n\tMessage        string\n\tData           map[string]string\n\tPriority       int32\n\tType           string\n\tCreatedAt      pgtype.Timestamp\n}\n\ntype Notification struct {\n\tID           string\n\tTenantID     string\n\tRecipientIds []string\n\tProviderIds  []string\n\tMessage      string\n\tPriority     int32\n\tData         map[string]string\n\tStatus       NotificationStatus\n\tCreatedAt    pgtype.Timestamp\n\tTypeID       string\n}\n\ntype NotificationType struct {\n\tID       string\n\tName     string\n\tCategory string\n}\n\ntype Provider struct {\n\tID                string\n\tType              ProviderType\n\tName              string\n\tWorkflowName      string\n\tWorkflowTaskQueue string\n}\n\ntype Recipient struct {\n\tID       string\n\tTenantID string\n\tEmail    string\n\tType     RecipientType\n}\n\ntype RecipientPreference struct {\n\tID                 string\n\tRecipientID        string\n\tProviderID         string\n\tNotificationTypeID string\n\tThreshold          int32\n\tEnabled            bool\n\tSchedule           *string\n}\n```\n\n```go platform/apps/belfry/internal/database/notification_types.sql.go\n// Code generated by sqlc. DO NOT EDIT.\n// versions:\n//   sqlc v1.27.0\n// source: notification_types.sql\n\npackage database\n\nimport (\n\t\"context\"\n)\n\nconst createNotificationType = `-- name: CreateNotificationType :one\nINSERT INTO belfry.notification_types (\n  name, category\n) VALUES (\n  $1, $2\n)\nRETURNING id, name, category\n`\n\ntype CreateNotificationTypeParams struct {\n\tName     string\n\tCategory string\n}\n\nfunc (q *Queries) CreateNotificationType(ctx context.Context, arg CreateNotificationTypeParams) (*NotificationType, error) {\n\trow := q.db.QueryRow(ctx, createNotificationType, arg.Name, arg.Category)\n\tvar i NotificationType\n\terr := row.Scan(&i.ID, &i.Name, &i.Category)\n\treturn &i, err\n}\n\nconst getNotificationType = `-- name: GetNotificationType :one\nSELECT id, name, category\nFROM belfry.notification_types\nWHERE id = $1\n`\n\nfunc (q *Queries) GetNotificationType(ctx context.Context, id string) (*NotificationType, error) {\n\trow := q.db.QueryRow(ctx, getNotificationType, id)\n\tvar i NotificationType\n\terr := row.Scan(&i.ID, &i.Name, &i.Category)\n\treturn &i, err\n}\n\nconst getNotificationTypeByNameAndCategory = `-- name: GetNotificationTypeByNameAndCategory :one\nSELECT id, name, category\nFROM belfry.notification_types\nWHERE name = $1\n  AND category = $2\n`\n\ntype GetNotificationTypeByNameAndCategoryParams struct {\n\tName     string\n\tCategory string\n}\n\nfunc (q *Queries) GetNotificationTypeByNameAndCategory(ctx context.Context, arg GetNotificationTypeByNameAndCategoryParams) (*NotificationType, error) {\n\trow := q.db.QueryRow(ctx, getNotificationTypeByNameAndCategory, arg.Name, arg.Category)\n\tvar i NotificationType\n\terr := row.Scan(&i.ID, &i.Name, &i.Category)\n\treturn &i, err\n}\n```\n\n```go platform/apps/belfry/internal/database/notifications.sql.go\n// Code generated by sqlc. DO NOT EDIT.\n// versions:\n//   sqlc v1.27.0\n// source: notifications.sql\n\npackage database\n\nimport (\n\t\"context\"\n\n\t\"github.com/jackc/pgx/v5/pgtype\"\n)\n\nconst createNotification = `-- name: CreateNotification :one\nINSERT INTO belfry.notifications (\n  tenant_id,\n  recipient_ids,\n  provider_ids,\n  message,\n  priority,\n  type_id,\n  data\n) VALUES (\n  $1, $2, $3, $4, $5, $6, $7\n)\nRETURNING id, tenant_id, recipient_ids, provider_ids, message, priority, data, status, created_at, type_id\n`\n\ntype CreateNotificationParams struct {\n\tTenantID     string\n\tRecipientIds []string\n\tProviderIds  []string\n\tMessage      string\n\tPriority     int32\n\tTypeID       string\n\tData         map[string]string\n}\n\nfunc (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (*Notification, error) {\n\trow := q.db.QueryRow(ctx, createNotification,\n\t\targ.TenantID,\n\t\targ.RecipientIds,\n\t\targ.ProviderIds,\n\t\targ.Message,\n\t\targ.Priority,\n\t\targ.TypeID,\n\t\targ.Data,\n\t)\n\tvar i Notification\n\terr := row.Scan(\n\t\t&i.ID,\n\t\t&i.TenantID,\n\t\t&i.RecipientIds,\n\t\t&i.ProviderIds,\n\t\t&i.Message,\n\t\t&i.Priority,\n\t\t&i.Data,\n\t\t&i.Status,\n\t\t&i.CreatedAt,\n\t\t&i.TypeID,\n\t)\n\treturn &i, err\n}\n\nconst getNotification = `-- name: GetNotification :one\nSELECT\nn.id, n.tenant_id, n.recipient_ids, n.provider_ids, n.message, n.priority, n.data, n.status, n.created_at, n.type_id,\nCONCAT(t.name, ':', t.category)::TEXT AS type\nFROM belfry.notifications AS n\nINNER JOIN belfry.notification_types AS t\n  ON n.type_id = t.id\nWHERE n.id = $1\n`\n\ntype GetNotificationRow struct {\n\tID           string\n\tTenantID     string\n\tRecipientIds []string\n\tProviderIds  []string\n\tMessage      string\n\tPriority     int32\n\tData         map[string]string\n\tStatus       NotificationStatus\n\tCreatedAt    pgtype.Timestamp\n\tTypeID       string\n\tType         string\n}\n\nfunc (q *Queries) GetNotification(ctx context.Context, id string) (*GetNotificationRow, error) {\n\trow := q.db.QueryRow(ctx, getNotification, id)\n\tvar i GetNotificationRow\n\terr := row.Scan(\n\t\t&i.ID,\n\t\t&i.TenantID,\n\t\t&i.RecipientIds,\n\t\t&i.ProviderIds,\n\t\t&i.Message,\n\t\t&i.Priority,\n\t\t&i.Data,\n\t\t&i.Status,\n\t\t&i.CreatedAt,\n\t\t&i.TypeID,\n\t\t&i.Type,\n\t)\n\treturn &i, err\n}\n\nconst getNotificationsByStatus = `-- name: GetNotificationsByStatus :many\nSELECT\nn.id, n.tenant_id, n.recipient_ids, n.provider_ids, n.message, n.priority, n.data, n.status, n.created_at, n.type_id,\nCONCAT(t.name, ':', t.category)::TEXT AS type\nFROM belfry.notifications AS n\nINNER JOIN belfry.notification_types AS t\n  ON n.type_id = t.id\nWHERE status = $1\n`\n\ntype GetNotificationsByStatusRow struct {\n\tID           string\n\tTenantID     string\n\tRecipientIds []string\n\tProviderIds  []string\n\tMessage      string\n\tPriority     int32\n\tData         map[string]string\n\tStatus       NotificationStatus\n\tCreatedAt    pgtype.Timestamp\n\tTypeID       string\n\tType         string\n}\n\nfunc (q *Queries) GetNotificationsByStatus(ctx context.Context, status NotificationStatus) ([]*GetNotificationsByStatusRow, error) {\n\trows, err := q.db.Query(ctx, getNotificationsByStatus, status)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\tvar items []*GetNotificationsByStatusRow\n\tfor rows.Next() {\n\t\tvar i GetNotificationsByStatusRow\n\t\tif err := rows.Scan(\n\t\t\t&i.ID,\n\t\t\t&i.TenantID,\n\t\t\t&i.RecipientIds,\n\t\t\t&i.ProviderIds,\n\t\t\t&i.Message,\n\t\t\t&i.Priority,\n\t\t\t&i.Data,\n\t\t\t&i.Status,\n\t\t\t&i.CreatedAt,\n\t\t\t&i.TypeID,\n\t\t\t&i.Type,\n\t\t); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\titems = append(items, &i)\n\t}\n\tif err := rows.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn items, nil\n}\n\nconst updateNotificationStatus = `-- name: UpdateNotificationStatus :exec\nUPDATE belfry.notifications SET\n  status = $2\nWHERE id = $1\n`\n\ntype UpdateNotificationStatusParams struct {\n\tID     string\n\tStatus NotificationStatus\n}\n\nfunc (q *Queries) UpdateNotificationStatus(ctx context.Context, arg UpdateNotificationStatusParams) error {\n\t_, err := q.db.Exec(ctx, updateNotificationStatus, arg.ID, arg.Status)\n\treturn err\n}\n```\n\n```go platform/apps/belfry/internal/database/providers.sql.go\n// Code generated by sqlc. DO NOT EDIT.\n// versions:\n//   sqlc v1.27.0\n// source: providers.sql\n\npackage database\n\nimport (\n\t\"context\"\n)\n\nconst createProvider = `-- name: CreateProvider :one\nINSERT INTO belfry.providers (\n  type, name, workflow_name, workflow_task_queue\n) VALUES (\n  $1, $2, $3, $4\n)\nRETURNING id, type, name, workflow_name, workflow_task_queue\n`\n\ntype CreateProviderParams struct {\n\tType              ProviderType\n\tName              string\n\tWorkflowName      string\n\tWorkflowTaskQueue string\n}\n\nfunc (q *Queries) CreateProvider(ctx context.Context, arg CreateProviderParams) (*Provider, error) {\n\trow := q.db.QueryRow(ctx, createProvider,\n\t\targ.Type,\n\t\targ.Name,\n\t\targ.WorkflowName,\n\t\targ.WorkflowTaskQueue,\n\t)\n\tvar i Provider\n\terr := row.Scan(\n\t\t&i.ID,\n\t\t&i.Type,\n\t\t&i.Name,\n\t\t&i.WorkflowName,\n\t\t&i.WorkflowTaskQueue,\n\t)\n\treturn &i, err\n}\n\nconst deleteProvider = `-- name: DeleteProvider :exec\nDELETE FROM belfry.providers\nWHERE id = $1\n`\n\nfunc (q *Queries) DeleteProvider(ctx context.Context, id string) error {\n\t_, err := q.db.Exec(ctx, deleteProvider, id)\n\treturn err\n}\n\nconst getProvider = `-- name: GetProvider :one\nSELECT id, type, name, workflow_name, workflow_task_queue\nFROM belfry.providers\nWHERE id = $1\n`\n\nfunc (q *Queries) GetProvider(ctx context.Context, id string) (*Provider, error) {\n\trow := q.db.QueryRow(ctx, getProvider, id)\n\tvar i Provider\n\terr := row.Scan(\n\t\t&i.ID,\n\t\t&i.Type,\n\t\t&i.Name,\n\t\t&i.WorkflowName,\n\t\t&i.WorkflowTaskQueue,\n\t)\n\treturn &i, err\n}\n\nconst getProvidersByNameAndType = `-- name: GetProvidersByNameAndType :one\nSELECT id, type, name, workflow_name, workflow_task_queue\nFROM belfry.providers\nWHERE type = $1\n  AND name = $2\n`\n\ntype GetProvidersByNameAndTypeParams struct {\n\tType ProviderType\n\tName string\n}\n\nfunc (q *Queries) GetProvidersByNameAndType(ctx context.Context, arg GetProvidersByNameAndTypeParams) (*Provider, error) {\n\trow := q.db.QueryRow(ctx, getProvidersByNameAndType, arg.Type, arg.Name)\n\tvar i Provider\n\terr := row.Scan(\n\t\t&i.ID,\n\t\t&i.Type,\n\t\t&i.Name,\n\t\t&i.WorkflowName,\n\t\t&i.WorkflowTaskQueue,\n\t)\n\treturn &i, err\n}\n\nconst updateProvider = `-- name: UpdateProvider :one\nUPDATE belfry.providers SET\n  workflow_name = COALESCE($2, workflow_name),\n  workflow_task_queue = COALESCE($3, workflow_task_queue)\nWHERE ID = $1\nRETURNING id, type, name, workflow_name, workflow_task_queue\n`\n\ntype UpdateProviderParams struct {\n\tID                string\n\tWorkflowName      *string\n\tWorkflowTaskQueue *string\n}\n\nfunc (q *Queries) UpdateProvider(ctx context.Context, arg UpdateProviderParams) (*Provider, error) {\n\trow := q.db.QueryRow(ctx, updateProvider, arg.ID, arg.WorkflowName, arg.WorkflowTaskQueue)\n\tvar i Provider\n\terr := row.Scan(\n\t\t&i.ID,\n\t\t&i.Type,\n\t\t&i.Name,\n\t\t&i.WorkflowName,\n\t\t&i.WorkflowTaskQueue,\n\t)\n\treturn &i, err\n}\n```\n\n```go platform/apps/belfry/internal/database/providers_test.go\npackage database\n\nimport (\n\t\"context\"\n)\n\nfunc (s *DatabaseTestSuite) Test_CreateProvider() {\n\tctx := context.Background()\n\tdb := New(s.tx)\n\n\tp, err := db.CreateProvider(ctx, CreateProviderParams{\n\t\tType:              ProviderTypeInbox,\n\t\tName:              \"foo\",\n\t\tWorkflowTaskQueue: \"bar\",\n\t\tWorkflowName:      \"foo\",\n\t})\n\ts.NoError(err)\n\ts.Equal(\"foo\", p.Name)\n\ts.Equal(ProviderType(\"inbox\"), p.Type)\n\ts.Equal(\"bar\", p.WorkflowTaskQueue)\n\ts.Equal(\"foo\", p.WorkflowName)\n}\n\nfunc (s *DatabaseTestSuite) Test_CreateProvider_uniqueViolation() {\n\tctx := context.Background()\n\tdb := New(s.tx)\n\n\t_, err := db.CreateProvider(ctx, CreateProviderParams{\n\t\tType:              ProviderTypeInbox,\n\t\tName:              \"foo\",\n\t\tWorkflowTaskQueue: \"bar\",\n\t\tWorkflowName:      \"foo\",\n\t})\n\ts.NoError(err)\n\n\tp, err := db.CreateProvider(ctx, CreateProviderParams{\n\t\tType:              ProviderTypeInbox,\n\t\tName:              \"foo\",\n\t\tWorkflowTaskQueue: \"bar\",\n\t\tWorkflowName:      \"foo\",\n\t})\n\ts.Errorf(err, \"ERROR: duplicate key value violates unique constraint \\\"providers_name_type_key\\\" (SQLSTATE 23505)\")\n\ts.Equal(&Provider{}, p)\n}\n\nfunc (s *DatabaseTestSuite) Test_GetProvider() {\n\tctx := context.Background()\n\tdb := New(s.tx)\n\n\tp, err := db.CreateProvider(ctx, CreateProviderParams{\n\t\tType:              ProviderTypeInbox,\n\t\tName:              \"foo\",\n\t\tWorkflowTaskQueue: \"bar\",\n\t\tWorkflowName:      \"foo\",\n\t})\n\ts.NoError(err)\n\n\tgot, err := db.GetProvider(ctx, p.ID)\n\ts.NoError(err)\n\ts.Equal(p, got)\n}\n\nfunc (s *DatabaseTestSuite) Test_GetProvidersByNameAndType() {\n\tctx := context.Background()\n\tdb := New(s.tx)\n\n\tp, err := db.CreateProvider(ctx, CreateProviderParams{\n\t\tType:              ProviderTypeInbox,\n\t\tName:              \"foo\",\n\t\tWorkflowTaskQueue: \"bar\",\n\t\tWorkflowName:      \"foo\",\n\t})\n\ts.NoError(err)\n\n\tgot, err := db.GetProvidersByNameAndType(ctx, GetProvidersByNameAndTypeParams{\n\t\tType: ProviderTypeInbox,\n\t\tName: \"foo\",\n\t})\n\ts.NoError(err)\n\ts.Equal(p, got)\n}\n\nfunc ptr[T any](v T) *T { return &v }\n\nfunc (s *DatabaseTestSuite) Test_UpdateProvider() {\n\tctx := context.Background()\n\tdb := New(s.tx)\n\n\tp, err := db.CreateProvider(ctx, CreateProviderParams{\n\t\tType:              ProviderTypeInbox,\n\t\tName:              \"foo\",\n\t\tWorkflowTaskQueue: \"bar\",\n\t\tWorkflowName:      \"foo\",\n\t})\n\ts.NoError(err)\n\n\tgot, err := db.UpdateProvider(ctx, UpdateProviderParams{\n\t\tID:                p.ID,\n\t\tWorkflowTaskQueue: ptr(\"baz\"),\n\t\tWorkflowName:      ptr(\"bar\"),\n\t})\n\ts.NoError(err)\n\n\ts.Equal(&Provider{\n\t\tID:                p.ID,\n\t\tType:              ProviderTypeInbox,\n\t\tName:              \"foo\",\n\t\tWorkflowTaskQueue: \"baz\",\n\t\tWorkflowName:      \"bar\",\n\t}, got)\n}\n\nfunc (s *DatabaseTestSuite) Test_UpdateProvider_enabledOnly() {\n\tctx := context.Background()\n\tdb := New(s.tx)\n\n\tp, err := db.CreateProvider(ctx, CreateProviderParams{\n\t\tType:              ProviderTypeInbox,\n\t\tName:              \"foo\",\n\t\tWorkflowTaskQueue: \"bar\",\n\t\tWorkflowName:      \"foo\",\n\t})\n\ts.NoError(err)\n\n\tgot, err := db.UpdateProvider(ctx, UpdateProviderParams{\n\t\tID:                p.ID,\n\t\tWorkflowTaskQueue: ptr(\"foo\"),\n\t})\n\ts.NoError(err)\n\n\ts.Equal(&Provider{\n\t\tID:                p.ID,\n\t\tName:              \"foo\",\n\t\tWorkflowTaskQueue: \"foo\",\n\t\tType:              ProviderTypeInbox,\n\t\tWorkflowName:      \"foo\",\n\t}, got)\n}\n\nfunc (s *DatabaseTestSuite) Test_UpdateProvider_workflowNameOnly() {\n\tctx := context.Background()\n\tdb := New(s.tx)\n\n\tp, err := db.CreateProvider(ctx, CreateProviderParams{\n\t\tType:              ProviderTypeInbox,\n\t\tName:              \"foo\",\n\t\tWorkflowTaskQueue: \"bar\",\n\t\tWorkflowName:      \"foo\",\n\t})\n\ts.NoError(err)\n\n\tgot, err := db.UpdateProvider(ctx, UpdateProviderParams{\n\t\tID:           p.ID,\n\t\tWorkflowName: ptr(\"bar\"),\n\t})\n\ts.NoError(err)\n\n\ts.Equal(&Provider{\n\t\tID:                p.ID,\n\t\tName:              \"foo\",\n\t\tWorkflowTaskQueue: \"bar\",\n\t\tType:              ProviderTypeInbox,\n\t\tWorkflowName:      \"bar\",\n\t}, got)\n}\n\nfunc (s *DatabaseTestSuite) Test_DeleteProvider() {\n\tctx := context.Background()\n\tdb := New(s.tx)\n\n\tp, err := db.CreateProvider(ctx, CreateProviderParams{\n\t\tType:              ProviderTypeInbox,\n\t\tName:              \"foo\",\n\t\tWorkflowTaskQueue: \"bar\",\n\t\tWorkflowName:      \"foo\",\n\t})\n\ts.NoError(err)\n\n\ts.NoError(db.DeleteProvider(ctx, p.ID))\n}\n```\n\nquerier\nmocks\n```go platform/apps/belfry/internal/database/querier/mocks/mock_notificationquerier.go\n// Code generated by mockery. DO NOT EDIT.\n\npackage mocks\n\nimport (\n\tcontext \"context\"\n\n\tdatabase \"github.com/immuta/platform/apps/belfry/internal/database\"\n\tmock \"github.com/stretchr/testify/mock\"\n\n\tnotificationv1 \"github.com/immuta/platform/apps/belfry/internal/service/notification/v1\"\n)\n\n// MockNotificationQuerier is an autogenerated mock type for the NotificationQuerier type\ntype MockNotificationQuerier struct {\n\tmock.Mock\n}\n\ntype MockNotificationQuerier_Expecter struct {\n\tmock *mock.Mock\n}\n\nfunc (_m *MockNotificationQuerier) EXPECT() *MockNotificationQuerier_Expecter {\n\treturn &MockNotificationQuerier_Expecter{mock: &_m.Mock}\n}\n\n// LookupType provides a mock function with given fields: _a0, _a1\nfunc (_m *MockNotificationQuerier) LookupType(_a0 context.Context, _a1 *notificationv1.NotificationTypeIdentity) (*database.NotificationType, error) {\n\tret := _m.Called(_a0, _a1)\n\n\tif len(ret) == 0 {\n\t\tpanic(\"no return value specified for LookupType\")\n\t}\n\n\tvar r0 *database.NotificationType\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, *notificationv1.NotificationTypeIdentity) (*database.NotificationType, error)); ok {\n\t\treturn rf(_a0, _a1)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, *notificationv1.NotificationTypeIdentity) *database.NotificationType); ok {\n\t\tr0 = rf(_a0, _a1)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*database.NotificationType)\n\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, *notificationv1.NotificationTypeIdentity) error); ok {\n\t\tr1 = rf(_a0, _a1)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}\n\n// MockNotificationQuerier_LookupType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupType'\ntype MockNotificationQuerier_LookupType_Call struct {\n\t*mock.Call\n}\n\n// LookupType is a helper method to define mock.On call\n//   - _a0 context.Context\n//   - _a1 *notificationv1.NotificationTypeIdentity\nfunc (_e *MockNotificationQuerier_Expecter) LookupType(_a0 interface{}, _a1 interface{}) *MockNotificationQuerier_LookupType_Call {\n\treturn &MockNotificationQuerier_LookupType_Call{Call: _e.mock.On(\"LookupType\", _a0, _a1)}\n}\n\nfunc (_c *MockNotificationQuerier_LookupType_Call) Run(run func(_a0 context.Context, _a1 *notificationv1.NotificationTypeIdentity)) *MockNotificationQuerier_LookupType_Call {\n\t_c.Call.Run(func(args mock.Arguments) {\n\t\trun(args[0].(context.Context), args[1].(*notificationv1.NotificationTypeIdentity))\n\t})\n\treturn _c\n}\n\nfunc (_c *MockNotificationQuerier_LookupType_Call) Return(_a0 *database.NotificationType, _a1 error) *MockNotificationQuerier_LookupType_Call {\n\t_c.Call.Return(_a0, _a1)\n\treturn _c\n}\n\nfunc (_c *MockNotificationQuerier_LookupType_Call) RunAndReturn(run func(context.Context, *notificationv1.NotificationTypeIdentity) (*database.NotificationType, error)) *MockNotificationQuerier_LookupType_Call {\n\t_c.Call.Return(run)\n\treturn _c\n}\n\n// NewMockNotificationQuerier creates a new instance of MockNotificationQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.\n// The first argument is typically a *testing.T value.\nfunc NewMockNotificationQuerier(t interface {\n\tmock.TestingT\n\tCleanup(func())\n}) *MockNotificationQuerier {\n\tmock := &MockNotificationQuerier{}\n\tmock.Mock.Test(t)\n\n\tt.Cleanup(func() { mock.AssertExpectations(t) })\n\n\treturn mock\n}\n```\n\n```go platform/apps/belfry/internal/database/querier/mocks/mock_providerquerier.go\n// Code generated by mockery. DO NOT EDIT.\n\npackage mocks\n\nimport (\n\tcontext \"context\"\n\n\tdatabase \"github.com/immuta/platform/apps/belfry/internal/database\"\n\tmock \"github.com/stretchr/testify/mock\"\n\n\tproviderv1 \"github.com/immuta/platform/apps/belfry/internal/service/provider/v1\"\n)\n\n// MockProviderQuerier is an autogenerated mock type for the ProviderQuerier type\ntype MockProviderQuerier struct {\n\tmock.Mock\n}\n\ntype MockProviderQuerier_Expecter struct {\n\tmock *mock.Mock\n}\n\nfunc (_m *MockProviderQuerier) EXPECT() *MockProviderQuerier_Expecter {\n\treturn &MockProviderQuerier_Expecter{mock: &_m.Mock}\n}\n\n// LookupProvider provides a mock function with given fields: _a0, _a1\nfunc (_m *MockProviderQuerier) LookupProvider(_a0 context.Context, _a1 *providerv1.LookupIdentity) (*database.Provider, error) {\n\tret := _m.Called(_a0, _a1)\n\n\tif len(ret) == 0 {\n\t\tpanic(\"no return value specified for LookupProvider\")\n\t}\n\n\tvar r0 *database.Provider\n\tvar r1 error\n\tif rf, ok := ret.Get(0).(func(context.Context, *providerv1.LookupIdentity) (*database.Provider, error)); ok {\n\t\treturn rf(_a0, _a1)\n\t}\n\tif rf, ok := ret.Get(0).(func(context.Context, *providerv1.LookupIdentity) *database.Provider); ok {\n\t\tr0 = rf(_a0, _a1)\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(*database.Provider)\n\t\t}\n\t}\n\n\tif rf, ok := ret.Get(1).(func(context.Context, *providerv1.LookupIdentity) error); ok {\n\t\tr1 = rf(_a0, _a1)\n\t} else {\n\t\tr1 = ret.Error(1)\n\t}\n\n\treturn r0, r1\n}\n\n// MockProviderQuerier_LookupProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupProvider'\ntype MockProviderQuerier_LookupProvider_Call struct {\n\t*mock.Call\n}\n\n// LookupProvider is a helper method to define mock.On call\n//   - _a0 context.Context\n//   - _a1 *providerv1.LookupIdentity\nfunc (_e *MockProviderQuerier_Expecter) LookupProvider(_a0 interface{}, _a1 interface{}) *MockProviderQuerier_LookupProvider_Call {\n\treturn &MockProviderQuerier_LookupProvider_Call{Call: _e.mock.On(\"LookupProvider\", _a0, _a1)}\n}\n\nfunc (_c *MockProviderQuerier_LookupProvider_Call) Run(run func(_a0 context.Context, _a1 *providerv1.LookupIdentity)) *MockProviderQuerier_LookupProvider_Call {\n\t_c.Call.Run(func(args mock.Arguments) {\n\t\trun(args[0].(context.Context), args[1].(*providerv1.LookupIdentity))\n\t})\n\treturn _c\n}\n\nfunc (_c *MockProviderQuerier_LookupProvider_Call) Return(_a0 *database.Provider, _a1 error) *MockProviderQuerier_LookupProvider_Call {\n\t_c.Call.Return(_a0, _a1)\n\treturn _c\n}\n\nfunc (_c *MockProviderQuerier_LookupProvider_Call) RunAndReturn(run func(context.Context, *providerv1.LookupIdentity) (*database.Provider, error)) *MockProviderQuerier_LookupProvider_Call {\n\t_c.Call.Return(run)\n\treturn _c\n}\n\n// NewMockProviderQuerier creates a new instance of MockProviderQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.\n// The first argument is typically a *testing.T value.\nfunc NewMockProviderQuerier(t interface {\n\tmock.TestingT\n\tCleanup(func())\n}) *MockProviderQuerier {\n\tmock := &MockProviderQuerier{}\n\tmock.Mock.Test(t)\n\n\tt.Cleanup(func() { mock.AssertExpectations(t) })\n\n\treturn mock\n}\n```\n\n\n```go platform/apps/belfry/internal/database/querier/notification_querier.go\npackage querier\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strings\"\n\n\t\"github.com/immuta/platform/apps/belfry/internal/database\"\n\tnotificationv1 \"github.com/immuta/platform/apps/belfry/internal/service/notification/v1\"\n)\n\ntype NotificationQuerier interface {\n\tLookupType(context.Context, *notificationv1.NotificationTypeIdentity) (*database.NotificationType, error)\n}\n\ntype notificationQuerier struct {\n\tdatabase.Querier\n}\n\nfunc NewNotificationQuerier(db database.Querier) NotificationQuerier {\n\treturn &notificationQuerier{db}\n}\n\nfunc (n *notificationQuerier) LookupType(\n\tctx context.Context, id *notificationv1.NotificationTypeIdentity) (*database.NotificationType, error) {\n\tswitch id.GetIdentifier().(type) {\n\tcase *notificationv1.NotificationTypeIdentity_Id:\n\t\treturn n.GetNotificationType(ctx, id.GetId())\n\tcase *notificationv1.NotificationTypeIdentity_Name:\n\t\tparts := strings.SplitN(id.GetName(), \":\", 2)\n\t\tif len(parts) < 2 {\n\t\t\treturn nil, fmt.Errorf(\"must supply notification type name and category in the format <name>:<category> (got %s)\", id.GetName())\n\t\t}\n\n\t\treturn n.GetNotificationTypeByNameAndCategory(ctx, database.GetNotificationTypeByNameAndCategoryParams{\n\t\t\tName:     parts[0],\n\t\t\tCategory: parts[1],\n\t\t})\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"invalid notification type identity\")\n\t}\n}\n```\n\n```go platform/apps/belfry/internal/database/querier/notification_querier_test.go\npackage querier\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/google/uuid\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/mock\"\n\t\"github.com/stretchr/testify/suite\"\n\n\t\"github.com/immuta/platform/apps/belfry/internal/database\"\n\t\"github.com/immuta/platform/apps/belfry/internal/database/mocks\"\n\tnotificationv1 \"github.com/immuta/platform/apps/belfry/internal/service/notification/v1\"\n)\n\ntype NotificationQuerierTestSuite struct {\n\tsuite.Suite\n}\n\nfunc (s *NotificationQuerierTestSuite) TestLookupNotificationType() {\n\ttests := []struct {\n\t\tname      string\n\t\tidentity  *notificationv1.NotificationTypeIdentity\n\t\tmocks     func(*mocks.MockQuerier, *notificationv1.NotificationTypeIdentity)\n\t\texpect    func(*testing.T, *database.NotificationType, *notificationv1.NotificationTypeIdentity)\n\t\texpectErr assert.ErrorAssertionFunc\n\t}{\n\t\t{\n\t\t\tname: \"by id\",\n\t\t\tidentity: &notificationv1.NotificationTypeIdentity{\n\t\t\t\tIdentifier: &notificationv1.NotificationTypeIdentity_Id{Id: uuid.NewString()},\n\t\t\t},\n\t\t\tmocks: func(q *mocks.MockQuerier, id *notificationv1.NotificationTypeIdentity) {\n\t\t\t\tq.EXPECT().GetNotificationType(mock.Anything, id.GetId()).Return(&database.NotificationType{ID: id.GetId()}, nil)\n\t\t\t},\n\t\t\texpect: func(t *testing.T, p *database.NotificationType, id *notificationv1.NotificationTypeIdentity) {\n\t\t\t\tassert.Equal(t, id.GetId(), p.ID)\n\t\t\t},\n\t\t\texpectErr: assert.NoError,\n\t\t},\n\t\t{\n\t\t\tname: \"by name and category\",\n\t\t\tidentity: &notificationv1.NotificationTypeIdentity{\n\t\t\t\tIdentifier: &notificationv1.NotificationTypeIdentity_Name{Name: \"foo:bar\"},\n\t\t\t},\n\t\t\tmocks: func(q *mocks.MockQuerier, _ *notificationv1.NotificationTypeIdentity) {\n\t\t\t\tq.EXPECT().GetNotificationTypeByNameAndCategory(mock.Anything, database.GetNotificationTypeByNameAndCategoryParams{\n\t\t\t\t\tName:     \"foo\",\n\t\t\t\t\tCategory: \"bar\",\n\t\t\t\t}).Return(&database.NotificationType{\n\t\t\t\t\tID:       uuid.NewString(),\n\t\t\t\t\tName:     \"foo\",\n\t\t\t\t\tCategory: \"bar\",\n\t\t\t\t}, nil)\n\t\t\t},\n\t\t\texpect: func(t *testing.T, p *database.NotificationType, _ *notificationv1.NotificationTypeIdentity) {\n\t\t\t\tassert.Equal(t, p.Name, \"foo\")\n\t\t\t\tassert.Equal(t, p.Category, \"bar\")\n\t\t\t\tassert.NotEmpty(t, p.ID)\n\t\t\t},\n\t\t\texpectErr: assert.NoError,\n\t\t},\n\t\t{\n\t\t\tname: \"only name\",\n\t\t\tidentity: &notificationv1.NotificationTypeIdentity{\n\t\t\t\tIdentifier: &notificationv1.NotificationTypeIdentity_Name{Name: \"foo\"},\n\t\t\t},\n\t\t\texpect: func(t *testing.T, p *database.NotificationType, _ *notificationv1.NotificationTypeIdentity) {\n\t\t\t\tassert.Nil(t, p)\n\t\t\t},\n\t\t\texpectErr: func(tt assert.TestingT, err error, i ...any) bool {\n\t\t\t\treturn assert.Errorf(tt, err, \"must supply notification name and category in the format <name>:<category> (got foo)\", i...)\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\ts.Run(tt.name, func() {\n\t\t\tquerier := mocks.NewMockQuerier(s.T())\n\t\t\tif tt.mocks != nil {\n\t\t\t\ttt.mocks(querier, tt.identity)\n\t\t\t}\n\n\t\t\tn := NewNotificationQuerier(querier)\n\n\t\t\tgot, err := n.LookupType(context.Background(), tt.identity)\n\t\t\ttt.expectErr(s.T(), err)\n\t\t\ttt.expect(s.T(), got, tt.identity)\n\t\t})\n\t}\n}\n\nfunc TestNotificationTestSuite(t *testing.T) {\n\tsuite.Run(t, new(NotificationQuerierTestSuite))\n}\n```\n\n```go platform/apps/belfry/internal/database/querier/provider_querier.go\npackage querier\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strings\"\n\n\t\"github.com/immuta/platform/apps/belfry/internal/database\"\n\tproviderv1 \"github.com/immuta/platform/apps/belfry/internal/service/provider/v1\"\n)\n\ntype ProviderQuerier interface {\n\tLookupProvider(context.Context, *providerv1.LookupIdentity) (*database.Provider, error)\n}\n\ntype providerQuerier struct {\n\tdatabase.Querier\n}\n\nfunc NewProviderQuerier(db database.Querier) ProviderQuerier {\n\treturn &providerQuerier{db}\n}\n\nfunc (q *providerQuerier) LookupProvider(ctx context.Context, id *providerv1.LookupIdentity) (*database.Provider, error) {\n\tswitch id.GetIdentifier().(type) {\n\tcase *providerv1.LookupIdentity_Id:\n\t\treturn q.GetProvider(ctx, id.GetId())\n\n\tcase *providerv1.LookupIdentity_Name:\n\t\tparts := strings.SplitN(id.GetName(), \":\", 2)\n\t\tif len(parts) < 2 {\n\t\t\treturn nil, fmt.Errorf(\"must supply provider name and type in the format <type>:<name> (got %s)\", id.GetName())\n\t\t}\n\n\t\tt := database.ProviderType(parts[0])\n\t\tif !t.Valid() {\n\t\t\treturn nil, fmt.Errorf(\"provider type %s is invalid\", parts[0])\n\t\t}\n\n\t\treturn q.GetProvidersByNameAndType(ctx, database.GetProvidersByNameAndTypeParams{Type: t, Name: parts[1]})\n\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"invalid provider lookup type\")\n\t}\n}\n```\n\n```go platform/apps/belfry/internal/database/querier/provider_querier_test.go\npackage querier\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/google/uuid\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/mock\"\n\t\"github.com/stretchr/testify/suite\"\n\n\t\"github.com/immuta/platform/apps/belfry/internal/database\"\n\t\"github.com/immuta/platform/apps/belfry/internal/database/mocks\"\n\tproviderv1 \"github.com/immuta/platform/apps/belfry/internal/service/provider/v1\"\n)\n\ntype ProviderQuerierTestSuite struct {\n\tsuite.Suite\n}\n\nfunc (s *ProviderQuerierTestSuite) TestLookupProvider() {\n\ttests := []struct {\n\t\tname      string\n\t\tidentity  *providerv1.LookupIdentity\n\t\tmocks     func(*mocks.MockQuerier, *providerv1.LookupIdentity)\n\t\texpect    func(*testing.T, *database.Provider, *providerv1.LookupIdentity)\n\t\texpectErr assert.ErrorAssertionFunc\n\t}{\n\t\t{\n\t\t\tname: \"by id\",\n\t\t\tidentity: &providerv1.LookupIdentity{\n\t\t\t\tIdentifier: &providerv1.LookupIdentity_Id{Id: uuid.NewString()},\n\t\t\t},\n\t\t\tmocks: func(q *mocks.MockQuerier, id *providerv1.LookupIdentity) {\n\t\t\t\tq.EXPECT().GetProvider(mock.Anything, id.GetId()).Return(&database.Provider{ID: id.GetId()}, nil)\n\t\t\t},\n\t\t\texpect: func(t *testing.T, p *database.Provider, id *providerv1.LookupIdentity) {\n\t\t\t\tassert.Equal(t, id.GetId(), p.ID)\n\t\t\t},\n\t\t\texpectErr: assert.NoError,\n\t\t},\n\t\t{\n\t\t\tname: \"by name and type\",\n\t\t\tidentity: &providerv1.LookupIdentity{\n\t\t\t\tIdentifier: &providerv1.LookupIdentity_Name{Name: \"inbox:foo\"},\n\t\t\t},\n\t\t\tmocks: func(q *mocks.MockQuerier, _ *providerv1.LookupIdentity) {\n\t\t\t\tq.EXPECT().GetProvidersByNameAndType(mock.Anything, database.GetProvidersByNameAndTypeParams{\n\t\t\t\t\tType: database.ProviderTypeInbox,\n\t\t\t\t\tName: \"foo\",\n\t\t\t\t}).Return(&database.Provider{\n\t\t\t\t\tID:   uuid.NewString(),\n\t\t\t\t\tType: database.ProviderTypeInbox,\n\t\t\t\t\tName: \"foo\",\n\t\t\t\t}, nil)\n\t\t\t},\n\t\t\texpect: func(t *testing.T, p *database.Provider, _ *providerv1.LookupIdentity) {\n\t\t\t\tassert.Equal(t, p.Name, \"foo\")\n\t\t\t\tassert.Equal(t, p.Type, database.ProviderTypeInbox)\n\t\t\t\tassert.NotEmpty(t, p.ID)\n\t\t\t},\n\t\t\texpectErr: assert.NoError,\n\t\t},\n\t\t{\n\t\t\tname: \"invalid type\",\n\t\t\tidentity: &providerv1.LookupIdentity{\n\t\t\t\tIdentifier: &providerv1.LookupIdentity_Name{Name: \"foo:bar\"},\n\t\t\t},\n\t\t\texpect: func(t *testing.T, p *database.Provider, _ *providerv1.LookupIdentity) {\n\t\t\t\tassert.Nil(t, p)\n\t\t\t},\n\t\t\texpectErr: func(tt assert.TestingT, err error, i ...any) bool {\n\t\t\t\treturn assert.Errorf(tt, err, \"provider type foo is invalid\", i...)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"only type\",\n\t\t\tidentity: &providerv1.LookupIdentity{\n\t\t\t\tIdentifier: &providerv1.LookupIdentity_Name{Name: \"inbox\"},\n\t\t\t},\n\t\t\texpect: func(t *testing.T, p *database.Provider, _ *providerv1.LookupIdentity) {\n\t\t\t\tassert.Nil(t, p)\n\t\t\t},\n\t\t\texpectErr: func(tt assert.TestingT, err error, i ...any) bool {\n\t\t\t\treturn assert.Errorf(tt, err, \"must supply provider name and type in the format <type>:<name> (got inbox)\", i...)\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\ts.Run(tt.name, func() {\n\t\t\tquerier := mocks.NewMockQuerier(s.T())\n\t\t\tif tt.mocks != nil {\n\t\t\t\ttt.mocks(querier, tt.identity)\n\t\t\t}\n\n\t\t\tp := NewProviderQuerier(querier)\n\n\t\t\tgot, err := p.LookupProvider(context.Background(), tt.identity)\n\t\t\ttt.expectErr(s.T(), err)\n\t\t\ttt.expect(s.T(), got, tt.identity)\n\t\t})\n\t}\n}\n\nfunc TestProviderQuerierTestSuite(t *testing.T) {\n\tsuite.Run(t, new(ProviderQuerierTestSuite))\n}\n```\n\n\n```go platform/apps/belfry/internal/database/querier.go\n// Code generated by sqlc. DO NOT EDIT.\n// versions:\n//   sqlc v1.27.0\n\npackage database\n\nimport (\n\t\"context\"\n)\n\ntype Querier interface {\n\tCreateDeliveriesForNotification(ctx context.Context, id string) ([]*Delivery, error)\n\tCreateDelivery(ctx context.Context, arg CreateDeliveryParams) (*Delivery, error)\n\tCreateNotification(ctx context.Context, arg CreateNotificationParams) (*Notification, error)\n\tCreateNotificationType(ctx context.Context, arg CreateNotificationTypeParams) (*NotificationType, error)\n\tCreateProvider(ctx context.Context, arg CreateProviderParams) (*Provider, error)\n\tDeleteProvider(ctx context.Context, id string) error\n\tGetDeliveriesByNotification(ctx context.Context, notificationID string) ([]*Delivery, error)\n\tGetDelivery(ctx context.Context, id string) (*Delivery, error)\n\tGetInboxMessages(ctx context.Context, arg GetInboxMessagesParams) ([]*InboxMessage, error)\n\tGetNotification(ctx context.Context, id string) (*GetNotificationRow, error)\n\tGetNotificationType(ctx context.Context, id string) (*NotificationType, error)\n\tGetNotificationTypeByNameAndCategory(ctx context.Context, arg GetNotificationTypeByNameAndCategoryParams) (*NotificationType, error)\n\tGetNotificationsByStatus(ctx context.Context, status NotificationStatus) ([]*GetNotificationsByStatusRow, error)\n\tGetProvider(ctx context.Context, id string) (*Provider, error)\n\tGetProvidersByNameAndType(ctx context.Context, arg GetProvidersByNameAndTypeParams) (*Provider, error)\n\tUpdateDelivery(ctx context.Context, arg UpdateDeliveryParams) (*Delivery, error)\n\tUpdateNotificationStatus(ctx context.Context, arg UpdateNotificationStatusParams) error\n\tUpdateProvider(ctx context.Context, arg UpdateProviderParams) (*Provider, error)\n}\n\nvar _ Querier = (*Queries)(nil)\n```\n\n\ninstrumentation\n```go platform/apps/belfry/internal/instrumentation/otel.go\npackage instrumentation\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log/slog\"\n\n\t\"github.com/go-logr/logr\"\n\t\"github.com/immuta/platform/libs/logging\"\n\t\"github.com/immuta/platform/libs/logging/datadog\"\n\totellog \"github.com/immuta/platform/libs/logging/otel\"\n\t\"github.com/immuta/platform/libs/observability\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/sdk/resource\"\n\n\t\"github.com/immuta/platform/apps/belfry/internal/config\"\n)\n\n// Initialize initializes all instrumentation used by the application.\n// This includes: logging, tracing and metrics.\nfunc Initialize(ctx context.Context, cfg *config.Config) error {\n\totelResource := observability.NewStandardResource(\n\t\tcfg.Service.Name,\n\t\tcfg.Service.Version,\n\t\tcfg.Service.Environment,\n\t)\n\n\tinitLogging(cfg, otelResource)\n\n\tproviders, err := getOTELProviders(&cfg.Observability)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tshutdown, err := observability.Init(ctx, otelResource, providers...)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tgo shutdown.WaitForShutdown(ctx)\n\n\treturn nil\n}\n\n// InitLogging initializes the global slog logger based on the logging\n// configuration.\nfunc initLogging(cfg *config.Config, resource *resource.Resource) {\n\thandler := logging.NewJSONHandler(cfg.Log.Level)\n\n\tif cfg.Observability.Logging.DataDog.Enabled {\n\t\thandler = datadog.NewHandler(handler, resource)\n\t} else {\n\t\thandler = otellog.NewHandler(handler, resource)\n\t}\n\n\tlogging.Initialize(handler)\n\totel.SetLogger(logr.FromSlogHandler(slog.Default().Handler()))\n}\n\n// getOTELProviders returns the configured open telemetry exporter based on the provided\n// config.Observability.\nfunc getOTELProviders(cfg *config.Observability) ([]observability.SetupFn, error) {\n\tvar fns []observability.SetupFn\n\tif cfg.Tracing.Enabled {\n\t\tswitch cfg.Tracing.Exporter {\n\t\tcase \"otlp_grpc\":\n\t\t\tfns = append(fns, observability.SetupOTLPTraceGRPCProvider())\n\t\tcase \"otlp_http\":\n\t\t\tfns = append(fns, observability.SetupOTLPTraceHTTPProvider())\n\t\tcase \"console\":\n\t\t\tfns = append(fns, observability.SetupConsoleTraceProvider())\n\t\tdefault:\n\t\t\treturn nil, fmt.Errorf(\"unknown or invalid trace provider: %s\", cfg.Tracing.Exporter)\n\t\t}\n\t}\n\n\tif cfg.Metrics.Enabled {\n\t\tswitch cfg.Metrics.Exporter {\n\t\tcase \"otlp_grpc\":\n\t\t\tfns = append(fns, observability.SetupOTLPMeterGRPCProvider())\n\t\tcase \"otlp_http\":\n\t\t\tfns = append(fns, observability.SetupOTLPMeterHTTPProvider())\n\t\tcase \"console\":\n\t\t\tfns = append(fns, observability.SetupConsoleMeterProvider())\n\t\tcase \"prometheus\":\n\t\t\tfns = append(fns, observability.SetupPrometheusMeterProvider(\n\t\t\t\tcfg.Metrics.Prometheus.Endpoint, cfg.Metrics.Prometheus.Port,\n\t\t\t))\n\t\tdefault:\n\t\t\treturn nil, fmt.Errorf(\"unknown or invalid meter provider: %s\", cfg.Metrics.Exporter)\n\t\t}\n\t}\n\n\treturn fns, nil\n}\n```\n\n\nserver\n```go platform/apps/belfry/internal/server/reflector.go\npackage server\n\ntype Reflector struct {\n\tservices []string\n}\n\nfunc NewReflector() *Reflector {\n\treturn &Reflector{}\n}\n\nfunc (r *Reflector) Names() []string {\n\treturn r.services\n}\n\nfunc (r *Reflector) AddService(s string) {\n\tr.services = append(r.services, s)\n}\n```\n\n```go platform/apps/belfry/internal/server/server.go\npackage server\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log/slog\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"connectrpc.com/connect\"\n\t\"connectrpc.com/grpchealth\"\n\t\"connectrpc.com/grpcreflect\"\n\t\"connectrpc.com/otelconnect\"\n\t\"connectrpc.com/validate\"\n\t\"github.com/exaring/otelpgx\"\n\t\"github.com/jackc/pgx/v5/pgxpool\"\n\t\"golang.org/x/net/http2\"\n\t\"golang.org/x/net/http2/h2c\"\n\n\t\"github.com/immuta/platform/apps/belfry/internal/config\"\n\t\"github.com/immuta/platform/apps/belfry/internal/database\"\n\t\"github.com/immuta/platform/apps/belfry/internal/database/querier\"\n\t\"github.com/immuta/platform/apps/belfry/internal/service/delivery\"\n\t\"github.com/immuta/platform/apps/belfry/internal/service/inbox\"\n\t\"github.com/immuta/platform/apps/belfry/internal/service/notification\"\n\t\"github.com/immuta/platform/apps/belfry/internal/service/provider\"\n)\n\ntype Service interface {\n\tRegister(*http.ServeMux)\n\tName() string\n}\n\ntype Server struct {\n\t*http.ServeMux\n\treflection *Reflector\n\thealth     *grpchealth.StaticChecker\n\tconfig     *config.Server\n}\n\nfunc New(cfg *config.Server) (*Server, error) {\n\tapi := &Server{\n\t\tServeMux:   http.NewServeMux(),\n\t\treflection: NewReflector(),\n\t\thealth:     grpchealth.NewStaticChecker(),\n\t\tconfig:     cfg,\n\t}\n\n\tapi.registerReflectionService()\n\tapi.registerHealthService()\n\n\treturn api, nil\n}\n\nfunc (s *Server) registerHealthService() {\n\ts.Handle(grpchealth.NewHandler(s.health))\n}\n\nfunc (s *Server) registerReflectionService() {\n\ts.Handle(grpcreflect.NewHandlerV1Alpha(grpcreflect.NewReflector(s.reflection)))\n}\n\nfunc (s *Server) RegisterService(service Service) {\n\tservice.Register(s.ServeMux)\n\ts.reflection.AddService(service.Name())\n\ts.health.SetStatus(service.Name(), grpchealth.StatusServing)\n}\n\nfunc (s *Server) Serve() error {\n\tserver := &http.Server{\n\t\tAddr:        fmt.Sprintf(\":%d\", s.config.Port),\n\t\tHandler:     h2c.NewHandler(s, &http2.Server{}),\n\t\tReadTimeout: 10 * time.Second,\n\t}\n\n\treturn server.ListenAndServe()\n}\n\nfunc ConnectInterceptors() ([]connect.Interceptor, error) {\n\tvalidate, err := validate.NewInterceptor()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"API validation interceptor: %w\", err)\n\t}\n\n\totel, err := otelconnect.NewInterceptor()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"OTEL interceptor: %w\", err)\n\t}\n\n\treturn []connect.Interceptor{\n\t\tvalidate,\n\t\totel,\n\t}, nil\n}\n\nfunc Run(ctx context.Context, cancel context.CancelFunc, cfg *config.Config) error {\n\tapi, err := New(&cfg.Server)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to instantiate api server: %w\", err)\n\t}\n\n\tpgxCfg, err := pgxpool.ParseConfig(cfg.Database.URL)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create connection pool: %w\", err)\n\t}\n\n\tpgxCfg.ConnConfig.Tracer = otelpgx.NewTracer()\n\n\tpool, err := pgxpool.NewWithConfig(ctx, pgxCfg)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to connect to database: %w\", err)\n\t}\n\n\tinterceptors, err := ConnectInterceptors()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to initialize connect-rpc interceptors: %w\", err)\n\t}\n\n\tdb := database.New(pool)\n\n\tnp := notification.NewProcessor(db, cfg)\n\n\t// Start processing notifications for delivery\n\tslog.Info(\"starting notification processor\")\n\tgo np.Start(ctx)\n\n\t// Register Notification handler\n\tapi.RegisterService(notification.NewHandler(\n\t\tnotification.WithDatabaseQuerier(db),\n\t\tnotification.WithNotificationsQuerier(querier.NewNotificationQuerier(db)),\n\t\tnotification.WithProvidersQuerier(querier.NewProviderQuerier(db)),\n\t\tnotification.WithDeliveryChannel(np.Channel()),\n\t\tnotification.WithConnectHandlerOptions(\n\t\t\tconnect.WithInterceptors(interceptors...),\n\t\t),\n\t))\n\n\t// Register provider handler\n\tapi.RegisterService(provider.NewHandler(\n\t\tprovider.WithDatabaseQuerier(db),\n\t\tprovider.WithProvidersQuerier(querier.NewProviderQuerier(db)),\n\t\tprovider.WithConnectHandlerOptions(\n\t\t\tconnect.WithInterceptors(interceptors...),\n\t\t),\n\t))\n\n\t// Register delivery handler\n\tapi.RegisterService(delivery.NewHandler(db,\n\t\tdelivery.WithConnectHandlerOptions(\n\t\t\tconnect.WithInterceptors(interceptors...),\n\t\t),\n\t))\n\n\tapi.RegisterService(inbox.NewHandler(\n\t\tinbox.WithDatabaseQuerier(db),\n\t\tinbox.WithProvidersQuerier(querier.NewProviderQuerier(db)),\n\t\tinbox.WithConnectHandlerOptions(\n\t\t\tconnect.WithInterceptors(interceptors...),\n\t\t),\n\t))\n\n\tsigCh := make(chan os.Signal, 1)\n\tsignal.Notify(sigCh, os.Interrupt, syscall.SIGTERM)\n\n\tslog.Info(\"starting notification server\")\n\terrCh := make(chan error, 1)\n\tgo func() {\n\t\terrCh <- api.Serve()\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase e := <-errCh:\n\t\t\treturn fmt.Errorf(\"api server error: %w\", e)\n\t\tcase <-sigCh:\n\t\t\tcancel()\n\t\t\treturn nil\n\t\t}\n\t}\n}\n```\n\n\nservice\ndelivery\n```go platform/apps/belfry/internal/service/delivery/delivery.go\npackage delivery\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"log/slog\"\n\t\"net/http\"\n\n\t\"connectrpc.com/connect\"\n\t\"github.com/jackc/pgx/v5\"\n\t\"github.com/jackc/pgx/v5/pgtype\"\n\t\"google.golang.org/protobuf/types/known/timestamppb\"\n\n\t\"github.com/immuta/platform/apps/belfry/internal/database\"\n\t\"github.com/immuta/platform/apps/belfry/internal/service\"\n\tdeliveryv1 \"github.com/immuta/platform/apps/belfry/internal/service/delivery/v1\"\n\t\"github.com/immuta/platform/apps/belfry/internal/service/delivery/v1/deliveryv1connect\"\n)\n\ntype Handler struct {\n\tdb      database.Querier\n\toptions []connect.HandlerOption\n}\n\nfunc WithConnectHandlerOptions(opts ...connect.HandlerOption) service.Option[*Handler] {\n\treturn func(h *Handler) {\n\t\th.options = opts\n\t}\n}\n\nfunc (h *Handler) Register(router *http.ServeMux) {\n\trouter.Handle(deliveryv1connect.NewDeliveryServiceHandler(h, h.options...))\n}\n\nfunc (*Handler) Name() string {\n\treturn deliveryv1connect.DeliveryServiceName\n}\n\nfunc NewHandler(db database.Querier, opts ...service.Option[*Handler]) *Handler {\n\th := &Handler{db: db}\n\n\tfor _, o := range opts {\n\t\to(h)\n\t}\n\n\treturn h\n}\n\nfunc (h *Handler) GetDelivery(\n\tctx context.Context, req *connect.Request[deliveryv1.GetDeliveryRequest],\n) (*connect.Response[deliveryv1.GetDeliveryResponse], error) {\n\tid := req.Msg.GetId()\n\td, err := h.db.GetDelivery(ctx, id)\n\tif err != nil {\n\t\tif errors.Is(err, pgx.ErrNoRows) {\n\t\t\treturn nil, connect.NewError(connect.CodeNotFound, fmt.Errorf(\"delivery %s not found\", id))\n\t\t}\n\n\t\tslog.Error(\"failed to get delivery\", \"err\", err, \"delivery_id\", id)\n\t\treturn nil, connect.NewError(connect.CodeInternal, fmt.Errorf(\"failed to get delivery %s\", id))\n\t}\n\n\tresp := &deliveryv1.GetDeliveryResponse{\n\t\tDelivery: &deliveryv1.Delivery{\n\t\t\tId:             d.ID,\n\t\t\tNotificationId: d.NotificationID,\n\t\t\tProviderId:     d.ProviderID,\n\t\t\tRecipientId:    d.RecipientID,\n\t\t\tStatus:         dbDeliveryStatusToprotoDeliveryStatus[d.Status],\n\t\t},\n\t}\n\n\tif d.SentAt.Valid {\n\t\tresp.Delivery.SentAt = timestamppb.New(d.SentAt.Time)\n\t}\n\n\tif d.ReadAt.Valid {\n\t\tresp.Delivery.ReadAt = timestamppb.New(d.ReadAt.Time)\n\t}\n\n\treturn connect.NewResponse(resp), nil\n}\n\nfunc (h *Handler) UpdateDelivery(\n\tctx context.Context, req *connect.Request[deliveryv1.UpdateDeliveryRequest],\n) (*connect.Response[deliveryv1.UpdateDeliveryResponse], error) {\n\tid := req.Msg.GetId()\n\n\tparams := database.UpdateDeliveryParams{ID: id}\n\n\tif req.Msg.Status != nil {\n\t\tparams.Status = database.NullDeliveryStatus{\n\t\t\tDeliveryStatus: protoDeliveryStatusTodbDeliveryStatus[req.Msg.GetStatus()],\n\t\t\tValid:          true,\n\t\t}\n\t}\n\n\tif sentAt := req.Msg.GetSentAt(); sentAt != nil {\n\t\tparams.SentAt = pgtype.Timestamp{Time: sentAt.AsTime()}\n\t}\n\n\tif readAt := req.Msg.GetReadAt(); readAt != nil {\n\t\tparams.ReadAt = pgtype.Timestamp{Time: readAt.AsTime()}\n\t}\n\n\td, err := h.db.UpdateDelivery(ctx, params)\n\tif err != nil {\n\t\tif errors.Is(err, pgx.ErrNoRows) {\n\t\t\treturn nil, connect.NewError(connect.CodeNotFound, fmt.Errorf(\"delivery %s not found\", id))\n\t\t}\n\n\t\tslog.Error(\"failed to get delivery\", \"err\", err, \"delivery_id\", id)\n\t\treturn nil, connect.NewError(connect.CodeInternal, fmt.Errorf(\"failed to update delivery %s\", id))\n\t}\n\n\tresp := &deliveryv1.UpdateDeliveryResponse{\n\t\tDelivery: &deliveryv1.Delivery{\n\t\t\tId:             d.ID,\n\t\t\tNotificationId: d.NotificationID,\n\t\t\tProviderId:     d.ProviderID,\n\t\t\tRecipientId:    d.RecipientID,\n\t\t\tStatus:         dbDeliveryStatusToprotoDeliveryStatus[d.Status],\n\t\t},\n\t}\n\n\tif d.SentAt.Valid {\n\t\tresp.Delivery.SentAt = timestamppb.New(d.SentAt.Time)\n\t}\n\n\tif d.ReadAt.Valid {\n\t\tresp.Delivery.ReadAt = timestamppb.New(d.ReadAt.Time)\n\t}\n\n\treturn connect.NewResponse(resp), nil\n}\n```\n\n```go platform/apps/belfry/internal/service/delivery/delivery_test.go\npackage delivery\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"testing\"\n\t\"time\"\n\n\t\"connectrpc.com/connect\"\n\t\"github.com/google/uuid\"\n\t\"github.com/jackc/pgx/v5\"\n\t\"github.com/jackc/pgx/v5/pgtype\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/mock\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"google.golang.org/protobuf/types/known/timestamppb\"\n\n\t\"github.com/immuta/platform/apps/belfry/internal/database\"\n\t\"github.com/immuta/platform/apps/belfry/internal/database/mocks\"\n\tdeliveryv1 \"github.com/immuta/platform/apps/belfry/internal/service/delivery/v1\"\n)\n\ntype DeliveryHandlerTestSuite struct {\n\tsuite.Suite\n}\n\nfunc (s *DeliveryHandlerTestSuite) TestGet() {\n\ttests := []struct {\n\t\tname      string\n\t\tdelivery  *database.Delivery\n\t\trequest   *deliveryv1.GetDeliveryRequest\n\t\tmocks     func(*mocks.MockQuerier, *database.Delivery, *deliveryv1.GetDeliveryRequest)\n\t\texpect    func(*database.Delivery) *deliveryv1.GetDeliveryResponse\n\t\texpectErr assert.ErrorAssertionFunc\n\t}{\n\t\t{\n\t\t\tname:     \"valid\",\n\t\t\tdelivery: newDelivery(),\n\t\t\trequest:  newGetDeliveryRequest(),\n\t\t\tmocks: func(q *mocks.MockQuerier, d *database.Delivery, req *deliveryv1.GetDeliveryRequest) {\n\t\t\t\tq.EXPECT().GetDelivery(mock.Anything, req.Id).Return(d, nil)\n\t\t\t},\n\t\t\texpect: func(d *database.Delivery) *deliveryv1.GetDeliveryResponse {\n\t\t\t\treturn &deliveryv1.GetDeliveryResponse{\n\t\t\t\t\tDelivery: &deliveryv1.Delivery{\n\t\t\t\t\t\tId:             d.ID,\n\t\t\t\t\t\tNotificationId: d.NotificationID,\n\t\t\t\t\t\tProviderId:     d.ProviderID,\n\t\t\t\t\t\tRecipientId:    d.RecipientID,\n\t\t\t\t\t\tStatus:         deliveryv1.DeliveryStatus_DELIVERY_STATUS_CREATED,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t\texpectErr: assert.NoError,\n\t\t},\n\t\t{\n\t\t\tname: \"with times\",\n\t\t\tdelivery: newDelivery(func(d *database.Delivery) {\n\t\t\t\td.SentAt = pgtype.Timestamp{Time: time.Now(), Valid: true}\n\t\t\t\td.ReadAt = pgtype.Timestamp{Time: time.Now(), Valid: true}\n\t\t\t}),\n\t\t\trequest: newGetDeliveryRequest(),\n\t\t\tmocks: func(q *mocks.MockQuerier, d *database.Delivery, req *deliveryv1.GetDeliveryRequest) {\n\t\t\t\tq.EXPECT().GetDelivery(mock.Anything, req.Id).Return(d, nil)\n\t\t\t},\n\t\t\texpect: func(d *database.Delivery) *deliveryv1.GetDeliveryResponse {\n\t\t\t\treturn &deliveryv1.GetDeliveryResponse{\n\t\t\t\t\tDelivery: &deliveryv1.Delivery{\n\t\t\t\t\t\tId:             d.ID,\n\t\t\t\t\t\tNotificationId: d.NotificationID,\n\t\t\t\t\t\tProviderId:     d.ProviderID,\n\t\t\t\t\t\tRecipientId:    d.RecipientID,\n\t\t\t\t\t\tStatus:         deliveryv1.DeliveryStatus_DELIVERY_STATUS_CREATED,\n\t\t\t\t\t\tSentAt:         timestamppb.New(d.SentAt.Time),\n\t\t\t\t\t\tReadAt:         timestamppb.New(d.ReadAt.Time),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t\texpectErr: assert.NoError,\n\t\t},\n\t\t{\n\t\t\tname:     \"no rows\",\n\t\t\tdelivery: newDelivery(),\n\t\t\trequest:  newGetDeliveryRequest(),\n\t\t\tmocks: func(q *mocks.MockQuerier, _ *database.Delivery, req *deliveryv1.GetDeliveryRequest) {\n\t\t\t\tq.EXPECT().GetDelivery(mock.Anything, req.Id).Return(nil, pgx.ErrNoRows)\n\t\t\t},\n\t\t\texpectErr: func(tt assert.TestingT, err error, i ...any) bool {\n\t\t\t\treturn assert.Regexp(tt, `delivery .* not found`, err.Error(), i...)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:     \"unspecified error\",\n\t\t\tdelivery: newDelivery(),\n\t\t\trequest:  newGetDeliveryRequest(),\n\t\t\tmocks: func(q *mocks.MockQuerier, _ *database.Delivery, req *deliveryv1.GetDeliveryRequest) {\n\t\t\t\tq.EXPECT().GetDelivery(mock.Anything, req.Id).Return(nil, errors.New(\"error\"))\n\t\t\t},\n\t\t\texpectErr: func(tt assert.TestingT, err error, i ...any) bool {\n\t\t\t\treturn assert.Regexp(tt, `failed to get delivery .*`, err.Error(), i...)\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\ts.Run(tt.name, func() {\n\t\t\tquerier := mocks.NewMockQuerier(s.T())\n\t\t\ttt.mocks(querier, tt.delivery, tt.request)\n\n\t\t\th := NewHandler(querier)\n\t\t\tresp, err := h.GetDelivery(context.Background(), connect.NewRequest(tt.request))\n\t\t\ttt.expectErr(s.T(), err)\n\t\t\tif resp != nil {\n\t\t\t\ts.Equal(tt.expect(tt.delivery), resp.Msg)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc (s *DeliveryHandlerTestSuite) TestUpdate() {\n\ttests := []struct {\n\t\tname      string\n\t\tdelivery  *database.Delivery\n\t\trequest   *deliveryv1.UpdateDeliveryRequest\n\t\tmocks     func(*mocks.MockQuerier, *database.Delivery, *deliveryv1.UpdateDeliveryRequest)\n\t\texpect    func(*database.Delivery) *deliveryv1.UpdateDeliveryResponse\n\t\texpectErr assert.ErrorAssertionFunc\n\t}{\n\t\t{\n\t\t\tname:     \"noop\",\n\t\t\tdelivery: newDelivery(),\n\t\t\trequest:  newUpdateDeliveryRequest(),\n\t\t\tmocks: func(q *mocks.MockQuerier, d *database.Delivery, req *deliveryv1.UpdateDeliveryRequest) {\n\t\t\t\tq.EXPECT().UpdateDelivery(mock.Anything, database.UpdateDeliveryParams{ID: req.Id}).Return(d, nil)\n\t\t\t},\n\t\t\texpect: func(d *database.Delivery) *deliveryv1.UpdateDeliveryResponse {\n\t\t\t\treturn &deliveryv1.UpdateDeliveryResponse{\n\t\t\t\t\tDelivery: &deliveryv1.Delivery{\n\t\t\t\t\t\tId:             d.ID,\n\t\t\t\t\t\tNotificationId: d.NotificationID,\n\t\t\t\t\t\tProviderId:     d.ProviderID,\n\t\t\t\t\t\tRecipientId:    d.RecipientID,\n\t\t\t\t\t\tStatus:         deliveryv1.DeliveryStatus_DELIVERY_STATUS_CREATED,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t\texpectErr: assert.NoError,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\ts.Run(tt.name, func() {\n\t\t\tquerier := mocks.NewMockQuerier(s.T())\n\t\t\ttt.mocks(querier, tt.delivery, tt.request)\n\n\t\t\th := NewHandler(querier)\n\t\t\tresp, err := h.UpdateDelivery(context.Background(), connect.NewRequest(tt.request))\n\t\t\ttt.expectErr(s.T(), err)\n\t\t\tif resp != nil {\n\t\t\t\ts.Equal(tt.expect(tt.delivery), resp.Msg)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDeliveryHandlerTestSuite(t *testing.T) {\n\tsuite.Run(t, new(DeliveryHandlerTestSuite))\n}\n\nfunc newDelivery(opts ...func(*database.Delivery)) *database.Delivery {\n\td := &database.Delivery{\n\t\tID:             uuid.NewString(),\n\t\tNotificationID: uuid.NewString(),\n\t\tProviderID:     uuid.NewString(),\n\t\tRecipientID:    uuid.NewString(),\n\t\tStatus:         database.DeliveryStatusCreated,\n\t}\n\n\tfor _, o := range opts {\n\t\to(d)\n\t}\n\n\treturn d\n}\n\n// nolint:unparam\nfunc newGetDeliveryRequest(opts ...func(*deliveryv1.GetDeliveryRequest)) *deliveryv1.GetDeliveryRequest {\n\treq := &deliveryv1.GetDeliveryRequest{Id: uuid.NewString()}\n\n\tfor _, o := range opts {\n\t\to(req)\n\t}\n\n\treturn req\n}\n\nfunc newUpdateDeliveryRequest(opts ...func(*deliveryv1.UpdateDeliveryRequest)) *deliveryv1.UpdateDeliveryRequest {\n\treq := &deliveryv1.UpdateDeliveryRequest{Id: uuid.NewString()}\n\n\tfor _, o := range opts {\n\t\to(req)\n\t}\n\n\treturn req\n}\n```\n\n```go platform/apps/belfry/internal/service/delivery/enums.go\npackage delivery\n\nimport (\n\t\"github.com/immuta/platform/apps/belfry/internal/database\"\n\tdeliveryv1 \"github.com/immuta/platform/apps/belfry/internal/service/delivery/v1\"\n)\n\nvar (\n\tdbDeliveryStatusToprotoDeliveryStatus = map[database.DeliveryStatus]deliveryv1.DeliveryStatus{\n\t\tdatabase.DeliveryStatusCreated:   deliveryv1.DeliveryStatus_DELIVERY_STATUS_CREATED,\n\t\tdatabase.DeliveryStatusDelivered: deliveryv1.DeliveryStatus_DELIVERY_STATUS_DELIVERED,\n\t\tdatabase.DeliveryStatusFailed:    deliveryv1.DeliveryStatus_DELIVERY_STATUS_FAILED,\n\t}\n\tprotoDeliveryStatusTodbDeliveryStatus = map[deliveryv1.DeliveryStatus]database.DeliveryStatus{\n\t\tdeliveryv1.DeliveryStatus_DELIVERY_STATUS_CREATED:   database.DeliveryStatusCreated,\n\t\tdeliveryv1.DeliveryStatus_DELIVERY_STATUS_DELIVERED: database.DeliveryStatusDelivered,\n\t\tdeliveryv1.DeliveryStatus_DELIVERY_STATUS_FAILED:    database.DeliveryStatusFailed,\n\t}\n)\n```\n\nv1\n```go platform/apps/belfry/internal/service/delivery/v1/delivery.pb.go\n// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.34.1\n// \tprotoc        (unknown)\n// source: delivery/v1/delivery.proto\n\npackage deliveryv1\n\nimport (\n\t_ \"buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate\"\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\ttimestamppb \"google.golang.org/protobuf/types/known/timestamppb\"\n\treflect \"reflect\"\n\tsync \"sync\"\n)\n\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)\n\ntype DeliveryStatus int32\n\nconst (\n\tDeliveryStatus_DELIVERY_STATUS_UNSPECIFIED DeliveryStatus = 0\n\tDeliveryStatus_DELIVERY_STATUS_CREATED     DeliveryStatus = 1\n\tDeliveryStatus_DELIVERY_STATUS_DELIVERED   DeliveryStatus = 2\n\tDeliveryStatus_DELIVERY_STATUS_FAILED      DeliveryStatus = 3\n)\n\n// Enum value maps for DeliveryStatus.\nvar (\n\tDeliveryStatus_name = map[int32]string{\n\t\t0: \"DELIVERY_STATUS_UNSPECIFIED\",\n\t\t1: \"DELIVERY_STATUS_CREATED\",\n\t\t2: \"DELIVERY_STATUS_DELIVERED\",\n\t\t3: \"DELIVERY_STATUS_FAILED\",\n\t}\n\tDeliveryStatus_value = map[string]int32{\n\t\t\"DELIVERY_STATUS_UNSPECIFIED\": 0,\n\t\t\"DELIVERY_STATUS_CREATED\":     1,\n\t\t\"DELIVERY_STATUS_DELIVERED\":   2,\n\t\t\"DELIVERY_STATUS_FAILED\":      3,\n\t}\n)\n\nfunc (x DeliveryStatus) Enum() *DeliveryStatus {\n\tp := new(DeliveryStatus)\n\t*p = x\n\treturn p\n}\n\nfunc (x DeliveryStatus) String() string {\n\treturn protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))\n}\n\nfunc (DeliveryStatus) Descriptor() protoreflect.EnumDescriptor {\n\treturn file_delivery_v1_delivery_proto_enumTypes[0].Descriptor()\n}\n\nfunc (DeliveryStatus) Type() protoreflect.EnumType {\n\treturn &file_delivery_v1_delivery_proto_enumTypes[0]\n}\n\nfunc (x DeliveryStatus) Number() protoreflect.EnumNumber {\n\treturn protoreflect.EnumNumber(x)\n}\n\n// Deprecated: Use DeliveryStatus.Descriptor instead.\nfunc (DeliveryStatus) EnumDescriptor() ([]byte, []int) {\n\treturn file_delivery_v1_delivery_proto_rawDescGZIP(), []int{0}\n}\n\ntype GetDeliveryRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId string `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\n\nfunc (x *GetDeliveryRequest) Reset() {\n\t*x = GetDeliveryRequest{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_delivery_v1_delivery_proto_msgTypes[0]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *GetDeliveryRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetDeliveryRequest) ProtoMessage() {}\n\nfunc (x *GetDeliveryRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_delivery_v1_delivery_proto_msgTypes[0]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetDeliveryRequest.ProtoReflect.Descriptor instead.\nfunc (*GetDeliveryRequest) Descriptor() ([]byte, []int) {\n\treturn file_delivery_v1_delivery_proto_rawDescGZIP(), []int{0}\n}\n\nfunc (x *GetDeliveryRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\ntype GetDeliveryResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDelivery *Delivery `protobuf:\"bytes,1,opt,name=delivery,proto3\" json:\"delivery,omitempty\"`\n}\n\nfunc (x *GetDeliveryResponse) Reset() {\n\t*x = GetDeliveryResponse{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_delivery_v1_delivery_proto_msgTypes[1]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *GetDeliveryResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetDeliveryResponse) ProtoMessage() {}\n\nfunc (x *GetDeliveryResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_delivery_v1_delivery_proto_msgTypes[1]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetDeliveryResponse.ProtoReflect.Descriptor instead.\nfunc (*GetDeliveryResponse) Descriptor() ([]byte, []int) {\n\treturn file_delivery_v1_delivery_proto_rawDescGZIP(), []int{1}\n}\n\nfunc (x *GetDeliveryResponse) GetDelivery() *Delivery {\n\tif x != nil {\n\t\treturn x.Delivery\n\t}\n\treturn nil\n}\n\ntype UpdateDeliveryRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId     string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tStatus *DeliveryStatus        `protobuf:\"varint,2,opt,name=status,proto3,enum=immuta.platform.notifications.delivery.v1.DeliveryStatus,oneof\" json:\"status,omitempty\"`\n\tSentAt *timestamppb.Timestamp `protobuf:\"bytes,3,opt,name=sent_at,json=sentAt,proto3,oneof\" json:\"sent_at,omitempty\"`\n\tReadAt *timestamppb.Timestamp `protobuf:\"bytes,4,opt,name=read_at,json=readAt,proto3,oneof\" json:\"read_at,omitempty\"`\n}\n\nfunc (x *UpdateDeliveryRequest) Reset() {\n\t*x = UpdateDeliveryRequest{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_delivery_v1_delivery_proto_msgTypes[2]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *UpdateDeliveryRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateDeliveryRequest) ProtoMessage() {}\n\nfunc (x *UpdateDeliveryRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_delivery_v1_delivery_proto_msgTypes[2]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UpdateDeliveryRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateDeliveryRequest) Descriptor() ([]byte, []int) {\n\treturn file_delivery_v1_delivery_proto_rawDescGZIP(), []int{2}\n}\n\nfunc (x *UpdateDeliveryRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateDeliveryRequest) GetStatus() DeliveryStatus {\n\tif x != nil && x.Status != nil {\n\t\treturn *x.Status\n\t}\n\treturn DeliveryStatus_DELIVERY_STATUS_UNSPECIFIED\n}\n\nfunc (x *UpdateDeliveryRequest) GetSentAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.SentAt\n\t}\n\treturn nil\n}\n\nfunc (x *UpdateDeliveryRequest) GetReadAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ReadAt\n\t}\n\treturn nil\n}\n\ntype UpdateDeliveryResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tDelivery *Delivery `protobuf:\"bytes,1,opt,name=delivery,proto3\" json:\"delivery,omitempty\"`\n}\n\nfunc (x *UpdateDeliveryResponse) Reset() {\n\t*x = UpdateDeliveryResponse{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_delivery_v1_delivery_proto_msgTypes[3]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *UpdateDeliveryResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateDeliveryResponse) ProtoMessage() {}\n\nfunc (x *UpdateDeliveryResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_delivery_v1_delivery_proto_msgTypes[3]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UpdateDeliveryResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateDeliveryResponse) Descriptor() ([]byte, []int) {\n\treturn file_delivery_v1_delivery_proto_rawDescGZIP(), []int{3}\n}\n\nfunc (x *UpdateDeliveryResponse) GetDelivery() *Delivery {\n\tif x != nil {\n\t\treturn x.Delivery\n\t}\n\treturn nil\n}\n\ntype Delivery struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId             string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tNotificationId string                 `protobuf:\"bytes,2,opt,name=notification_id,json=notificationId,proto3\" json:\"notification_id,omitempty\"`\n\tProviderId     string                 `protobuf:\"bytes,3,opt,name=provider_id,json=providerId,proto3\" json:\"provider_id,omitempty\"`\n\tRecipientId    string                 `protobuf:\"bytes,4,opt,name=recipient_id,json=recipientId,proto3\" json:\"recipient_id,omitempty\"`\n\tStatus         DeliveryStatus         `protobuf:\"varint,5,opt,name=status,proto3,enum=immuta.platform.notifications.delivery.v1.DeliveryStatus\" json:\"status,omitempty\"`\n\tSentAt         *timestamppb.Timestamp `protobuf:\"bytes,6,opt,name=sent_at,json=sentAt,proto3\" json:\"sent_at,omitempty\"`\n\tReadAt         *timestamppb.Timestamp `protobuf:\"bytes,7,opt,name=read_at,json=readAt,proto3\" json:\"read_at,omitempty\"`\n}\n\nfunc (x *Delivery) Reset() {\n\t*x = Delivery{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_delivery_v1_delivery_proto_msgTypes[4]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *Delivery) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Delivery) ProtoMessage() {}\n\nfunc (x *Delivery) ProtoReflect() protoreflect.Message {\n\tmi := &file_delivery_v1_delivery_proto_msgTypes[4]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Delivery.ProtoReflect.Descriptor instead.\nfunc (*Delivery) Descriptor() ([]byte, []int) {\n\treturn file_delivery_v1_delivery_proto_rawDescGZIP(), []int{4}\n}\n\nfunc (x *Delivery) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Delivery) GetNotificationId() string {\n\tif x != nil {\n\t\treturn x.NotificationId\n\t}\n\treturn \"\"\n}\n\nfunc (x *Delivery) GetProviderId() string {\n\tif x != nil {\n\t\treturn x.ProviderId\n\t}\n\treturn \"\"\n}\n\nfunc (x *Delivery) GetRecipientId() string {\n\tif x != nil {\n\t\treturn x.RecipientId\n\t}\n\treturn \"\"\n}\n\nfunc (x *Delivery) GetStatus() DeliveryStatus {\n\tif x != nil {\n\t\treturn x.Status\n\t}\n\treturn DeliveryStatus_DELIVERY_STATUS_UNSPECIFIED\n}\n\nfunc (x *Delivery) GetSentAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.SentAt\n\t}\n\treturn nil\n}\n\nfunc (x *Delivery) GetReadAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.ReadAt\n\t}\n\treturn nil\n}\n\nvar File_delivery_v1_delivery_proto protoreflect.FileDescriptor\n\nvar file_delivery_v1_delivery_proto_rawDesc = []byte{\n\t0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65,\n\t0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x69, 0x6d,\n\t0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f,\n\t0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x69,\n\t0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,\n\t0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,\n\t0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,\n\t0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,\n\t0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69,\n\t0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x02, 0x69,\n\t0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72,\n\t0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x66, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44,\n\t0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,\n\t0x4f, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,\n\t0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,\n\t0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x73, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,\n\t0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,\n\t0x22, 0xad, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76,\n\t0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64,\n\t0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03,\n\t0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x60, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,\n\t0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61,\n\t0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,\n\t0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,\n\t0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,\n\t0x75, 0x73, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x06,\n\t0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x65, 0x6e,\n\t0x74, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,\n\t0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,\n\t0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x74,\n\t0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,\n\t0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,\n\t0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,\n\t0x48, 0x02, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,\n\t0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x6e,\n\t0x74, 0x5f, 0x61, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x74,\n\t0x22, 0x69, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,\n\t0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x64, 0x65,\n\t0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69,\n\t0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e,\n\t0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x6c,\n\t0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,\n\t0x79, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x22, 0x80, 0x03, 0x0a, 0x08,\n\t0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,\n\t0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64,\n\t0x12, 0x34, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01,\n\t0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,\n\t0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08,\n\t0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,\n\t0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,\n\t0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8,\n\t0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,\n\t0x6e, 0x74, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,\n\t0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c,\n\t0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31,\n\t0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,\n\t0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x74,\n\t0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x18,\n\t0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,\n\t0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,\n\t0x70, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x61,\n\t0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,\n\t0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,\n\t0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x41, 0x74, 0x2a, 0x89,\n\t0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,\n\t0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54,\n\t0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,\n\t0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53,\n\t0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,\n\t0x1d, 0x0a, 0x19, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,\n\t0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1a,\n\t0x0a, 0x16, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,\n\t0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x32, 0xb8, 0x02, 0x0a, 0x0f, 0x44,\n\t0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8c,\n\t0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x3d,\n\t0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,\n\t0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64,\n\t0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,\n\t0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e,\n\t0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,\n\t0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65,\n\t0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c,\n\t0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x95, 0x01,\n\t0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,\n\t0x12, 0x40, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,\n\t0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,\n\t0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,\n\t0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,\n\t0x73, 0x74, 0x1a, 0x41, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74,\n\t0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55,\n\t0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,\n\t0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xd7, 0x02, 0x0a, 0x2d, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6d,\n\t0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f,\n\t0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x69,\n\t0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,\n\t0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,\n\t0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2f, 0x70, 0x6c, 0x61, 0x74,\n\t0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x62, 0x65, 0x6c, 0x66, 0x72, 0x79,\n\t0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,\n\t0x65, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x65,\n\t0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x49, 0x50, 0x4e, 0x44, 0xaa,\n\t0x02, 0x29, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,\n\t0x6d, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,\n\t0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x29, 0x49, 0x6d,\n\t0x6d, 0x75, 0x74, 0x61, 0x5c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5c, 0x4e, 0x6f,\n\t0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5c, 0x44, 0x65, 0x6c, 0x69,\n\t0x76, 0x65, 0x72, 0x79, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x35, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61,\n\t0x5c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,\n\t0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,\n\t0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,\n\t0x02, 0x2d, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,\n\t0x72, 0x6d, 0x3a, 0x3a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x73, 0x3a, 0x3a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62,\n\t0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,\n}\n\nvar (\n\tfile_delivery_v1_delivery_proto_rawDescOnce sync.Once\n\tfile_delivery_v1_delivery_proto_rawDescData = file_delivery_v1_delivery_proto_rawDesc\n)\n\nfunc file_delivery_v1_delivery_proto_rawDescGZIP() []byte {\n\tfile_delivery_v1_delivery_proto_rawDescOnce.Do(func() {\n\t\tfile_delivery_v1_delivery_proto_rawDescData = protoimpl.X.CompressGZIP(file_delivery_v1_delivery_proto_rawDescData)\n\t})\n\treturn file_delivery_v1_delivery_proto_rawDescData\n}\n\nvar file_delivery_v1_delivery_proto_enumTypes = make([]protoimpl.EnumInfo, 1)\nvar file_delivery_v1_delivery_proto_msgTypes = make([]protoimpl.MessageInfo, 5)\nvar file_delivery_v1_delivery_proto_goTypes = []interface{}{\n\t(DeliveryStatus)(0),            // 0: immuta.platform.notifications.delivery.v1.DeliveryStatus\n\t(*GetDeliveryRequest)(nil),     // 1: immuta.platform.notifications.delivery.v1.GetDeliveryRequest\n\t(*GetDeliveryResponse)(nil),    // 2: immuta.platform.notifications.delivery.v1.GetDeliveryResponse\n\t(*UpdateDeliveryRequest)(nil),  // 3: immuta.platform.notifications.delivery.v1.UpdateDeliveryRequest\n\t(*UpdateDeliveryResponse)(nil), // 4: immuta.platform.notifications.delivery.v1.UpdateDeliveryResponse\n\t(*Delivery)(nil),               // 5: immuta.platform.notifications.delivery.v1.Delivery\n\t(*timestamppb.Timestamp)(nil),  // 6: google.protobuf.Timestamp\n}\nvar file_delivery_v1_delivery_proto_depIdxs = []int32{\n\t5,  // 0: immuta.platform.notifications.delivery.v1.GetDeliveryResponse.delivery:type_name -> immuta.platform.notifications.delivery.v1.Delivery\n\t0,  // 1: immuta.platform.notifications.delivery.v1.UpdateDeliveryRequest.status:type_name -> immuta.platform.notifications.delivery.v1.DeliveryStatus\n\t6,  // 2: immuta.platform.notifications.delivery.v1.UpdateDeliveryRequest.sent_at:type_name -> google.protobuf.Timestamp\n\t6,  // 3: immuta.platform.notifications.delivery.v1.UpdateDeliveryRequest.read_at:type_name -> google.protobuf.Timestamp\n\t5,  // 4: immuta.platform.notifications.delivery.v1.UpdateDeliveryResponse.delivery:type_name -> immuta.platform.notifications.delivery.v1.Delivery\n\t0,  // 5: immuta.platform.notifications.delivery.v1.Delivery.status:type_name -> immuta.platform.notifications.delivery.v1.DeliveryStatus\n\t6,  // 6: immuta.platform.notifications.delivery.v1.Delivery.sent_at:type_name -> google.protobuf.Timestamp\n\t6,  // 7: immuta.platform.notifications.delivery.v1.Delivery.read_at:type_name -> google.protobuf.Timestamp\n\t1,  // 8: immuta.platform.notifications.delivery.v1.DeliveryService.GetDelivery:input_type -> immuta.platform.notifications.delivery.v1.GetDeliveryRequest\n\t3,  // 9: immuta.platform.notifications.delivery.v1.DeliveryService.UpdateDelivery:input_type -> immuta.platform.notifications.delivery.v1.UpdateDeliveryRequest\n\t2,  // 10: immuta.platform.notifications.delivery.v1.DeliveryService.GetDelivery:output_type -> immuta.platform.notifications.delivery.v1.GetDeliveryResponse\n\t4,  // 11: immuta.platform.notifications.delivery.v1.DeliveryService.UpdateDelivery:output_type -> immuta.platform.notifications.delivery.v1.UpdateDeliveryResponse\n\t10, // [10:12] is the sub-list for method output_type\n\t8,  // [8:10] is the sub-list for method input_type\n\t8,  // [8:8] is the sub-list for extension type_name\n\t8,  // [8:8] is the sub-list for extension extendee\n\t0,  // [0:8] is the sub-list for field type_name\n}\n\nfunc init() { file_delivery_v1_delivery_proto_init() }\nfunc file_delivery_v1_delivery_proto_init() {\n\tif File_delivery_v1_delivery_proto != nil {\n\t\treturn\n\t}\n\tif !protoimpl.UnsafeEnabled {\n\t\tfile_delivery_v1_delivery_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*GetDeliveryRequest); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_delivery_v1_delivery_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*GetDeliveryResponse); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_delivery_v1_delivery_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*UpdateDeliveryRequest); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_delivery_v1_delivery_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*UpdateDeliveryResponse); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_delivery_v1_delivery_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*Delivery); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t}\n\tfile_delivery_v1_delivery_proto_msgTypes[2].OneofWrappers = []interface{}{}\n\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: file_delivery_v1_delivery_proto_rawDesc,\n\t\t\tNumEnums:      1,\n\t\t\tNumMessages:   5,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   1,\n\t\t},\n\t\tGoTypes:           file_delivery_v1_delivery_proto_goTypes,\n\t\tDependencyIndexes: file_delivery_v1_delivery_proto_depIdxs,\n\t\tEnumInfos:         file_delivery_v1_delivery_proto_enumTypes,\n\t\tMessageInfos:      file_delivery_v1_delivery_proto_msgTypes,\n\t}.Build()\n\tFile_delivery_v1_delivery_proto = out.File\n\tfile_delivery_v1_delivery_proto_rawDesc = nil\n\tfile_delivery_v1_delivery_proto_goTypes = nil\n\tfile_delivery_v1_delivery_proto_depIdxs = nil\n}\n```\n\ndeliveryv1connect\n```go platform/apps/belfry/internal/service/delivery/v1/deliveryv1connect/delivery.connect.go\n// Code generated by protoc-gen-connect-go. DO NOT EDIT.\n//\n// Source: delivery/v1/delivery.proto\n\npackage deliveryv1connect\n\nimport (\n\tconnect \"connectrpc.com/connect\"\n\tcontext \"context\"\n\terrors \"errors\"\n\tv1 \"github.com/immuta/platform/apps/belfry/internal/service/delivery/v1\"\n\thttp \"net/http\"\n\tstrings \"strings\"\n)\n\n// This is a compile-time assertion to ensure that this generated file and the connect package are\n// compatible. If you get a compiler error that this constant is not defined, this code was\n// generated with a version of connect newer than the one compiled into your binary. You can fix the\n// problem by either regenerating this code with an older version of connect or updating the connect\n// version compiled into your binary.\nconst _ = connect.IsAtLeastVersion1_13_0\n\nconst (\n\t// DeliveryServiceName is the fully-qualified name of the DeliveryService service.\n\tDeliveryServiceName = \"immuta.platform.notifications.delivery.v1.DeliveryService\"\n)\n\n// These constants are the fully-qualified names of the RPCs defined in this package. They're\n// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.\n//\n// Note that these are different from the fully-qualified method names used by\n// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to\n// reflection-formatted method names, remove the leading slash and convert the remaining slash to a\n// period.\nconst (\n\t// DeliveryServiceGetDeliveryProcedure is the fully-qualified name of the DeliveryService's\n\t// GetDelivery RPC.\n\tDeliveryServiceGetDeliveryProcedure = \"/immuta.platform.notifications.delivery.v1.DeliveryService/GetDelivery\"\n\t// DeliveryServiceUpdateDeliveryProcedure is the fully-qualified name of the DeliveryService's\n\t// UpdateDelivery RPC.\n\tDeliveryServiceUpdateDeliveryProcedure = \"/immuta.platform.notifications.delivery.v1.DeliveryService/UpdateDelivery\"\n)\n\n// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.\nvar (\n\tdeliveryServiceServiceDescriptor              = v1.File_delivery_v1_delivery_proto.Services().ByName(\"DeliveryService\")\n\tdeliveryServiceGetDeliveryMethodDescriptor    = deliveryServiceServiceDescriptor.Methods().ByName(\"GetDelivery\")\n\tdeliveryServiceUpdateDeliveryMethodDescriptor = deliveryServiceServiceDescriptor.Methods().ByName(\"UpdateDelivery\")\n)\n\n// DeliveryServiceClient is a client for the\n// immuta.platform.notifications.delivery.v1.DeliveryService service.\ntype DeliveryServiceClient interface {\n\tGetDelivery(context.Context, *connect.Request[v1.GetDeliveryRequest]) (*connect.Response[v1.GetDeliveryResponse], error)\n\tUpdateDelivery(context.Context, *connect.Request[v1.UpdateDeliveryRequest]) (*connect.Response[v1.UpdateDeliveryResponse], error)\n}\n\n// NewDeliveryServiceClient constructs a client for the\n// immuta.platform.notifications.delivery.v1.DeliveryService service. By default, it uses the\n// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends\n// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or\n// connect.WithGRPCWeb() options.\n//\n// The URL supplied here should be the base URL for the Connect or gRPC server (for example,\n// http://api.acme.com or https://acme.com/grpc).\nfunc NewDeliveryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeliveryServiceClient {\n\tbaseURL = strings.TrimRight(baseURL, \"/\")\n\treturn &deliveryServiceClient{\n\t\tgetDelivery: connect.NewClient[v1.GetDeliveryRequest, v1.GetDeliveryResponse](\n\t\t\thttpClient,\n\t\t\tbaseURL+DeliveryServiceGetDeliveryProcedure,\n\t\t\tconnect.WithSchema(deliveryServiceGetDeliveryMethodDescriptor),\n\t\t\tconnect.WithClientOptions(opts...),\n\t\t),\n\t\tupdateDelivery: connect.NewClient[v1.UpdateDeliveryRequest, v1.UpdateDeliveryResponse](\n\t\t\thttpClient,\n\t\t\tbaseURL+DeliveryServiceUpdateDeliveryProcedure,\n\t\t\tconnect.WithSchema(deliveryServiceUpdateDeliveryMethodDescriptor),\n\t\t\tconnect.WithClientOptions(opts...),\n\t\t),\n\t}\n}\n\n// deliveryServiceClient implements DeliveryServiceClient.\ntype deliveryServiceClient struct {\n\tgetDelivery    *connect.Client[v1.GetDeliveryRequest, v1.GetDeliveryResponse]\n\tupdateDelivery *connect.Client[v1.UpdateDeliveryRequest, v1.UpdateDeliveryResponse]\n}\n\n// GetDelivery calls immuta.platform.notifications.delivery.v1.DeliveryService.GetDelivery.\nfunc (c *deliveryServiceClient) GetDelivery(ctx context.Context, req *connect.Request[v1.GetDeliveryRequest]) (*connect.Response[v1.GetDeliveryResponse], error) {\n\treturn c.getDelivery.CallUnary(ctx, req)\n}\n\n// UpdateDelivery calls immuta.platform.notifications.delivery.v1.DeliveryService.UpdateDelivery.\nfunc (c *deliveryServiceClient) UpdateDelivery(ctx context.Context, req *connect.Request[v1.UpdateDeliveryRequest]) (*connect.Response[v1.UpdateDeliveryResponse], error) {\n\treturn c.updateDelivery.CallUnary(ctx, req)\n}\n\n// DeliveryServiceHandler is an implementation of the\n// immuta.platform.notifications.delivery.v1.DeliveryService service.\ntype DeliveryServiceHandler interface {\n\tGetDelivery(context.Context, *connect.Request[v1.GetDeliveryRequest]) (*connect.Response[v1.GetDeliveryResponse], error)\n\tUpdateDelivery(context.Context, *connect.Request[v1.UpdateDeliveryRequest]) (*connect.Response[v1.UpdateDeliveryResponse], error)\n}\n\n// NewDeliveryServiceHandler builds an HTTP handler from the service implementation. It returns the\n// path on which to mount the handler and the handler itself.\n//\n// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf\n// and JSON codecs. They also support gzip compression.\nfunc NewDeliveryServiceHandler(svc DeliveryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {\n\tdeliveryServiceGetDeliveryHandler := connect.NewUnaryHandler(\n\t\tDeliveryServiceGetDeliveryProcedure,\n\t\tsvc.GetDelivery,\n\t\tconnect.WithSchema(deliveryServiceGetDeliveryMethodDescriptor),\n\t\tconnect.WithHandlerOptions(opts...),\n\t)\n\tdeliveryServiceUpdateDeliveryHandler := connect.NewUnaryHandler(\n\t\tDeliveryServiceUpdateDeliveryProcedure,\n\t\tsvc.UpdateDelivery,\n\t\tconnect.WithSchema(deliveryServiceUpdateDeliveryMethodDescriptor),\n\t\tconnect.WithHandlerOptions(opts...),\n\t)\n\treturn \"/immuta.platform.notifications.delivery.v1.DeliveryService/\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tswitch r.URL.Path {\n\t\tcase DeliveryServiceGetDeliveryProcedure:\n\t\t\tdeliveryServiceGetDeliveryHandler.ServeHTTP(w, r)\n\t\tcase DeliveryServiceUpdateDeliveryProcedure:\n\t\t\tdeliveryServiceUpdateDeliveryHandler.ServeHTTP(w, r)\n\t\tdefault:\n\t\t\thttp.NotFound(w, r)\n\t\t}\n\t})\n}\n\n// UnimplementedDeliveryServiceHandler returns CodeUnimplemented from all methods.\ntype UnimplementedDeliveryServiceHandler struct{}\n\nfunc (UnimplementedDeliveryServiceHandler) GetDelivery(context.Context, *connect.Request[v1.GetDeliveryRequest]) (*connect.Response[v1.GetDeliveryResponse], error) {\n\treturn nil, connect.NewError(connect.CodeUnimplemented, errors.New(\"immuta.platform.notifications.delivery.v1.DeliveryService.GetDelivery is not implemented\"))\n}\n\nfunc (UnimplementedDeliveryServiceHandler) UpdateDelivery(context.Context, *connect.Request[v1.UpdateDeliveryRequest]) (*connect.Response[v1.UpdateDeliveryResponse], error) {\n\treturn nil, connect.NewError(connect.CodeUnimplemented, errors.New(\"immuta.platform.notifications.delivery.v1.DeliveryService.UpdateDelivery is not implemented\"))\n}\n```\n\n\n\n\ninbox\n```go platform/apps/belfry/internal/service/inbox/inbox.go\npackage inbox\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"log/slog\"\n\t\"net/http\"\n\n\t\"connectrpc.com/connect\"\n\t\"github.com/jackc/pgx/v5\"\n\t\"google.golang.org/protobuf/types/known/timestamppb\"\n\n\t\"github.com/immuta/platform/apps/belfry/internal/database\"\n\t\"github.com/immuta/platform/apps/belfry/internal/database/querier\"\n\t\"github.com/immuta/platform/apps/belfry/internal/service\"\n\tinboxv1 \"github.com/immuta/platform/apps/belfry/internal/service/inbox/v1\"\n\t\"github.com/immuta/platform/apps/belfry/internal/service/inbox/v1/inboxv1connect\"\n\t\"github.com/immuta/platform/apps/belfry/internal/service/notification\"\n)\n\ntype Handler struct {\n\tdb        database.Querier\n\tproviders querier.ProviderQuerier\n\toptions   []connect.HandlerOption\n}\n\nfunc WithConnectHandlerOptions(opts ...connect.HandlerOption) service.Option[*Handler] {\n\treturn func(h *Handler) {\n\t\th.options = opts\n\t}\n}\n\nfunc WithDatabaseQuerier(db database.Querier) service.Option[*Handler] {\n\treturn func(h *Handler) {\n\t\th.db = db\n\t}\n}\n\nfunc WithProvidersQuerier(pq querier.ProviderQuerier) service.Option[*Handler] {\n\treturn func(h *Handler) {\n\t\th.providers = pq\n\t}\n}\n\nfunc NewHandler(opts ...service.Option[*Handler]) *Handler {\n\th := &Handler{}\n\n\tfor _, o := range opts {\n\t\to(h)\n\t}\n\n\treturn h\n}\n\nfunc (h *Handler) Register(router *http.ServeMux) {\n\trouter.Handle(inboxv1connect.NewInboxServiceHandler(h, h.options...))\n}\n\nfunc (*Handler) Name() string {\n\treturn inboxv1connect.InboxServiceName\n}\n\nfunc (h *Handler) GetInboxMessages(\n\tctx context.Context, req *connect.Request[inboxv1.GetInboxMessagesRequest],\n) (*connect.Response[inboxv1.GetInboxMessagesResponse], error) {\n\tp, err := h.providers.LookupProvider(ctx, req.Msg.ProviderId)\n\tif err != nil {\n\t\tif errors.Is(err, pgx.ErrNoRows) {\n\t\t\treturn nil, connect.NewError(connect.CodeNotFound, fmt.Errorf(\"provider %s not found\", req.Msg.GetProviderId()))\n\t\t}\n\n\t\tslog.Error(\"failed to get provider\", \"err\", err)\n\t\treturn nil, connect.NewError(connect.CodeInternal, errors.New(\"failed to retrieve provider\"))\n\t}\n\n\tmsgs, err := h.db.GetInboxMessages(ctx, database.GetInboxMessagesParams{\n\t\tRecipientID: req.Msg.GetRecipientId(),\n\t\tProviderID:  p.ID,\n\t\tTenantID:    req.Msg.GetTenantId(),\n\t})\n\tif err != nil && !errors.Is(err, pgx.ErrNoRows) {\n\t\tslog.Error(\"failed to get inbox messages\", \"err\", err)\n\t\treturn nil, connect.NewError(connect.CodeInternal, errors.New(\"failed to get inbox messages\"))\n\t}\n\n\tresp := &inboxv1.GetInboxMessagesResponse{\n\t\tMessages: make([]*inboxv1.InboxMessage, len(msgs)),\n\t}\n\n\tfor i, msg := range msgs {\n\t\tresp.Messages[i] = &inboxv1.InboxMessage{\n\t\t\tId:        msg.NotificationID,\n\t\t\tTenantId:  msg.TenantID,\n\t\t\tPriority:  notification.DBNotificationPriorityToProtoNotificationPriority[msg.Priority],\n\t\t\tType:      msg.Type,\n\t\t\tMessage:   msg.Message,\n\t\t\tData:      msg.Data,\n\t\t\tCreatedAt: timestamppb.New(msg.CreatedAt.Time),\n\t\t}\n\t}\n\n\treturn connect.NewResponse(resp), nil\n}\n```\n\n```go platform/apps/belfry/internal/service/inbox/inbox_test.go\npackage inbox\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"testing\"\n\t\"time\"\n\n\t\"connectrpc.com/connect\"\n\t\"github.com/google/uuid\"\n\t\"github.com/jackc/pgx/v5\"\n\t\"github.com/jackc/pgx/v5/pgtype\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/mock\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"google.golang.org/protobuf/types/known/timestamppb\"\n\n\t\"github.com/immuta/platform/apps/belfry/internal/database\"\n\tdbmocks \"github.com/immuta/platform/apps/belfry/internal/database/mocks\"\n\t\"github.com/immuta/platform/apps/belfry/internal/database/querier/mocks\"\n\tinboxv1 \"github.com/immuta/platform/apps/belfry/internal/service/inbox/v1\"\n\t\"github.com/immuta/platform/apps/belfry/internal/service/notification\"\n\tproviderv1 \"github.com/immuta/platform/apps/belfry/internal/service/provider/v1\"\n)\n\ntype InboxHandlerMocks struct {\n\tdb        *dbmocks.MockQuerier\n\tproviders *mocks.MockProviderQuerier\n}\n\ntype InboxHandlerTestSuite struct {\n\tsuite.Suite\n}\n\nfunc (s *InboxHandlerTestSuite) NewMocks() *InboxHandlerMocks {\n\treturn &InboxHandlerMocks{\n\t\tdb:        dbmocks.NewMockQuerier(s.T()),\n\t\tproviders: mocks.NewMockProviderQuerier(s.T()),\n\t}\n}\n\nfunc (s *InboxHandlerTestSuite) TestGet() {\n\ttests := []struct {\n\t\tname      string\n\t\trequest   *inboxv1.GetInboxMessagesRequest\n\t\tmessages  func(*inboxv1.GetInboxMessagesRequest) []*database.InboxMessage\n\t\tmocks     func(*InboxHandlerMocks, []*database.InboxMessage, *inboxv1.GetInboxMessagesRequest)\n\t\texpect    func([]*database.InboxMessage) *inboxv1.GetInboxMessagesResponse\n\t\texpectErr assert.ErrorAssertionFunc\n\t}{\n\t\t{\n\t\t\tname:    \"valid\",\n\t\t\trequest: newGetInboxMessagesRequest(),\n\t\t\tmessages: func(req *inboxv1.GetInboxMessagesRequest) []*database.InboxMessage {\n\t\t\t\treturn []*database.InboxMessage{{\n\t\t\t\t\tNotificationID: uuid.NewString(),\n\t\t\t\t\tRecipientID:    req.RecipientId,\n\t\t\t\t\tProviderID:     req.GetProviderId().GetId(),\n\t\t\t\t\tTenantID:       req.TenantId,\n\t\t\t\t\tMessage:        \"foo\",\n\t\t\t\t\tData:           nil,\n\t\t\t\t\tPriority:       1,\n\t\t\t\t\tType:           \"fizz:buzz\",\n\t\t\t\t\tCreatedAt:      pgtype.Timestamp{Time: time.Now(), Valid: true},\n\t\t\t\t}}\n\t\t\t},\n\t\t\tmocks: func(m *InboxHandlerMocks, msgs []*database.InboxMessage, req *inboxv1.GetInboxMessagesRequest) {\n\t\t\t\tm.providers.EXPECT().LookupProvider(mock.Anything, req.GetProviderId()).Return(&database.Provider{\n\t\t\t\t\tID: req.ProviderId.GetId(),\n\t\t\t\t}, nil)\n\n\t\t\t\tm.db.EXPECT().GetInboxMessages(mock.Anything, database.GetInboxMessagesParams{\n\t\t\t\t\tRecipientID: req.RecipientId,\n\t\t\t\t\tProviderID:  req.GetProviderId().GetId(),\n\t\t\t\t\tTenantID:    req.TenantId,\n\t\t\t\t}).Return(msgs, nil)\n\t\t\t},\n\t\t\texpect: func(msgs []*database.InboxMessage) *inboxv1.GetInboxMessagesResponse {\n\t\t\t\tresp := &inboxv1.GetInboxMessagesResponse{Messages: make([]*inboxv1.InboxMessage, len(msgs))}\n\t\t\t\tfor i, m := range msgs {\n\t\t\t\t\tresp.Messages[i] = &inboxv1.InboxMessage{\n\t\t\t\t\t\tId:        m.NotificationID,\n\t\t\t\t\t\tTenantId:  m.TenantID,\n\t\t\t\t\t\tPriority:  notification.DBNotificationPriorityToProtoNotificationPriority[m.Priority],\n\t\t\t\t\t\tType:      \"fizz:buzz\",\n\t\t\t\t\t\tMessage:   m.Message,\n\t\t\t\t\t\tData:      m.Data,\n\t\t\t\t\t\tCreatedAt: timestamppb.New(m.CreatedAt.Time),\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn resp\n\t\t\t},\n\t\t\texpectErr: assert.NoError,\n\t\t},\n\t\t{\n\t\t\tname:     \"provider not found\",\n\t\t\trequest:  newGetInboxMessagesRequest(),\n\t\t\tmessages: func(_ *inboxv1.GetInboxMessagesRequest) []*database.InboxMessage { return nil },\n\t\t\tmocks: func(m *InboxHandlerMocks, _ []*database.InboxMessage, req *inboxv1.GetInboxMessagesRequest) {\n\t\t\t\tm.providers.EXPECT().LookupProvider(mock.Anything, req.GetProviderId()).Return(nil, pgx.ErrNoRows)\n\t\t\t},\n\t\t\texpect: func(_ []*database.InboxMessage) *inboxv1.GetInboxMessagesResponse {\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\texpectErr: func(tt assert.TestingT, err error, i ...any) bool {\n\t\t\t\treturn assert.Regexp(tt, `provider .* not found`, err.Error(), i...)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:     \"error getting provider\",\n\t\t\trequest:  newGetInboxMessagesRequest(),\n\t\t\tmessages: func(_ *inboxv1.GetInboxMessagesRequest) []*database.InboxMessage { return nil },\n\t\t\tmocks: func(m *InboxHandlerMocks, _ []*database.InboxMessage, req *inboxv1.GetInboxMessagesRequest) {\n\t\t\t\tm.providers.EXPECT().LookupProvider(mock.Anything, req.GetProviderId()).Return(nil, errors.New(\"foo\"))\n\t\t\t},\n\t\t\texpect: func(_ []*database.InboxMessage) *inboxv1.GetInboxMessagesResponse {\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\texpectErr: func(tt assert.TestingT, err error, i ...any) bool {\n\t\t\t\treturn assert.Contains(tt, err.Error(), \"failed to retrieve provider\", i...)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:    \"no inbox message rows\",\n\t\t\trequest: newGetInboxMessagesRequest(),\n\t\t\tmessages: func(_ *inboxv1.GetInboxMessagesRequest) []*database.InboxMessage {\n\t\t\t\treturn make([]*database.InboxMessage, 0)\n\t\t\t},\n\t\t\tmocks: func(m *InboxHandlerMocks, _ []*database.InboxMessage, req *inboxv1.GetInboxMessagesRequest) {\n\t\t\t\tm.providers.EXPECT().LookupProvider(mock.Anything, req.GetProviderId()).Return(&database.Provider{\n\t\t\t\t\tID: req.ProviderId.GetId(),\n\t\t\t\t}, nil)\n\n\t\t\t\tm.db.EXPECT().GetInboxMessages(mock.Anything, database.GetInboxMessagesParams{\n\t\t\t\t\tRecipientID: req.RecipientId,\n\t\t\t\t\tProviderID:  req.GetProviderId().GetId(),\n\t\t\t\t\tTenantID:    req.TenantId,\n\t\t\t\t}).Return(make([]*database.InboxMessage, 0), pgx.ErrNoRows)\n\t\t\t},\n\t\t\texpect: func(_ []*database.InboxMessage) *inboxv1.GetInboxMessagesResponse {\n\t\t\t\treturn &inboxv1.GetInboxMessagesResponse{\n\t\t\t\t\tMessages: make([]*inboxv1.InboxMessage, 0),\n\t\t\t\t}\n\t\t\t},\n\t\t\texpectErr: assert.NoError,\n\t\t},\n\t\t{\n\t\t\tname:    \"error getting messages\",\n\t\t\trequest: newGetInboxMessagesRequest(),\n\t\t\tmessages: func(_ *inboxv1.GetInboxMessagesRequest) []*database.InboxMessage {\n\t\t\t\treturn make([]*database.InboxMessage, 0)\n\t\t\t},\n\t\t\tmocks: func(m *InboxHandlerMocks, _ []*database.InboxMessage, req *inboxv1.GetInboxMessagesRequest) {\n\t\t\t\tm.providers.EXPECT().LookupProvider(mock.Anything, req.GetProviderId()).Return(&database.Provider{\n\t\t\t\t\tID: req.ProviderId.GetId(),\n\t\t\t\t}, nil)\n\n\t\t\t\tm.db.EXPECT().GetInboxMessages(mock.Anything, database.GetInboxMessagesParams{\n\t\t\t\t\tRecipientID: req.RecipientId,\n\t\t\t\t\tProviderID:  req.GetProviderId().GetId(),\n\t\t\t\t\tTenantID:    req.TenantId,\n\t\t\t\t}).Return(make([]*database.InboxMessage, 0), errors.New(\"error\"))\n\t\t\t},\n\t\t\texpect: func(_ []*database.InboxMessage) *inboxv1.GetInboxMessagesResponse {\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\texpectErr: func(tt assert.TestingT, err error, i ...any) bool {\n\t\t\t\treturn assert.Contains(tt, err.Error(), \"failed to get inbox messages\", i...)\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\ts.Run(tt.name, func() {\n\t\t\tmocks := s.NewMocks()\n\t\t\tmsgs := tt.messages(tt.request)\n\t\t\ttt.mocks(mocks, msgs, tt.request)\n\n\t\t\th := NewHandler(\n\t\t\t\tWithDatabaseQuerier(mocks.db),\n\t\t\t\tWithProvidersQuerier(mocks.providers),\n\t\t\t)\n\t\t\tresp, err := h.GetInboxMessages(context.Background(), connect.NewRequest(tt.request))\n\t\t\ttt.expectErr(s.T(), err)\n\t\t\tif resp != nil {\n\t\t\t\ts.Equal(tt.expect(msgs), resp.Msg)\n\t\t\t}\n\t\t})\n\t}\n}\n\n// nolint:unparam\nfunc newGetInboxMessagesRequest(opts ...func(*inboxv1.GetInboxMessagesRequest)) *inboxv1.GetInboxMessagesRequest {\n\treq := &inboxv1.GetInboxMessagesRequest{\n\t\tTenantId:    uuid.NewString(),\n\t\tRecipientId: uuid.NewString(),\n\t\tProviderId: &providerv1.LookupIdentity{\n\t\t\tIdentifier: &providerv1.LookupIdentity_Id{Id: uuid.NewString()},\n\t\t},\n\t}\n\n\tfor _, o := range opts {\n\t\to(req)\n\t}\n\n\treturn req\n}\n\nfunc TestInboxHandlerTestSuite(t *testing.T) {\n\tsuite.Run(t, new(InboxHandlerTestSuite))\n}\n```\n\nv1\n```go platform/apps/belfry/internal/service/inbox/v1/inbox.pb.go\n// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.34.1\n// \tprotoc        (unknown)\n// source: inbox/v1/inbox.proto\n\npackage inboxv1\n\nimport (\n\t_ \"buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate\"\n\tv11 \"github.com/immuta/platform/apps/belfry/internal/service/notification/v1\"\n\tv1 \"github.com/immuta/platform/apps/belfry/internal/service/provider/v1\"\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\ttimestamppb \"google.golang.org/protobuf/types/known/timestamppb\"\n\treflect \"reflect\"\n\tsync \"sync\"\n)\n\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)\n\ntype GetInboxMessagesRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tTenantId    string             `protobuf:\"bytes,1,opt,name=tenant_id,json=tenantId,proto3\" json:\"tenant_id,omitempty\"`\n\tRecipientId string             `protobuf:\"bytes,2,opt,name=recipient_id,json=recipientId,proto3\" json:\"recipient_id,omitempty\"`\n\tProviderId  *v1.LookupIdentity `protobuf:\"bytes,3,opt,name=provider_id,json=providerId,proto3\" json:\"provider_id,omitempty\"`\n}\n\nfunc (x *GetInboxMessagesRequest) Reset() {\n\t*x = GetInboxMessagesRequest{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_inbox_v1_inbox_proto_msgTypes[0]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *GetInboxMessagesRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetInboxMessagesRequest) ProtoMessage() {}\n\nfunc (x *GetInboxMessagesRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_inbox_v1_inbox_proto_msgTypes[0]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetInboxMessagesRequest.ProtoReflect.Descriptor instead.\nfunc (*GetInboxMessagesRequest) Descriptor() ([]byte, []int) {\n\treturn file_inbox_v1_inbox_proto_rawDescGZIP(), []int{0}\n}\n\nfunc (x *GetInboxMessagesRequest) GetTenantId() string {\n\tif x != nil {\n\t\treturn x.TenantId\n\t}\n\treturn \"\"\n}\n\nfunc (x *GetInboxMessagesRequest) GetRecipientId() string {\n\tif x != nil {\n\t\treturn x.RecipientId\n\t}\n\treturn \"\"\n}\n\nfunc (x *GetInboxMessagesRequest) GetProviderId() *v1.LookupIdentity {\n\tif x != nil {\n\t\treturn x.ProviderId\n\t}\n\treturn nil\n}\n\ntype GetInboxMessagesResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tMessages []*InboxMessage `protobuf:\"bytes,1,rep,name=messages,proto3\" json:\"messages,omitempty\"`\n}\n\nfunc (x *GetInboxMessagesResponse) Reset() {\n\t*x = GetInboxMessagesResponse{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_inbox_v1_inbox_proto_msgTypes[1]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *GetInboxMessagesResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetInboxMessagesResponse) ProtoMessage() {}\n\nfunc (x *GetInboxMessagesResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_inbox_v1_inbox_proto_msgTypes[1]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetInboxMessagesResponse.ProtoReflect.Descriptor instead.\nfunc (*GetInboxMessagesResponse) Descriptor() ([]byte, []int) {\n\treturn file_inbox_v1_inbox_proto_rawDescGZIP(), []int{1}\n}\n\nfunc (x *GetInboxMessagesResponse) GetMessages() []*InboxMessage {\n\tif x != nil {\n\t\treturn x.Messages\n\t}\n\treturn nil\n}\n\ntype InboxMessage struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId        string                   `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tTenantId  string                   `protobuf:\"bytes,2,opt,name=tenant_id,json=tenantId,proto3\" json:\"tenant_id,omitempty\"`\n\tPriority  v11.NotificationPriority `protobuf:\"varint,3,opt,name=priority,proto3,enum=immuta.platform.notifications.notification.v1.NotificationPriority\" json:\"priority,omitempty\"`\n\tType      string                   `protobuf:\"bytes,4,opt,name=type,proto3\" json:\"type,omitempty\"`\n\tMessage   string                   `protobuf:\"bytes,5,opt,name=message,proto3\" json:\"message,omitempty\"`\n\tData      map[string]string        `protobuf:\"bytes,6,rep,name=data,proto3\" json:\"data,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tCreatedAt *timestamppb.Timestamp   `protobuf:\"bytes,7,opt,name=created_at,json=createdAt,proto3\" json:\"created_at,omitempty\"`\n}\n\nfunc (x *InboxMessage) Reset() {\n\t*x = InboxMessage{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_inbox_v1_inbox_proto_msgTypes[2]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *InboxMessage) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*InboxMessage) ProtoMessage() {}\n\nfunc (x *InboxMessage) ProtoReflect() protoreflect.Message {\n\tmi := &file_inbox_v1_inbox_proto_msgTypes[2]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use InboxMessage.ProtoReflect.Descriptor instead.\nfunc (*InboxMessage) Descriptor() ([]byte, []int) {\n\treturn file_inbox_v1_inbox_proto_rawDescGZIP(), []int{2}\n}\n\nfunc (x *InboxMessage) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *InboxMessage) GetTenantId() string {\n\tif x != nil {\n\t\treturn x.TenantId\n\t}\n\treturn \"\"\n}\n\nfunc (x *InboxMessage) GetPriority() v11.NotificationPriority {\n\tif x != nil {\n\t\treturn x.Priority\n\t}\n\treturn v11.NotificationPriority(0)\n}\n\nfunc (x *InboxMessage) GetType() string {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn \"\"\n}\n\nfunc (x *InboxMessage) GetMessage() string {\n\tif x != nil {\n\t\treturn x.Message\n\t}\n\treturn \"\"\n}\n\nfunc (x *InboxMessage) GetData() map[string]string {\n\tif x != nil {\n\t\treturn x.Data\n\t}\n\treturn nil\n}\n\nfunc (x *InboxMessage) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\n\nvar File_inbox_v1_inbox_proto protoreflect.FileDescriptor\n\nvar file_inbox_v1_inbox_proto_rawDesc = []byte{\n\t0x0a, 0x14, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x62, 0x6f, 0x78,\n\t0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70,\n\t0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x76, 0x31, 0x1a, 0x1b,\n\t0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,\n\t0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,\n\t0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,\n\t0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6e, 0x6f,\n\t0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f,\n\t0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,\n\t0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,\n\t0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x01, 0x0a,\n\t0x17, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,\n\t0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61,\n\t0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08,\n\t0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,\n\t0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f,\n\t0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01,\n\t0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,\n\t0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69,\n\t0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61,\n\t0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,\n\t0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,\n\t0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,\n\t0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6c,\n\t0x0a, 0x18, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,\n\t0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x6d, 0x65,\n\t0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69,\n\t0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e,\n\t0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x69, 0x6e, 0x62,\n\t0x6f, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61,\n\t0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xc6, 0x03, 0x0a,\n\t0x0c, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,\n\t0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01,\n\t0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x74, 0x65,\n\t0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba,\n\t0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,\n\t0x6e, 0x74, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,\n\t0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e,\n\t0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,\n\t0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x08, 0xba, 0x48, 0x05,\n\t0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,\n\t0x1a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,\n\t0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x6d,\n\t0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,\n\t0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x52, 0x0a,\n\t0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x69, 0x6d,\n\t0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f,\n\t0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x69, 0x6e, 0x62, 0x6f,\n\t0x78, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,\n\t0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74,\n\t0x61, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,\n\t0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,\n\t0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,\n\t0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x37, 0x0a, 0x09,\n\t0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,\n\t0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,\n\t0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,\n\t0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xa6, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x53,\n\t0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x6e,\n\t0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3f, 0x2e, 0x69, 0x6d,\n\t0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f,\n\t0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x69, 0x6e, 0x62, 0x6f,\n\t0x78, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73,\n\t0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x69,\n\t0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e,\n\t0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x69, 0x6e, 0x62,\n\t0x6f, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x4d, 0x65,\n\t0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xbf,\n\t0x02, 0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c,\n\t0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x49,\n\t0x6e, 0x62, 0x6f, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x67, 0x69, 0x74,\n\t0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2f, 0x70,\n\t0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x62, 0x65, 0x6c,\n\t0x66, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72,\n\t0x76, 0x69, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x2f, 0x76, 0x31, 0x3b, 0x69, 0x6e,\n\t0x62, 0x6f, 0x78, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x49, 0x50, 0x4e, 0x49, 0xaa, 0x02, 0x26, 0x49,\n\t0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4e,\n\t0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x62,\n\t0x6f, 0x78, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x26, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x5c, 0x50,\n\t0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5c, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x5c, 0x56, 0x31, 0xe2, 0x02,\n\t0x32, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x5c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,\n\t0x5c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5c, 0x49,\n\t0x6e, 0x62, 0x6f, 0x78, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,\n\t0x61, 0x74, 0x61, 0xea, 0x02, 0x2a, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x3a, 0x3a, 0x50, 0x6c,\n\t0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x3a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x3a, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x3a, 0x3a, 0x56, 0x31,\n\t0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,\n}\n\nvar (\n\tfile_inbox_v1_inbox_proto_rawDescOnce sync.Once\n\tfile_inbox_v1_inbox_proto_rawDescData = file_inbox_v1_inbox_proto_rawDesc\n)\n\nfunc file_inbox_v1_inbox_proto_rawDescGZIP() []byte {\n\tfile_inbox_v1_inbox_proto_rawDescOnce.Do(func() {\n\t\tfile_inbox_v1_inbox_proto_rawDescData = protoimpl.X.CompressGZIP(file_inbox_v1_inbox_proto_rawDescData)\n\t})\n\treturn file_inbox_v1_inbox_proto_rawDescData\n}\n\nvar file_inbox_v1_inbox_proto_msgTypes = make([]protoimpl.MessageInfo, 4)\nvar file_inbox_v1_inbox_proto_goTypes = []interface{}{\n\t(*GetInboxMessagesRequest)(nil),  // 0: immuta.platform.notifications.inbox.v1.GetInboxMessagesRequest\n\t(*GetInboxMessagesResponse)(nil), // 1: immuta.platform.notifications.inbox.v1.GetInboxMessagesResponse\n\t(*InboxMessage)(nil),             // 2: immuta.platform.notifications.inbox.v1.InboxMessage\n\tnil,                              // 3: immuta.platform.notifications.inbox.v1.InboxMessage.DataEntry\n\t(*v1.LookupIdentity)(nil),        // 4: immuta.platform.notifications.provider.v1.LookupIdentity\n\t(v11.NotificationPriority)(0),    // 5: immuta.platform.notifications.notification.v1.NotificationPriority\n\t(*timestamppb.Timestamp)(nil),    // 6: google.protobuf.Timestamp\n}\nvar file_inbox_v1_inbox_proto_depIdxs = []int32{\n\t4, // 0: immuta.platform.notifications.inbox.v1.GetInboxMessagesRequest.provider_id:type_name -> immuta.platform.notifications.provider.v1.LookupIdentity\n\t2, // 1: immuta.platform.notifications.inbox.v1.GetInboxMessagesResponse.messages:type_name -> immuta.platform.notifications.inbox.v1.InboxMessage\n\t5, // 2: immuta.platform.notifications.inbox.v1.InboxMessage.priority:type_name -> immuta.platform.notifications.notification.v1.NotificationPriority\n\t3, // 3: immuta.platform.notifications.inbox.v1.InboxMessage.data:type_name -> immuta.platform.notifications.inbox.v1.InboxMessage.DataEntry\n\t6, // 4: immuta.platform.notifications.inbox.v1.InboxMessage.created_at:type_name -> google.protobuf.Timestamp\n\t0, // 5: immuta.platform.notifications.inbox.v1.InboxService.GetInboxMessages:input_type -> immuta.platform.notifications.inbox.v1.GetInboxMessagesRequest\n\t1, // 6: immuta.platform.notifications.inbox.v1.InboxService.GetInboxMessages:output_type -> immuta.platform.notifications.inbox.v1.GetInboxMessagesResponse\n\t6, // [6:7] is the sub-list for method output_type\n\t5, // [5:6] is the sub-list for method input_type\n\t5, // [5:5] is the sub-list for extension type_name\n\t5, // [5:5] is the sub-list for extension extendee\n\t0, // [0:5] is the sub-list for field type_name\n}\n\nfunc init() { file_inbox_v1_inbox_proto_init() }\nfunc file_inbox_v1_inbox_proto_init() {\n\tif File_inbox_v1_inbox_proto != nil {\n\t\treturn\n\t}\n\tif !protoimpl.UnsafeEnabled {\n\t\tfile_inbox_v1_inbox_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*GetInboxMessagesRequest); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_inbox_v1_inbox_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*GetInboxMessagesResponse); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_inbox_v1_inbox_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*InboxMessage); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t}\n\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: file_inbox_v1_inbox_proto_rawDesc,\n\t\t\tNumEnums:      0,\n\t\t\tNumMessages:   4,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   1,\n\t\t},\n\t\tGoTypes:           file_inbox_v1_inbox_proto_goTypes,\n\t\tDependencyIndexes: file_inbox_v1_inbox_proto_depIdxs,\n\t\tMessageInfos:      file_inbox_v1_inbox_proto_msgTypes,\n\t}.Build()\n\tFile_inbox_v1_inbox_proto = out.File\n\tfile_inbox_v1_inbox_proto_rawDesc = nil\n\tfile_inbox_v1_inbox_proto_goTypes = nil\n\tfile_inbox_v1_inbox_proto_depIdxs = nil\n}\n```\n\ninboxv1connect\n```go platform/apps/belfry/internal/service/inbox/v1/inboxv1connect/inbox.connect.go\n// Code generated by protoc-gen-connect-go. DO NOT EDIT.\n//\n// Source: inbox/v1/inbox.proto\n\npackage inboxv1connect\n\nimport (\n\tconnect \"connectrpc.com/connect\"\n\tcontext \"context\"\n\terrors \"errors\"\n\tv1 \"github.com/immuta/platform/apps/belfry/internal/service/inbox/v1\"\n\thttp \"net/http\"\n\tstrings \"strings\"\n)\n\n// This is a compile-time assertion to ensure that this generated file and the connect package are\n// compatible. If you get a compiler error that this constant is not defined, this code was\n// generated with a version of connect newer than the one compiled into your binary. You can fix the\n// problem by either regenerating this code with an older version of connect or updating the connect\n// version compiled into your binary.\nconst _ = connect.IsAtLeastVersion1_13_0\n\nconst (\n\t// InboxServiceName is the fully-qualified name of the InboxService service.\n\tInboxServiceName = \"immuta.platform.notifications.inbox.v1.InboxService\"\n)\n\n// These constants are the fully-qualified names of the RPCs defined in this package. They're\n// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.\n//\n// Note that these are different from the fully-qualified method names used by\n// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to\n// reflection-formatted method names, remove the leading slash and convert the remaining slash to a\n// period.\nconst (\n\t// InboxServiceGetInboxMessagesProcedure is the fully-qualified name of the InboxService's\n\t// GetInboxMessages RPC.\n\tInboxServiceGetInboxMessagesProcedure = \"/immuta.platform.notifications.inbox.v1.InboxService/GetInboxMessages\"\n)\n\n// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.\nvar (\n\tinboxServiceServiceDescriptor                = v1.File_inbox_v1_inbox_proto.Services().ByName(\"InboxService\")\n\tinboxServiceGetInboxMessagesMethodDescriptor = inboxServiceServiceDescriptor.Methods().ByName(\"GetInboxMessages\")\n)\n\n// InboxServiceClient is a client for the immuta.platform.notifications.inbox.v1.InboxService\n// service.\ntype InboxServiceClient interface {\n\tGetInboxMessages(context.Context, *connect.Request[v1.GetInboxMessagesRequest]) (*connect.Response[v1.GetInboxMessagesResponse], error)\n}\n\n// NewInboxServiceClient constructs a client for the\n// immuta.platform.notifications.inbox.v1.InboxService service. By default, it uses the Connect\n// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed\n// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or\n// connect.WithGRPCWeb() options.\n//\n// The URL supplied here should be the base URL for the Connect or gRPC server (for example,\n// http://api.acme.com or https://acme.com/grpc).\nfunc NewInboxServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InboxServiceClient {\n\tbaseURL = strings.TrimRight(baseURL, \"/\")\n\treturn &inboxServiceClient{\n\t\tgetInboxMessages: connect.NewClient[v1.GetInboxMessagesRequest, v1.GetInboxMessagesResponse](\n\t\t\thttpClient,\n\t\t\tbaseURL+InboxServiceGetInboxMessagesProcedure,\n\t\t\tconnect.WithSchema(inboxServiceGetInboxMessagesMethodDescriptor),\n\t\t\tconnect.WithClientOptions(opts...),\n\t\t),\n\t}\n}\n\n// inboxServiceClient implements InboxServiceClient.\ntype inboxServiceClient struct {\n\tgetInboxMessages *connect.Client[v1.GetInboxMessagesRequest, v1.GetInboxMessagesResponse]\n}\n\n// GetInboxMessages calls immuta.platform.notifications.inbox.v1.InboxService.GetInboxMessages.\nfunc (c *inboxServiceClient) GetInboxMessages(ctx context.Context, req *connect.Request[v1.GetInboxMessagesRequest]) (*connect.Response[v1.GetInboxMessagesResponse], error) {\n\treturn c.getInboxMessages.CallUnary(ctx, req)\n}\n\n// InboxServiceHandler is an implementation of the\n// immuta.platform.notifications.inbox.v1.InboxService service.\ntype InboxServiceHandler interface {\n\tGetInboxMessages(context.Context, *connect.Request[v1.GetInboxMessagesRequest]) (*connect.Response[v1.GetInboxMessagesResponse], error)\n}\n\n// NewInboxServiceHandler builds an HTTP handler from the service implementation. It returns the\n// path on which to mount the handler and the handler itself.\n//\n// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf\n// and JSON codecs. They also support gzip compression.\nfunc NewInboxServiceHandler(svc InboxServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {\n\tinboxServiceGetInboxMessagesHandler := connect.NewUnaryHandler(\n\t\tInboxServiceGetInboxMessagesProcedure,\n\t\tsvc.GetInboxMessages,\n\t\tconnect.WithSchema(inboxServiceGetInboxMessagesMethodDescriptor),\n\t\tconnect.WithHandlerOptions(opts...),\n\t)\n\treturn \"/immuta.platform.notifications.inbox.v1.InboxService/\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tswitch r.URL.Path {\n\t\tcase InboxServiceGetInboxMessagesProcedure:\n\t\t\tinboxServiceGetInboxMessagesHandler.ServeHTTP(w, r)\n\t\tdefault:\n\t\t\thttp.NotFound(w, r)\n\t\t}\n\t})\n}\n\n// UnimplementedInboxServiceHandler returns CodeUnimplemented from all methods.\ntype UnimplementedInboxServiceHandler struct{}\n\nfunc (UnimplementedInboxServiceHandler) GetInboxMessages(context.Context, *connect.Request[v1.GetInboxMessagesRequest]) (*connect.Response[v1.GetInboxMessagesResponse], error) {\n\treturn nil, connect.NewError(connect.CodeUnimplemented, errors.New(\"immuta.platform.notifications.inbox.v1.InboxService.GetInboxMessages is not implemented\"))\n}\n```\n\n\n\n\nnotification\n```go platform/apps/belfry/internal/service/notification/enums.go\npackage notification\n\nimport (\n\tnotificationv1 \"github.com/immuta/platform/apps/belfry/internal/service/notification/v1\"\n)\n\nvar (\n\tProtoNotificationPriorityToDBNotificationPriority = map[notificationv1.NotificationPriority]int32{\n\t\tnotificationv1.NotificationPriority_NOTIFICATION_PRIORITY_LOW:      0,\n\t\tnotificationv1.NotificationPriority_NOTIFICATION_PRIORITY_MEDIUM:   1,\n\t\tnotificationv1.NotificationPriority_NOTIFICATION_PRIORITY_HIGH:     2,\n\t\tnotificationv1.NotificationPriority_NOTIFICATION_PRIORITY_CRITICAL: 3,\n\t}\n\tDBNotificationPriorityToProtoNotificationPriority = map[int32]notificationv1.NotificationPriority{\n\t\t0: notificationv1.NotificationPriority_NOTIFICATION_PRIORITY_LOW,\n\t\t1: notificationv1.NotificationPriority_NOTIFICATION_PRIORITY_MEDIUM,\n\t\t2: notificationv1.NotificationPriority_NOTIFICATION_PRIORITY_HIGH,\n\t\t3: notificationv1.NotificationPriority_NOTIFICATION_PRIORITY_CRITICAL,\n\t}\n)\n```\n\n```go platform/apps/belfry/internal/service/notification/notification.go\npackage notification\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"log/slog\"\n\t\"net/http\"\n\t\"text/template\"\n\n\t\"connectrpc.com/connect\"\n\t\"github.com/jackc/pgx/v5\"\n\t\"google.golang.org/protobuf/types/known/timestamppb\"\n\n\t\"github.com/immuta/platform/apps/belfry/internal/database\"\n\t\"github.com/immuta/platform/apps/belfry/internal/database/querier\"\n\t\"github.com/immuta/platform/apps/belfry/internal/service\"\n\tnotificationv1 \"github.com/immuta/platform/apps/belfry/internal/service/notification/v1\"\n\t\"github.com/immuta/platform/apps/belfry/internal/service/notification/v1/notificationv1connect\"\n)\n\nvar ErrProcessingNotification = errors.New(\"failed to process notification for delivery\")\n\ntype Handler struct {\n\tdb              database.Querier\n\tnotifications   querier.NotificationQuerier\n\tproviders       querier.ProviderQuerier\n\tdeliveryChannel chan<- string\n\toptions         []connect.HandlerOption\n}\n\nfunc WithConnectHandlerOptions(opts ...connect.HandlerOption) service.Option[*Handler] {\n\treturn func(h *Handler) {\n\t\th.options = opts\n\t}\n}\n\nfunc WithDatabaseQuerier(db database.Querier) service.Option[*Handler] {\n\treturn func(h *Handler) {\n\t\th.db = db\n\t}\n}\n\nfunc WithNotificationsQuerier(nq querier.NotificationQuerier) service.Option[*Handler] {\n\treturn func(h *Handler) {\n\t\th.notifications = nq\n\t}\n}\n\nfunc WithProvidersQuerier(pq querier.ProviderQuerier) service.Option[*Handler] {\n\treturn func(h *Handler) {\n\t\th.providers = pq\n\t}\n}\n\nfunc WithDeliveryChannel(ch chan<- string) service.Option[*Handler] {\n\treturn func(h *Handler) {\n\t\th.deliveryChannel = ch\n\t}\n}\n\nfunc NewHandler(opts ...service.Option[*Handler]) *Handler {\n\th := &Handler{}\n\n\tfor _, o := range opts {\n\t\to(h)\n\t}\n\n\treturn h\n}\n\nfunc (h *Handler) Register(router *http.ServeMux) {\n\trouter.Handle(notificationv1connect.NewNotificationServiceHandler(h, h.options...))\n}\n\nfunc (*Handler) Name() string {\n\treturn notificationv1connect.NotificationServiceName\n}\n\nfunc (h *Handler) CreateNotification(ctx context.Context,\n\treq *connect.Request[notificationv1.CreateNotificationRequest],\n) (*connect.Response[notificationv1.CreateNotificationResponse], error) {\n\ttpl, err := template.New(\"message\").Parse(req.Msg.GetMessage())\n\tif err != nil {\n\t\tslog.Error(\"unable to create template from notification message\", \"err\", err)\n\t\treturn nil, connect.NewError(connect.CodeInternal, ErrProcessingNotification)\n\t}\n\n\tvar (\n\t\tdata = req.Msg.GetData()\n\t\tmsg  bytes.Buffer\n\t)\n\tif err := tpl.Execute(&msg, data); err != nil {\n\t\tslog.Error(\"unable to execute notification message template\", \"err\", err)\n\t\treturn nil, connect.NewError(connect.CodeInternal, ErrProcessingNotification)\n\t}\n\n\tt, err := h.notifications.LookupType(ctx, req.Msg.Type)\n\tif err != nil {\n\t\tslog.Error(\"error looking up notification type\", \"err\", err, \"id\", req.Msg.Type)\n\t\tif errors.Is(err, pgx.ErrNoRows) {\n\t\t\treturn nil, connect.NewError(connect.CodeNotFound, fmt.Errorf(\"notification type %s not found\", req.Msg.Type))\n\t\t}\n\n\t\treturn nil, connect.NewError(connect.CodeInternal, ErrProcessingNotification)\n\t}\n\n\tparams := database.CreateNotificationParams{\n\t\tTenantID:     req.Msg.GetTenantId(),\n\t\tMessage:      msg.String(),\n\t\tPriority:     ProtoNotificationPriorityToDBNotificationPriority[req.Msg.GetPriority()],\n\t\tTypeID:       t.ID,\n\t\tRecipientIds: []string{},\n\t\tProviderIds:  []string{},\n\t\tData:         data,\n\t}\n\n\tfor _, r := range req.Msg.GetRecipients() {\n\t\tparams.RecipientIds = append(params.RecipientIds, r.GetId())\n\t}\n\n\tfor _, id := range req.Msg.Inboxes {\n\t\tp, err := h.providers.LookupProvider(ctx, id)\n\t\tif err != nil {\n\t\t\tslog.Error(\"error looking up inbox provider when creating notification\", \"err\", err, \"id\", id)\n\t\t\tif errors.Is(err, pgx.ErrNoRows) {\n\t\t\t\treturn nil, connect.NewError(connect.CodeNotFound, fmt.Errorf(\"inbox %s not found\", id))\n\t\t\t}\n\n\t\t\treturn nil, connect.NewError(connect.CodeInternal, ErrProcessingNotification)\n\t\t}\n\n\t\tparams.ProviderIds = append(params.ProviderIds, p.ID)\n\t}\n\n\tn, err := h.db.CreateNotification(ctx, params)\n\tif err != nil {\n\t\tslog.Error(\"error writing notification to database\", \"err\", err)\n\t\treturn nil, connect.NewError(connect.CodeInternal, ErrProcessingNotification)\n\t}\n\n\t// Send notification id to delivery channel to be sent to providers\n\th.deliveryChannel <- n.ID\n\n\treturn connect.NewResponse(&notificationv1.CreateNotificationResponse{\n\t\tId: n.ID,\n\t}), nil\n}\n\nfunc (h *Handler) GetNotification(ctx context.Context,\n\treq *connect.Request[notificationv1.GetNotificationRequest],\n) (*connect.Response[notificationv1.GetNotificationResponse], error) {\n\tn, err := h.db.GetNotification(ctx, req.Msg.GetId())\n\tif err != nil {\n\t\tif errors.Is(err, pgx.ErrNoRows) {\n\t\t\treturn nil, connect.NewError(connect.CodeNotFound, fmt.Errorf(\"notification %s not found\", req.Msg.GetId()))\n\t\t}\n\n\t\tslog.Error(\"failed to get notification\", \"err\", err)\n\t\treturn nil, connect.NewError(connect.CodeInternal, errors.New(\"unable to retrieve notification\"))\n\t}\n\n\treturn connect.NewResponse(&notificationv1.GetNotificationResponse{\n\t\tNotification: &notificationv1.Notification{\n\t\t\tId:        n.ID,\n\t\t\tTenantId:  n.TenantID,\n\t\t\tPriority:  DBNotificationPriorityToProtoNotificationPriority[n.Priority],\n\t\t\tType:      n.Type,\n\t\t\tMessage:   n.Message,\n\t\t\tCreatedAt: timestamppb.New(n.CreatedAt.Time),\n\t\t\tData:      n.Data,\n\t\t\tStatus:    string(n.Status),\n\t\t},\n\t}), nil\n}\n```\n\n```go platform/apps/belfry/internal/service/notification/notification_test.go\npackage notification\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"connectrpc.com/connect\"\n\t\"github.com/google/uuid\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/mock\"\n\t\"github.com/stretchr/testify/suite\"\n\t\"google.golang.org/protobuf/types/known/timestamppb\"\n\n\t\"github.com/immuta/platform/apps/belfry/internal/database\"\n\tdbmocks \"github.com/immuta/platform/apps/belfry/internal/database/mocks\"\n\t\"github.com/immuta/platform/apps/belfry/internal/database/querier/mocks\"\n\tnotificationv1 \"github.com/immuta/platform/apps/belfry/internal/service/notification/v1\"\n\tproviderv1 \"github.com/immuta/platform/apps/belfry/internal/service/provider/v1\"\n)\n\ntype NotificationHandlerMocks struct {\n\tdb            *dbmocks.MockQuerier\n\tnotifications *mocks.MockNotificationQuerier\n\tproviders     *mocks.MockProviderQuerier\n}\n\nfunc (s *NotificationHandlerTestSuite) NewMocks() *NotificationHandlerMocks {\n\treturn &NotificationHandlerMocks{\n\t\tdb:            dbmocks.NewMockQuerier(s.T()),\n\t\tnotifications: mocks.NewMockNotificationQuerier(s.T()),\n\t\tproviders:     mocks.NewMockProviderQuerier(s.T()),\n\t}\n}\n\ntype NotificationHandlerTestSuite struct {\n\tsuite.Suite\n}\n\nfunc (s *NotificationHandlerTestSuite) TestCreateNotification() {\n\ttests := []struct {\n\t\tname         string\n\t\tnotification *database.GetNotificationRow\n\t\trequest      *notificationv1.CreateNotificationRequest\n\t\tmocks        func(*NotificationHandlerMocks, *database.GetNotificationRow, *notificationv1.CreateNotificationRequest)\n\t\texpectErr    assert.ErrorAssertionFunc\n\t}{\n\t\t{\n\t\t\tname:         \"default\",\n\t\t\tnotification: newTestNotificationRow[database.GetNotificationRow](),\n\t\t\trequest:      newCreateNotificationRequest(),\n\t\t\tmocks: func(m *NotificationHandlerMocks, n *database.GetNotificationRow, req *notificationv1.CreateNotificationRequest) {\n\t\t\t\tparams := database.CreateNotificationParams{\n\t\t\t\t\tTenantID:     req.TenantId,\n\t\t\t\t\tRecipientIds: []string{},\n\t\t\t\t\tProviderIds:  []string{},\n\t\t\t\t\tMessage:      req.Message,\n\t\t\t\t\tPriority:     0,\n\t\t\t\t\tTypeID:       uuid.NewString(),\n\t\t\t\t\tData:         req.Data,\n\t\t\t\t}\n\n\t\t\t\tfor _, r := range req.Recipients {\n\t\t\t\t\tparams.RecipientIds = append(params.RecipientIds, r.Id)\n\t\t\t\t}\n\n\t\t\t\tfor range req.Inboxes {\n\t\t\t\t\tpid := uuid.NewString()\n\n\t\t\t\t\tparams.ProviderIds = append(params.ProviderIds, pid)\n\n\t\t\t\t\tm.providers.EXPECT().LookupProvider(mock.Anything, &providerv1.LookupIdentity{\n\t\t\t\t\t\tIdentifier: &providerv1.LookupIdentity_Name{Name: \"inbox:foo\"},\n\t\t\t\t\t}).Return(&database.Provider{\n\t\t\t\t\t\tID:                pid,\n\t\t\t\t\t\tType:              database.ProviderTypeInbox,\n\t\t\t\t\t\tName:              \"foo\",\n\t\t\t\t\t\tWorkflowTaskQueue: \"bar\",\n\t\t\t\t\t\tWorkflowName:      \"foo\",\n\t\t\t\t\t}, nil)\n\t\t\t\t}\n\n\t\t\t\tm.notifications.EXPECT().LookupType(mock.Anything, &notificationv1.NotificationTypeIdentity{\n\t\t\t\t\tIdentifier: &notificationv1.NotificationTypeIdentity_Name{Name: \"fizz:buzz\"},\n\t\t\t\t}).Return(&database.NotificationType{\n\t\t\t\t\tID:       params.TypeID,\n\t\t\t\t\tName:     \"fizz\",\n\t\t\t\t\tCategory: \"buzz\",\n\t\t\t\t}, nil)\n\n\t\t\t\tm.db.EXPECT().CreateNotification(mock.Anything, params).Return(&database.Notification{\n\t\t\t\t\tID: n.ID,\n\t\t\t\t}, nil)\n\t\t\t},\n\t\t\texpectErr: assert.NoError,\n\t\t},\n\t\t{\n\t\t\tname:         \"templated message\",\n\t\t\tnotification: newTestNotificationRow[database.GetNotificationRow](),\n\t\t\trequest: newCreateNotificationRequest(func(req *notificationv1.CreateNotificationRequest) {\n\t\t\t\treq.Message = \"hello, {{ .foo }}\"\n\t\t\t\treq.Data = map[string]string{\"foo\": \"bar\"}\n\t\t\t}),\n\t\t\tmocks: func(m *NotificationHandlerMocks, n *database.GetNotificationRow, req *notificationv1.CreateNotificationRequest) {\n\t\t\t\tparams := database.CreateNotificationParams{\n\t\t\t\t\tTenantID:     req.TenantId,\n\t\t\t\t\tRecipientIds: []string{},\n\t\t\t\t\tProviderIds:  []string{},\n\t\t\t\t\tMessage:      \"hello, bar\",\n\t\t\t\t\tPriority:     0,\n\t\t\t\t\tTypeID:       uuid.NewString(),\n\t\t\t\t\tData:         req.Data,\n\t\t\t\t}\n\n\t\t\t\tfor _, r := range req.Recipients {\n\t\t\t\t\tparams.RecipientIds = append(params.RecipientIds, r.Id)\n\t\t\t\t}\n\n\t\t\t\tfor range req.Inboxes {\n\t\t\t\t\tpid := uuid.NewString()\n\n\t\t\t\t\tparams.ProviderIds = append(params.ProviderIds, pid)\n\n\t\t\t\t\tm.providers.EXPECT().LookupProvider(mock.Anything, &providerv1.LookupIdentity{\n\t\t\t\t\t\tIdentifier: &providerv1.LookupIdentity_Name{Name: \"inbox:foo\"},\n\t\t\t\t\t}).Return(&database.Provider{\n\t\t\t\t\t\tID:                pid,\n\t\t\t\t\t\tType:              database.ProviderTypeInbox,\n\t\t\t\t\t\tName:              \"foo\",\n\t\t\t\t\t\tWorkflowTaskQueue: \"bar\",\n\t\t\t\t\t\tWorkflowName:      \"foo\",\n\t\t\t\t\t}, nil)\n\t\t\t\t}\n\n\t\t\t\tm.notifications.EXPECT().LookupType(mock.Anything, &notificationv1.NotificationTypeIdentity{\n\t\t\t\t\tIdentifier: &notificationv1.NotificationTypeIdentity_Name{Name: \"fizz:buzz\"},\n\t\t\t\t}).Return(&database.NotificationType{\n\t\t\t\t\tID:       params.TypeID,\n\t\t\t\t\tName:     \"fizz\",\n\t\t\t\t\tCategory: \"buzz\",\n\t\t\t\t}, nil)\n\n\t\t\t\tm.db.EXPECT().CreateNotification(mock.Anything, params).Return(&database.Notification{\n\t\t\t\t\tID: n.ID,\n\t\t\t\t}, nil)\n\t\t\t},\n\t\t\texpectErr: assert.NoError,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\ttt := tt\n\t\ts.Run(tt.name, func() {\n\t\t\tmocks := s.NewMocks()\n\t\t\ttt.mocks(mocks, tt.notification, tt.request)\n\n\t\t\tch := make(chan string, 1)\n\t\t\tdefer close(ch)\n\n\t\t\tsvc := NewHandler(\n\t\t\t\tWithDatabaseQuerier(mocks.db),\n\t\t\t\tWithNotificationsQuerier(mocks.notifications),\n\t\t\t\tWithProvidersQuerier(mocks.providers),\n\t\t\t\tWithDeliveryChannel(ch),\n\t\t\t)\n\t\t\tn, err := svc.CreateNotification(context.Background(), connect.NewRequest(tt.request))\n\t\t\ttt.expectErr(s.T(), err)\n\n\t\t\tid := <-ch\n\t\t\ts.Equal(n.Msg.Id, id)\n\t\t})\n\t}\n}\n\nfunc (s *NotificationHandlerTestSuite) TestGet() {\n\ttests := []struct {\n\t\tname         string\n\t\tnotification *database.GetNotificationRow\n\t\tmocks        func(*NotificationHandlerMocks, *database.GetNotificationRow)\n\t\texpect       func(*database.GetNotificationRow) *notificationv1.GetNotificationResponse\n\t\texpectErr    assert.ErrorAssertionFunc\n\t}{\n\t\t{\n\t\t\tname:         \"default\",\n\t\t\tnotification: newTestNotificationRow[database.GetNotificationRow](),\n\t\t\tmocks: func(m *NotificationHandlerMocks, n *database.GetNotificationRow) {\n\t\t\t\tm.db.EXPECT().GetNotification(mock.Anything, n.ID).Return(n, nil)\n\t\t\t},\n\t\t\texpect: func(n *database.GetNotificationRow) *notificationv1.GetNotificationResponse {\n\t\t\t\treturn &notificationv1.GetNotificationResponse{\n\t\t\t\t\tNotification: &notificationv1.Notification{\n\t\t\t\t\t\tId:        n.ID,\n\t\t\t\t\t\tTenantId:  n.TenantID,\n\t\t\t\t\t\tPriority:  1,\n\t\t\t\t\t\tType:      n.Type,\n\t\t\t\t\t\tMessage:   n.Message,\n\t\t\t\t\t\tData:      n.Data,\n\t\t\t\t\t\tStatus:    \"created\",\n\t\t\t\t\t\tCreatedAt: timestamppb.New(n.CreatedAt.Time),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t\texpectErr: assert.NoError,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\ttt := tt\n\t\ts.Run(tt.name, func() {\n\t\t\tmocks := s.NewMocks()\n\t\t\ttt.mocks(mocks, tt.notification)\n\n\t\t\tresp, err := NewHandler(WithDatabaseQuerier(mocks.db)).\n\t\t\t\tGetNotification(context.Background(), connect.NewRequest(&notificationv1.GetNotificationRequest{\n\t\t\t\t\tId: tt.notification.ID,\n\t\t\t\t}))\n\t\t\ttt.expectErr(s.T(), err)\n\t\t\ts.Equal(tt.expect(tt.notification), resp.Msg)\n\t\t})\n\t}\n}\n\nfunc TestNotificationHandlerTestSuite(t *testing.T) {\n\tsuite.Run(t, new(NotificationHandlerTestSuite))\n}\n```\n\n```go platform/apps/belfry/internal/service/notification/processor.go\npackage notification\n\nimport (\n\t\"context\"\n\t\"log/slog\"\n\t\"time\"\n\n\t\"github.com/immuta/platform/apps/belfry/internal/config\"\n\t\"github.com/immuta/platform/apps/belfry/internal/database\"\n)\n\ntype Processor struct {\n\tdb     database.Querier\n\tch     chan string\n\tconfig *config.Config\n}\n\nfunc NewProcessor(q database.Querier, cfg *config.Config) *Processor {\n\treturn &Processor{\n\t\tdb:     q,\n\t\tch:     make(chan string),\n\t\tconfig: cfg,\n\t}\n}\n\nfunc (p *Processor) Channel() chan string {\n\treturn p.ch\n}\n\nfunc (p *Processor) Start(ctx context.Context) {\n\ttickIncomplete := time.NewTicker(p.config.Notifications.RetryInterval)\n\n\tfor {\n\t\tselect {\n\t\tcase req := <-p.ch:\n\t\t\tgo p.deliverNotification(ctx, req)\n\t\tcase <-tickIncomplete.C:\n\t\t\tgo p.processPending(ctx)\n\t\tcase <-ctx.Done():\n\t\t\tclose(p.ch)\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc (p *Processor) processPending(ctx context.Context) {\n\tns, err := p.db.GetNotificationsByStatus(ctx, database.NotificationStatusCreated)\n\tif err != nil {\n\t\tslog.Error(\"failed to get notifications pending delivery\", \"err\", err)\n\t\treturn\n\t}\n\n\tfor _, n := range ns {\n\t\tp.ch <- n.ID\n\t}\n}\n\nfunc (p *Processor) deliverNotification(ctx context.Context, id string) {\n\tn, err := p.db.GetNotification(ctx, id)\n\tif err != nil {\n\t\tslog.Error(\"unable to get notification\", \"err\", err)\n\t\treturn\n\t}\n\n\tif n.Status != database.NotificationStatusCreated {\n\t\tslog.Warn(\"delivery requested for processed notification; skipping\",\n\t\t\t\"notification_id\", n.ID, \"notification_status\", n.Status)\n\t\treturn\n\t}\n\n\tdeliveries, err := p.db.CreateDeliveriesForNotification(ctx, n.ID)\n\tif err != nil {\n\t\tslog.Error(\"failed to create deliveries for notification\", \"err\", err)\n\t\treturn\n\t}\n\n\tfor _, d := range deliveries {\n\t\tif err := p.deliver(ctx, d); err != nil {\n\t\t\tslog.Error(\"failed to deliver notification\", \"err\", err)\n\t\t\treturn\n\t\t}\n\t}\n\n\tif err := p.db.UpdateNotificationStatus(ctx, database.UpdateNotificationStatusParams{\n\t\tID:     n.ID,\n\t\tStatus: database.NotificationStatusProcessed,\n\t}); err != nil {\n\t\tslog.Error(\"failed to update notification status\", \"err\", err)\n\t}\n}\n\nfunc (p *Processor) deliver(ctx context.Context, d *database.Delivery) error {\n\t// Don't redeliver a successful delivery\n\tif d.Status == database.DeliveryStatusDelivered {\n\t\tslog.Warn(\"notification attempted delivery that's already delivered\")\n\t\treturn nil\n\t}\n\n\tpv, err := p.db.GetProvider(ctx, d.ProviderID)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Inbox providers are pseudo-providers: inbox messages available\n\t// through the InboxService based on inbox_messages view.\n\tif pv.Type == database.ProviderTypeInbox {\n\t\tslog.Info(\"notification sent to inbox\", \"notification\", d.NotificationID, \"inbox_name\", pv.Name)\n\t\treturn nil\n\t}\n\n\tif pv.WorkflowName == \"\" || pv.WorkflowTaskQueue == \"\" {\n\t\tslog.Warn(\"notification attempted delivery with undefined worklow configuration\", \"provider\", *pv)\n\t\treturn nil\n\t}\n\n\t// nolint:godox // this is a reminder for future development to deliver phase 1\n\t// TODO: Dedupe notification triggering with Temporal\n\t// https://docs.temporal.io/develop/go/temporal-clients\n\n\t// nolint:godox // this is a reminder for future development to deliver phase 1\n\t// TODO: Deliver to real providers\n\tslog.Info(\"sending notification to provider\", \"notification\", d.NotificationID, \"provider_name\", pv.Name)\n\treturn nil\n}\n```\n\n```go platform/apps/belfry/internal/service/notification/processor_test.go\npackage notification\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"testing\"\n\n\t\"github.com/google/uuid\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/mock\"\n\t\"github.com/stretchr/testify/suite\"\n\n\t\"github.com/immuta/platform/apps/belfry/internal/config\"\n\t\"github.com/immuta/platform/apps/belfry/internal/database\"\n\t\"github.com/immuta/platform/apps/belfry/internal/database/mocks\"\n)\n\ntype ProcessorTestSuite struct {\n\tsuite.Suite\n\tdefaultConfig *config.Config\n}\n\nfunc (s *ProcessorTestSuite) SetupSuite() {\n\ts.defaultConfig = &config.Config{}\n}\n\nfunc (s *ProcessorTestSuite) Test_deliverNotification() {\n\ttests := []struct {\n\t\tname         string\n\t\tnotification *database.GetNotificationRow\n\t\tmocks        func(*mocks.MockQuerier, *database.GetNotificationRow)\n\t}{\n\t\t{\n\t\t\tname:         \"valid\",\n\t\t\tnotification: newTestNotificationRow[database.GetNotificationRow](),\n\t\t\tmocks: func(querier *mocks.MockQuerier, n *database.GetNotificationRow) {\n\t\t\t\tdeliveries := notificationDeliveries(n)\n\n\t\t\t\tquerier.EXPECT().GetNotification(mock.Anything, n.ID).Return(n, nil)\n\t\t\t\tquerier.EXPECT().CreateDeliveriesForNotification(mock.Anything, n.ID).Return(deliveries, nil)\n\t\t\t\tquerier.EXPECT().GetProvider(mock.Anything, mock.AnythingOfType(\"string\")).Return(&database.Provider{}, nil).Times(len(deliveries))\n\t\t\t\tquerier.EXPECT().UpdateNotificationStatus(mock.Anything, database.UpdateNotificationStatusParams{\n\t\t\t\t\tID:     n.ID,\n\t\t\t\t\tStatus: database.NotificationStatusProcessed,\n\t\t\t\t}).Return(nil)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:         \"failed to create deliveries\",\n\t\t\tnotification: newTestNotificationRow[database.GetNotificationRow](),\n\t\t\tmocks: func(querier *mocks.MockQuerier, n *database.GetNotificationRow) {\n\t\t\t\tquerier.EXPECT().GetNotification(mock.Anything, n.ID).Return(n, nil)\n\t\t\t\tquerier.EXPECT().CreateDeliveriesForNotification(mock.Anything, n.ID).Return(nil, errors.New(\"failed to create deliveries\"))\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"early return failed notification\",\n\t\t\tnotification: newTestNotificationRow(func(n *database.GetNotificationRow) {\n\t\t\t\tn.Status = database.NotificationStatusFailed\n\t\t\t}),\n\t\t\tmocks: func(querier *mocks.MockQuerier, n *database.GetNotificationRow) {\n\t\t\t\tquerier.EXPECT().GetNotification(mock.Anything, n.ID).Return(n, nil)\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\ttt := tt\n\t\ts.Run(tt.name, func() {\n\t\t\tquerier := mocks.NewMockQuerier(s.T())\n\n\t\t\tprocessor := Processor{\n\t\t\t\tdb:     querier,\n\t\t\t\tch:     make(chan string),\n\t\t\t\tconfig: s.defaultConfig,\n\t\t\t}\n\n\t\t\ttt.mocks(querier, tt.notification)\n\n\t\t\tprocessor.deliverNotification(context.Background(), tt.notification.ID)\n\t\t})\n\t}\n}\n\nfunc (s *ProcessorTestSuite) Test_deliver() {\n\ttests := []struct {\n\t\tname      string\n\t\tdelivery  *database.Delivery\n\t\tprovider  func(*database.Delivery) *database.Provider\n\t\tmocks     func(*mocks.MockQuerier, *database.Provider)\n\t\texpectErr assert.ErrorAssertionFunc\n\t}{\n\t\t{\n\t\t\tname:      \"already delivered\",\n\t\t\tdelivery:  &database.Delivery{Status: database.DeliveryStatusDelivered},\n\t\t\tprovider:  func(_ *database.Delivery) *database.Provider { return nil },\n\t\t\texpectErr: assert.NoError,\n\t\t},\n\t\t{\n\t\t\tname: \"inbox provider\",\n\t\t\tdelivery: &database.Delivery{\n\t\t\t\tStatus:     database.DeliveryStatusCreated,\n\t\t\t\tProviderID: uuid.NewString(),\n\t\t\t},\n\t\t\tprovider: func(d *database.Delivery) *database.Provider {\n\t\t\t\treturn &database.Provider{\n\t\t\t\t\tID:   d.ProviderID,\n\t\t\t\t\tType: database.ProviderTypeInbox,\n\t\t\t\t}\n\t\t\t},\n\t\t\tmocks: func(q *mocks.MockQuerier, p *database.Provider) {\n\t\t\t\tq.EXPECT().GetProvider(mock.Anything, p.ID).Return(p, nil)\n\t\t\t},\n\t\t\texpectErr: assert.NoError,\n\t\t},\n\t\t{\n\t\t\tname: \"no workflow configuration provided\",\n\t\t\tdelivery: &database.Delivery{\n\t\t\t\tStatus:     database.DeliveryStatusCreated,\n\t\t\t\tProviderID: uuid.NewString(),\n\t\t\t},\n\t\t\tprovider: func(d *database.Delivery) *database.Provider {\n\t\t\t\treturn &database.Provider{\n\t\t\t\t\tID:   d.ProviderID,\n\t\t\t\t\tType: database.ProviderTypeEmail,\n\t\t\t\t}\n\t\t\t},\n\t\t\tmocks: func(q *mocks.MockQuerier, p *database.Provider) {\n\t\t\t\tq.EXPECT().GetProvider(mock.Anything, p.ID).Return(p, nil)\n\t\t\t},\n\t\t\texpectErr: assert.NoError,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tquerier := mocks.NewMockQuerier(s.T())\n\t\tpv := tt.provider(tt.delivery)\n\t\tif tt.mocks != nil {\n\t\t\ttt.mocks(querier, pv)\n\t\t}\n\n\t\tprocessor := Processor{\n\t\t\tdb:     querier,\n\t\t\tch:     make(chan string),\n\t\t\tconfig: s.defaultConfig,\n\t\t}\n\n\t\ttt.expectErr(s.T(), processor.deliver(context.Background(), tt.delivery))\n\t}\n}\n\nfunc (s *ProcessorTestSuite) Test_processPending() {\n\tquerier := mocks.NewMockQuerier(s.T())\n\tn := newTestNotificationRow[database.GetNotificationsByStatusRow]()\n\n\tquerier.EXPECT().GetNotificationsByStatus(mock.Anything, database.NotificationStatusCreated).\n\t\tReturn([]*database.GetNotificationsByStatusRow{n}, nil)\n\n\tprocessor := Processor{\n\t\tdb:     querier,\n\t\tch:     make(chan string, 1),\n\t\tconfig: s.defaultConfig,\n\t}\n\n\tprocessor.processPending(context.Background())\n\ts.Equal(n.ID, <-processor.ch)\n}\n\nfunc TestProcessorTestSuite(t *testing.T) {\n\tsuite.Run(t, new(ProcessorTestSuite))\n}\n```\n\n```go platform/apps/belfry/internal/service/notification/testutils_test.go\npackage notification\n\nimport (\n\t\"time\"\n\n\t\"github.com/google/uuid\"\n\t\"github.com/jackc/pgx/v5/pgtype\"\n\n\t\"github.com/immuta/platform/apps/belfry/internal/database\"\n\tnotificationv1 \"github.com/immuta/platform/apps/belfry/internal/service/notification/v1\"\n\tproviderv1 \"github.com/immuta/platform/apps/belfry/internal/service/provider/v1\"\n)\n\nfunc newCreateNotificationRequest(opts ...func(*notificationv1.CreateNotificationRequest)) *notificationv1.CreateNotificationRequest {\n\treq := &notificationv1.CreateNotificationRequest{\n\t\tRecipients: []*notificationv1.Recipient{{\n\t\t\tId:   uuid.NewString(),\n\t\t\tType: notificationv1.RecipientType_RECIPIENT_TYPE_USER,\n\t\t}},\n\t\tTenantId: uuid.NewString(),\n\t\tPriority: notificationv1.NotificationPriority_NOTIFICATION_PRIORITY_LOW,\n\t\tType: &notificationv1.NotificationTypeIdentity{\n\t\t\tIdentifier: &notificationv1.NotificationTypeIdentity_Name{Name: \"fizz:buzz\"},\n\t\t},\n\t\tMessage: \"hello\",\n\t\tData:    nil,\n\t\tInboxes: []*providerv1.LookupIdentity{{\n\t\t\tIdentifier: &providerv1.LookupIdentity_Name{Name: \"inbox:foo\"},\n\t\t}},\n\t}\n\n\tfor _, o := range opts {\n\t\to(req)\n\t}\n\n\treturn req\n}\n\nfunc newTestNotificationRow[T database.GetNotificationRow | database.GetNotificationsByStatusRow](opts ...func(*T)) *T {\n\tn := &T{\n\t\tID:           uuid.NewString(),\n\t\tTenantID:     uuid.NewString(),\n\t\tRecipientIds: []string{uuid.NewString()},\n\t\tProviderIds:  []string{uuid.NewString()},\n\t\tMessage:      \"foo\",\n\t\tPriority:     0,\n\t\tTypeID:       uuid.NewString(),\n\t\tType:         \"fizz:buzz\",\n\t\tData:         nil,\n\t\tStatus:       database.NotificationStatusCreated,\n\t\tCreatedAt:    pgtype.Timestamp{Time: time.Now()},\n\t}\n\n\tfor _, o := range opts {\n\t\to(n)\n\t}\n\n\treturn n\n}\n\nfunc notificationDeliveries(n *database.GetNotificationRow) []*database.Delivery {\n\tvar deliveries []*database.Delivery\n\tfor _, rid := range n.RecipientIds {\n\t\tfor _, pid := range n.ProviderIds {\n\t\t\tdeliveries = append(deliveries, &database.Delivery{\n\t\t\t\tNotificationID: n.ID,\n\t\t\t\tRecipientID:    rid,\n\t\t\t\tProviderID:     pid,\n\t\t\t\tStatus:         database.DeliveryStatusCreated,\n\t\t\t})\n\t\t}\n\t}\n\n\treturn deliveries\n}\n```\n\nv1\n```go platform/apps/belfry/internal/service/notification/v1/notification.pb.go\n// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.34.1\n// \tprotoc        (unknown)\n// source: notification/v1/notification.proto\n\npackage notificationv1\n\nimport (\n\t_ \"buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate\"\n\tv1 \"github.com/immuta/platform/apps/belfry/internal/service/provider/v1\"\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\ttimestamppb \"google.golang.org/protobuf/types/known/timestamppb\"\n\treflect \"reflect\"\n\tsync \"sync\"\n)\n\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)\n\ntype NotificationPriority int32\n\nconst (\n\tNotificationPriority_NOTIFICATION_PRIORITY_UNSPECIFIED NotificationPriority = 0\n\tNotificationPriority_NOTIFICATION_PRIORITY_LOW         NotificationPriority = 1\n\tNotificationPriority_NOTIFICATION_PRIORITY_MEDIUM      NotificationPriority = 2\n\tNotificationPriority_NOTIFICATION_PRIORITY_HIGH        NotificationPriority = 3\n\tNotificationPriority_NOTIFICATION_PRIORITY_CRITICAL    NotificationPriority = 4\n)\n\n// Enum value maps for NotificationPriority.\nvar (\n\tNotificationPriority_name = map[int32]string{\n\t\t0: \"NOTIFICATION_PRIORITY_UNSPECIFIED\",\n\t\t1: \"NOTIFICATION_PRIORITY_LOW\",\n\t\t2: \"NOTIFICATION_PRIORITY_MEDIUM\",\n\t\t3: \"NOTIFICATION_PRIORITY_HIGH\",\n\t\t4: \"NOTIFICATION_PRIORITY_CRITICAL\",\n\t}\n\tNotificationPriority_value = map[string]int32{\n\t\t\"NOTIFICATION_PRIORITY_UNSPECIFIED\": 0,\n\t\t\"NOTIFICATION_PRIORITY_LOW\":         1,\n\t\t\"NOTIFICATION_PRIORITY_MEDIUM\":      2,\n\t\t\"NOTIFICATION_PRIORITY_HIGH\":        3,\n\t\t\"NOTIFICATION_PRIORITY_CRITICAL\":    4,\n\t}\n)\n\nfunc (x NotificationPriority) Enum() *NotificationPriority {\n\tp := new(NotificationPriority)\n\t*p = x\n\treturn p\n}\n\nfunc (x NotificationPriority) String() string {\n\treturn protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))\n}\n\nfunc (NotificationPriority) Descriptor() protoreflect.EnumDescriptor {\n\treturn file_notification_v1_notification_proto_enumTypes[0].Descriptor()\n}\n\nfunc (NotificationPriority) Type() protoreflect.EnumType {\n\treturn &file_notification_v1_notification_proto_enumTypes[0]\n}\n\nfunc (x NotificationPriority) Number() protoreflect.EnumNumber {\n\treturn protoreflect.EnumNumber(x)\n}\n\n// Deprecated: Use NotificationPriority.Descriptor instead.\nfunc (NotificationPriority) EnumDescriptor() ([]byte, []int) {\n\treturn file_notification_v1_notification_proto_rawDescGZIP(), []int{0}\n}\n\ntype RecipientType int32\n\nconst (\n\tRecipientType_RECIPIENT_TYPE_UNSPECIFIED RecipientType = 0\n\tRecipientType_RECIPIENT_TYPE_USER        RecipientType = 1\n\tRecipientType_RECIPIENT_TYPE_GROUP       RecipientType = 2\n)\n\n// Enum value maps for RecipientType.\nvar (\n\tRecipientType_name = map[int32]string{\n\t\t0: \"RECIPIENT_TYPE_UNSPECIFIED\",\n\t\t1: \"RECIPIENT_TYPE_USER\",\n\t\t2: \"RECIPIENT_TYPE_GROUP\",\n\t}\n\tRecipientType_value = map[string]int32{\n\t\t\"RECIPIENT_TYPE_UNSPECIFIED\": 0,\n\t\t\"RECIPIENT_TYPE_USER\":        1,\n\t\t\"RECIPIENT_TYPE_GROUP\":       2,\n\t}\n)\n\nfunc (x RecipientType) Enum() *RecipientType {\n\tp := new(RecipientType)\n\t*p = x\n\treturn p\n}\n\nfunc (x RecipientType) String() string {\n\treturn protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))\n}\n\nfunc (RecipientType) Descriptor() protoreflect.EnumDescriptor {\n\treturn file_notification_v1_notification_proto_enumTypes[1].Descriptor()\n}\n\nfunc (RecipientType) Type() protoreflect.EnumType {\n\treturn &file_notification_v1_notification_proto_enumTypes[1]\n}\n\nfunc (x RecipientType) Number() protoreflect.EnumNumber {\n\treturn protoreflect.EnumNumber(x)\n}\n\n// Deprecated: Use RecipientType.Descriptor instead.\nfunc (RecipientType) EnumDescriptor() ([]byte, []int) {\n\treturn file_notification_v1_notification_proto_rawDescGZIP(), []int{1}\n}\n\ntype Recipient struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId   string        `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tType RecipientType `protobuf:\"varint,2,opt,name=type,proto3,enum=immuta.platform.notifications.notification.v1.RecipientType\" json:\"type,omitempty\"`\n\t// This should be removed when we can call a user service to get recipient info.\n\t// Irrelevant for group recipients.\n\tEmail string `protobuf:\"bytes,3,opt,name=email,proto3\" json:\"email,omitempty\"`\n}\n\nfunc (x *Recipient) Reset() {\n\t*x = Recipient{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_notification_v1_notification_proto_msgTypes[0]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *Recipient) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Recipient) ProtoMessage() {}\n\nfunc (x *Recipient) ProtoReflect() protoreflect.Message {\n\tmi := &file_notification_v1_notification_proto_msgTypes[0]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Recipient.ProtoReflect.Descriptor instead.\nfunc (*Recipient) Descriptor() ([]byte, []int) {\n\treturn file_notification_v1_notification_proto_rawDescGZIP(), []int{0}\n}\n\nfunc (x *Recipient) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Recipient) GetType() RecipientType {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn RecipientType_RECIPIENT_TYPE_UNSPECIFIED\n}\n\nfunc (x *Recipient) GetEmail() string {\n\tif x != nil {\n\t\treturn x.Email\n\t}\n\treturn \"\"\n}\n\ntype NotificationTypeIdentity struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\t// Types that are assignable to Identifier:\n\t//\n\t//\t*NotificationTypeIdentity_Id\n\t//\t*NotificationTypeIdentity_Name\n\tIdentifier isNotificationTypeIdentity_Identifier `protobuf_oneof:\"identifier\"`\n}\n\nfunc (x *NotificationTypeIdentity) Reset() {\n\t*x = NotificationTypeIdentity{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_notification_v1_notification_proto_msgTypes[1]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *NotificationTypeIdentity) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*NotificationTypeIdentity) ProtoMessage() {}\n\nfunc (x *NotificationTypeIdentity) ProtoReflect() protoreflect.Message {\n\tmi := &file_notification_v1_notification_proto_msgTypes[1]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use NotificationTypeIdentity.ProtoReflect.Descriptor instead.\nfunc (*NotificationTypeIdentity) Descriptor() ([]byte, []int) {\n\treturn file_notification_v1_notification_proto_rawDescGZIP(), []int{1}\n}\n\nfunc (m *NotificationTypeIdentity) GetIdentifier() isNotificationTypeIdentity_Identifier {\n\tif m != nil {\n\t\treturn m.Identifier\n\t}\n\treturn nil\n}\n\nfunc (x *NotificationTypeIdentity) GetId() string {\n\tif x, ok := x.GetIdentifier().(*NotificationTypeIdentity_Id); ok {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *NotificationTypeIdentity) GetName() string {\n\tif x, ok := x.GetIdentifier().(*NotificationTypeIdentity_Name); ok {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\n\ntype isNotificationTypeIdentity_Identifier interface {\n\tisNotificationTypeIdentity_Identifier()\n}\n\ntype NotificationTypeIdentity_Id struct {\n\tId string `protobuf:\"bytes,1,opt,name=id,proto3,oneof\"`\n}\n\ntype NotificationTypeIdentity_Name struct {\n\tName string `protobuf:\"bytes,2,opt,name=name,proto3,oneof\"`\n}\n\nfunc (*NotificationTypeIdentity_Id) isNotificationTypeIdentity_Identifier() {}\n\nfunc (*NotificationTypeIdentity_Name) isNotificationTypeIdentity_Identifier() {}\n\ntype CreateNotificationRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tRecipients []*Recipient              `protobuf:\"bytes,1,rep,name=recipients,proto3\" json:\"recipients,omitempty\"`\n\tTenantId   string                    `protobuf:\"bytes,2,opt,name=tenant_id,json=tenantId,proto3\" json:\"tenant_id,omitempty\"`\n\tPriority   NotificationPriority      `protobuf:\"varint,3,opt,name=priority,proto3,enum=immuta.platform.notifications.notification.v1.NotificationPriority\" json:\"priority,omitempty\"`\n\tType       *NotificationTypeIdentity `protobuf:\"bytes,4,opt,name=type,proto3\" json:\"type,omitempty\"`\n\tMessage    string                    `protobuf:\"bytes,5,opt,name=message,proto3\" json:\"message,omitempty\"`\n\tData       map[string]string         `protobuf:\"bytes,6,rep,name=data,proto3\" json:\"data,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tInboxes    []*v1.LookupIdentity      `protobuf:\"bytes,7,rep,name=inboxes,proto3\" json:\"inboxes,omitempty\"`\n}\n\nfunc (x *CreateNotificationRequest) Reset() {\n\t*x = CreateNotificationRequest{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_notification_v1_notification_proto_msgTypes[2]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *CreateNotificationRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateNotificationRequest) ProtoMessage() {}\n\nfunc (x *CreateNotificationRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_notification_v1_notification_proto_msgTypes[2]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use CreateNotificationRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateNotificationRequest) Descriptor() ([]byte, []int) {\n\treturn file_notification_v1_notification_proto_rawDescGZIP(), []int{2}\n}\n\nfunc (x *CreateNotificationRequest) GetRecipients() []*Recipient {\n\tif x != nil {\n\t\treturn x.Recipients\n\t}\n\treturn nil\n}\n\nfunc (x *CreateNotificationRequest) GetTenantId() string {\n\tif x != nil {\n\t\treturn x.TenantId\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateNotificationRequest) GetPriority() NotificationPriority {\n\tif x != nil {\n\t\treturn x.Priority\n\t}\n\treturn NotificationPriority_NOTIFICATION_PRIORITY_UNSPECIFIED\n}\n\nfunc (x *CreateNotificationRequest) GetType() *NotificationTypeIdentity {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn nil\n}\n\nfunc (x *CreateNotificationRequest) GetMessage() string {\n\tif x != nil {\n\t\treturn x.Message\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateNotificationRequest) GetData() map[string]string {\n\tif x != nil {\n\t\treturn x.Data\n\t}\n\treturn nil\n}\n\nfunc (x *CreateNotificationRequest) GetInboxes() []*v1.LookupIdentity {\n\tif x != nil {\n\t\treturn x.Inboxes\n\t}\n\treturn nil\n}\n\ntype CreateNotificationResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId string `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\n\nfunc (x *CreateNotificationResponse) Reset() {\n\t*x = CreateNotificationResponse{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_notification_v1_notification_proto_msgTypes[3]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *CreateNotificationResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateNotificationResponse) ProtoMessage() {}\n\nfunc (x *CreateNotificationResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_notification_v1_notification_proto_msgTypes[3]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use CreateNotificationResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateNotificationResponse) Descriptor() ([]byte, []int) {\n\treturn file_notification_v1_notification_proto_rawDescGZIP(), []int{3}\n}\n\nfunc (x *CreateNotificationResponse) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\ntype GetNotificationRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId string `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\n\nfunc (x *GetNotificationRequest) Reset() {\n\t*x = GetNotificationRequest{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_notification_v1_notification_proto_msgTypes[4]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *GetNotificationRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetNotificationRequest) ProtoMessage() {}\n\nfunc (x *GetNotificationRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_notification_v1_notification_proto_msgTypes[4]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetNotificationRequest.ProtoReflect.Descriptor instead.\nfunc (*GetNotificationRequest) Descriptor() ([]byte, []int) {\n\treturn file_notification_v1_notification_proto_rawDescGZIP(), []int{4}\n}\n\nfunc (x *GetNotificationRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\ntype GetNotificationResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tNotification *Notification `protobuf:\"bytes,1,opt,name=notification,proto3\" json:\"notification,omitempty\"`\n}\n\nfunc (x *GetNotificationResponse) Reset() {\n\t*x = GetNotificationResponse{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_notification_v1_notification_proto_msgTypes[5]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *GetNotificationResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetNotificationResponse) ProtoMessage() {}\n\nfunc (x *GetNotificationResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_notification_v1_notification_proto_msgTypes[5]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetNotificationResponse.ProtoReflect.Descriptor instead.\nfunc (*GetNotificationResponse) Descriptor() ([]byte, []int) {\n\treturn file_notification_v1_notification_proto_rawDescGZIP(), []int{5}\n}\n\nfunc (x *GetNotificationResponse) GetNotification() *Notification {\n\tif x != nil {\n\t\treturn x.Notification\n\t}\n\treturn nil\n}\n\ntype Notification struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId        string                 `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tTenantId  string                 `protobuf:\"bytes,2,opt,name=tenant_id,json=tenantId,proto3\" json:\"tenant_id,omitempty\"`\n\tPriority  NotificationPriority   `protobuf:\"varint,3,opt,name=priority,proto3,enum=immuta.platform.notifications.notification.v1.NotificationPriority\" json:\"priority,omitempty\"`\n\tType      string                 `protobuf:\"bytes,4,opt,name=type,proto3\" json:\"type,omitempty\"`\n\tMessage   string                 `protobuf:\"bytes,5,opt,name=message,proto3\" json:\"message,omitempty\"`\n\tData      map[string]string      `protobuf:\"bytes,6,rep,name=data,proto3\" json:\"data,omitempty\" protobuf_key:\"bytes,1,opt,name=key,proto3\" protobuf_val:\"bytes,2,opt,name=value,proto3\"`\n\tStatus    string                 `protobuf:\"bytes,7,opt,name=status,proto3\" json:\"status,omitempty\"`\n\tCreatedAt *timestamppb.Timestamp `protobuf:\"bytes,8,opt,name=created_at,json=createdAt,proto3\" json:\"created_at,omitempty\"`\n}\n\nfunc (x *Notification) Reset() {\n\t*x = Notification{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_notification_v1_notification_proto_msgTypes[6]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *Notification) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Notification) ProtoMessage() {}\n\nfunc (x *Notification) ProtoReflect() protoreflect.Message {\n\tmi := &file_notification_v1_notification_proto_msgTypes[6]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Notification.ProtoReflect.Descriptor instead.\nfunc (*Notification) Descriptor() ([]byte, []int) {\n\treturn file_notification_v1_notification_proto_rawDescGZIP(), []int{6}\n}\n\nfunc (x *Notification) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Notification) GetTenantId() string {\n\tif x != nil {\n\t\treturn x.TenantId\n\t}\n\treturn \"\"\n}\n\nfunc (x *Notification) GetPriority() NotificationPriority {\n\tif x != nil {\n\t\treturn x.Priority\n\t}\n\treturn NotificationPriority_NOTIFICATION_PRIORITY_UNSPECIFIED\n}\n\nfunc (x *Notification) GetType() string {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn \"\"\n}\n\nfunc (x *Notification) GetMessage() string {\n\tif x != nil {\n\t\treturn x.Message\n\t}\n\treturn \"\"\n}\n\nfunc (x *Notification) GetData() map[string]string {\n\tif x != nil {\n\t\treturn x.Data\n\t}\n\treturn nil\n}\n\nfunc (x *Notification) GetStatus() string {\n\tif x != nil {\n\t\treturn x.Status\n\t}\n\treturn \"\"\n}\n\nfunc (x *Notification) GetCreatedAt() *timestamppb.Timestamp {\n\tif x != nil {\n\t\treturn x.CreatedAt\n\t}\n\treturn nil\n}\n\nvar File_notification_v1_notification_proto protoreflect.FileDescriptor\n\nvar file_notification_v1_notification_proto_rawDesc = []byte{\n\t0x0a, 0x22, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76,\n\t0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,\n\t0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2d, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61,\n\t0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,\n\t0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,\n\t0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,\n\t0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,\n\t0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70,\n\t0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x01,\n\t0x0a, 0x09, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x02, 0x69,\n\t0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72,\n\t0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,\n\t0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e,\n\t0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,\n\t0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,\n\t0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x74, 0x79,\n\t0x70, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,\n\t0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,\n\t0x6c, 0x22, 0x6f, 0x0a, 0x18, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a,\n\t0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,\n\t0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d,\n\t0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0x48, 0x09, 0x72, 0x07, 0x32, 0x05,\n\t0x2e, 0x2a, 0x3a, 0x2e, 0x2a, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a,\n\t0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x05, 0xba, 0x48, 0x02,\n\t0x08, 0x01, 0x22, 0x91, 0x05, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74,\n\t0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,\n\t0x12, 0x62, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,\n\t0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c,\n\t0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x08,\n\t0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,\n\t0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,\n\t0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72,\n\t0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x69,\n\t0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,\n\t0x32, 0x43, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,\n\t0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,\n\t0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,\n\t0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69,\n\t0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,\n\t0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x63, 0x0a, 0x04, 0x74, 0x79, 0x70,\n\t0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61,\n\t0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,\n\t0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,\n\t0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20,\n\t0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,\n\t0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,\n\t0x12, 0x66, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52,\n\t0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,\n\t0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e,\n\t0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,\n\t0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,\n\t0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x07, 0x69, 0x6e, 0x62, 0x6f,\n\t0x78, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6d, 0x6d, 0x75,\n\t0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69,\n\t0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,\n\t0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x65, 0x6e,\n\t0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x1a, 0x37, 0x0a,\n\t0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,\n\t0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,\n\t0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,\n\t0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x39, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,\n\t0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,\n\t0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,\n\t0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69,\n\t0x64, 0x22, 0x35, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x02, 0x69,\n\t0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72,\n\t0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e,\n\t0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,\n\t0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6d, 0x6d, 0x75,\n\t0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69,\n\t0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,\n\t0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,\n\t0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe5, 0x03, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,\n\t0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,\n\t0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02,\n\t0x69, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,\n\t0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0,\n\t0x01, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x08,\n\t0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43,\n\t0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,\n\t0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e,\n\t0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e,\n\t0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72,\n\t0x69, 0x74, 0x79, 0x42, 0x08, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70,\n\t0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,\n\t0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x74,\n\t0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05,\n\t0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x6d, 0x65,\n\t0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x59, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,\n\t0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61,\n\t0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,\n\t0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,\n\t0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,\n\t0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,\n\t0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,\n\t0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,\n\t0x64, 0x41, 0x74, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,\n\t0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,\n\t0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,\n\t0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xc2, 0x01, 0x0a,\n\t0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69,\n\t0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43,\n\t0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55,\n\t0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19,\n\t0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49,\n\t0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4e,\n\t0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4f,\n\t0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x1e, 0x0a,\n\t0x1a, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52,\n\t0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x22, 0x0a,\n\t0x1e, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52,\n\t0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10,\n\t0x04, 0x2a, 0x62, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79,\n\t0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4e, 0x54, 0x5f,\n\t0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,\n\t0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4e, 0x54, 0x5f,\n\t0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52,\n\t0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52,\n\t0x4f, 0x55, 0x50, 0x10, 0x02, 0x32, 0xe4, 0x02, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,\n\t0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa9, 0x01,\n\t0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c,\n\t0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,\n\t0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49,\n\t0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,\n\t0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e,\n\t0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,\n\t0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x0f, 0x47, 0x65,\n\t0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x2e,\n\t0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,\n\t0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x6f,\n\t0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,\n\t0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,\n\t0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c,\n\t0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,\n\t0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xf7, 0x02, 0x0a,\n\t0x31, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74,\n\t0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x73, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,\n\t0x76, 0x31, 0x42, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,\n\t0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,\n\t0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66,\n\t0x6f, 0x72, 0x6d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x62, 0x65, 0x6c, 0x66, 0x72, 0x79, 0x2f,\n\t0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,\n\t0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31,\n\t0x3b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x31, 0xa2,\n\t0x02, 0x04, 0x49, 0x50, 0x4e, 0x4e, 0xaa, 0x02, 0x2d, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e,\n\t0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,\n\t0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x2d, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x5c,\n\t0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,\n\t0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x39, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x5c,\n\t0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,\n\t0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,\n\t0x74, 0x61, 0xea, 0x02, 0x31, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x3a, 0x3a, 0x50, 0x6c, 0x61,\n\t0x74, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x3a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x3a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,\n}\n\nvar (\n\tfile_notification_v1_notification_proto_rawDescOnce sync.Once\n\tfile_notification_v1_notification_proto_rawDescData = file_notification_v1_notification_proto_rawDesc\n)\n\nfunc file_notification_v1_notification_proto_rawDescGZIP() []byte {\n\tfile_notification_v1_notification_proto_rawDescOnce.Do(func() {\n\t\tfile_notification_v1_notification_proto_rawDescData = protoimpl.X.CompressGZIP(file_notification_v1_notification_proto_rawDescData)\n\t})\n\treturn file_notification_v1_notification_proto_rawDescData\n}\n\nvar file_notification_v1_notification_proto_enumTypes = make([]protoimpl.EnumInfo, 2)\nvar file_notification_v1_notification_proto_msgTypes = make([]protoimpl.MessageInfo, 9)\nvar file_notification_v1_notification_proto_goTypes = []interface{}{\n\t(NotificationPriority)(0),          // 0: immuta.platform.notifications.notification.v1.NotificationPriority\n\t(RecipientType)(0),                 // 1: immuta.platform.notifications.notification.v1.RecipientType\n\t(*Recipient)(nil),                  // 2: immuta.platform.notifications.notification.v1.Recipient\n\t(*NotificationTypeIdentity)(nil),   // 3: immuta.platform.notifications.notification.v1.NotificationTypeIdentity\n\t(*CreateNotificationRequest)(nil),  // 4: immuta.platform.notifications.notification.v1.CreateNotificationRequest\n\t(*CreateNotificationResponse)(nil), // 5: immuta.platform.notifications.notification.v1.CreateNotificationResponse\n\t(*GetNotificationRequest)(nil),     // 6: immuta.platform.notifications.notification.v1.GetNotificationRequest\n\t(*GetNotificationResponse)(nil),    // 7: immuta.platform.notifications.notification.v1.GetNotificationResponse\n\t(*Notification)(nil),               // 8: immuta.platform.notifications.notification.v1.Notification\n\tnil,                                // 9: immuta.platform.notifications.notification.v1.CreateNotificationRequest.DataEntry\n\tnil,                                // 10: immuta.platform.notifications.notification.v1.Notification.DataEntry\n\t(*v1.LookupIdentity)(nil),          // 11: immuta.platform.notifications.provider.v1.LookupIdentity\n\t(*timestamppb.Timestamp)(nil),      // 12: google.protobuf.Timestamp\n}\nvar file_notification_v1_notification_proto_depIdxs = []int32{\n\t1,  // 0: immuta.platform.notifications.notification.v1.Recipient.type:type_name -> immuta.platform.notifications.notification.v1.RecipientType\n\t2,  // 1: immuta.platform.notifications.notification.v1.CreateNotificationRequest.recipients:type_name -> immuta.platform.notifications.notification.v1.Recipient\n\t0,  // 2: immuta.platform.notifications.notification.v1.CreateNotificationRequest.priority:type_name -> immuta.platform.notifications.notification.v1.NotificationPriority\n\t3,  // 3: immuta.platform.notifications.notification.v1.CreateNotificationRequest.type:type_name -> immuta.platform.notifications.notification.v1.NotificationTypeIdentity\n\t9,  // 4: immuta.platform.notifications.notification.v1.CreateNotificationRequest.data:type_name -> immuta.platform.notifications.notification.v1.CreateNotificationRequest.DataEntry\n\t11, // 5: immuta.platform.notifications.notification.v1.CreateNotificationRequest.inboxes:type_name -> immuta.platform.notifications.provider.v1.LookupIdentity\n\t8,  // 6: immuta.platform.notifications.notification.v1.GetNotificationResponse.notification:type_name -> immuta.platform.notifications.notification.v1.Notification\n\t0,  // 7: immuta.platform.notifications.notification.v1.Notification.priority:type_name -> immuta.platform.notifications.notification.v1.NotificationPriority\n\t10, // 8: immuta.platform.notifications.notification.v1.Notification.data:type_name -> immuta.platform.notifications.notification.v1.Notification.DataEntry\n\t12, // 9: immuta.platform.notifications.notification.v1.Notification.created_at:type_name -> google.protobuf.Timestamp\n\t4,  // 10: immuta.platform.notifications.notification.v1.NotificationService.CreateNotification:input_type -> immuta.platform.notifications.notification.v1.CreateNotificationRequest\n\t6,  // 11: immuta.platform.notifications.notification.v1.NotificationService.GetNotification:input_type -> immuta.platform.notifications.notification.v1.GetNotificationRequest\n\t5,  // 12: immuta.platform.notifications.notification.v1.NotificationService.CreateNotification:output_type -> immuta.platform.notifications.notification.v1.CreateNotificationResponse\n\t7,  // 13: immuta.platform.notifications.notification.v1.NotificationService.GetNotification:output_type -> immuta.platform.notifications.notification.v1.GetNotificationResponse\n\t12, // [12:14] is the sub-list for method output_type\n\t10, // [10:12] is the sub-list for method input_type\n\t10, // [10:10] is the sub-list for extension type_name\n\t10, // [10:10] is the sub-list for extension extendee\n\t0,  // [0:10] is the sub-list for field type_name\n}\n\nfunc init() { file_notification_v1_notification_proto_init() }\nfunc file_notification_v1_notification_proto_init() {\n\tif File_notification_v1_notification_proto != nil {\n\t\treturn\n\t}\n\tif !protoimpl.UnsafeEnabled {\n\t\tfile_notification_v1_notification_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*Recipient); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_notification_v1_notification_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*NotificationTypeIdentity); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_notification_v1_notification_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*CreateNotificationRequest); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_notification_v1_notification_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*CreateNotificationResponse); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_notification_v1_notification_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*GetNotificationRequest); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_notification_v1_notification_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*GetNotificationResponse); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_notification_v1_notification_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*Notification); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t}\n\tfile_notification_v1_notification_proto_msgTypes[1].OneofWrappers = []interface{}{\n\t\t(*NotificationTypeIdentity_Id)(nil),\n\t\t(*NotificationTypeIdentity_Name)(nil),\n\t}\n\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: file_notification_v1_notification_proto_rawDesc,\n\t\t\tNumEnums:      2,\n\t\t\tNumMessages:   9,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   1,\n\t\t},\n\t\tGoTypes:           file_notification_v1_notification_proto_goTypes,\n\t\tDependencyIndexes: file_notification_v1_notification_proto_depIdxs,\n\t\tEnumInfos:         file_notification_v1_notification_proto_enumTypes,\n\t\tMessageInfos:      file_notification_v1_notification_proto_msgTypes,\n\t}.Build()\n\tFile_notification_v1_notification_proto = out.File\n\tfile_notification_v1_notification_proto_rawDesc = nil\n\tfile_notification_v1_notification_proto_goTypes = nil\n\tfile_notification_v1_notification_proto_depIdxs = nil\n}\n```\n\nnotificationv1connect\n```go platform/apps/belfry/internal/service/notification/v1/notificationv1connect/notification.connect.go\n// Code generated by protoc-gen-connect-go. DO NOT EDIT.\n//\n// Source: notification/v1/notification.proto\n\npackage notificationv1connect\n\nimport (\n\tconnect \"connectrpc.com/connect\"\n\tcontext \"context\"\n\terrors \"errors\"\n\tv1 \"github.com/immuta/platform/apps/belfry/internal/service/notification/v1\"\n\thttp \"net/http\"\n\tstrings \"strings\"\n)\n\n// This is a compile-time assertion to ensure that this generated file and the connect package are\n// compatible. If you get a compiler error that this constant is not defined, this code was\n// generated with a version of connect newer than the one compiled into your binary. You can fix the\n// problem by either regenerating this code with an older version of connect or updating the connect\n// version compiled into your binary.\nconst _ = connect.IsAtLeastVersion1_13_0\n\nconst (\n\t// NotificationServiceName is the fully-qualified name of the NotificationService service.\n\tNotificationServiceName = \"immuta.platform.notifications.notification.v1.NotificationService\"\n)\n\n// These constants are the fully-qualified names of the RPCs defined in this package. They're\n// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.\n//\n// Note that these are different from the fully-qualified method names used by\n// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to\n// reflection-formatted method names, remove the leading slash and convert the remaining slash to a\n// period.\nconst (\n\t// NotificationServiceCreateNotificationProcedure is the fully-qualified name of the\n\t// NotificationService's CreateNotification RPC.\n\tNotificationServiceCreateNotificationProcedure = \"/immuta.platform.notifications.notification.v1.NotificationService/CreateNotification\"\n\t// NotificationServiceGetNotificationProcedure is the fully-qualified name of the\n\t// NotificationService's GetNotification RPC.\n\tNotificationServiceGetNotificationProcedure = \"/immuta.platform.notifications.notification.v1.NotificationService/GetNotification\"\n)\n\n// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.\nvar (\n\tnotificationServiceServiceDescriptor                  = v1.File_notification_v1_notification_proto.Services().ByName(\"NotificationService\")\n\tnotificationServiceCreateNotificationMethodDescriptor = notificationServiceServiceDescriptor.Methods().ByName(\"CreateNotification\")\n\tnotificationServiceGetNotificationMethodDescriptor    = notificationServiceServiceDescriptor.Methods().ByName(\"GetNotification\")\n)\n\n// NotificationServiceClient is a client for the\n// immuta.platform.notifications.notification.v1.NotificationService service.\ntype NotificationServiceClient interface {\n\tCreateNotification(context.Context, *connect.Request[v1.CreateNotificationRequest]) (*connect.Response[v1.CreateNotificationResponse], error)\n\tGetNotification(context.Context, *connect.Request[v1.GetNotificationRequest]) (*connect.Response[v1.GetNotificationResponse], error)\n}\n\n// NewNotificationServiceClient constructs a client for the\n// immuta.platform.notifications.notification.v1.NotificationService service. By default, it uses\n// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends\n// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or\n// connect.WithGRPCWeb() options.\n//\n// The URL supplied here should be the base URL for the Connect or gRPC server (for example,\n// http://api.acme.com or https://acme.com/grpc).\nfunc NewNotificationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NotificationServiceClient {\n\tbaseURL = strings.TrimRight(baseURL, \"/\")\n\treturn &notificationServiceClient{\n\t\tcreateNotification: connect.NewClient[v1.CreateNotificationRequest, v1.CreateNotificationResponse](\n\t\t\thttpClient,\n\t\t\tbaseURL+NotificationServiceCreateNotificationProcedure,\n\t\t\tconnect.WithSchema(notificationServiceCreateNotificationMethodDescriptor),\n\t\t\tconnect.WithClientOptions(opts...),\n\t\t),\n\t\tgetNotification: connect.NewClient[v1.GetNotificationRequest, v1.GetNotificationResponse](\n\t\t\thttpClient,\n\t\t\tbaseURL+NotificationServiceGetNotificationProcedure,\n\t\t\tconnect.WithSchema(notificationServiceGetNotificationMethodDescriptor),\n\t\t\tconnect.WithClientOptions(opts...),\n\t\t),\n\t}\n}\n\n// notificationServiceClient implements NotificationServiceClient.\ntype notificationServiceClient struct {\n\tcreateNotification *connect.Client[v1.CreateNotificationRequest, v1.CreateNotificationResponse]\n\tgetNotification    *connect.Client[v1.GetNotificationRequest, v1.GetNotificationResponse]\n}\n\n// CreateNotification calls\n// immuta.platform.notifications.notification.v1.NotificationService.CreateNotification.\nfunc (c *notificationServiceClient) CreateNotification(ctx context.Context, req *connect.Request[v1.CreateNotificationRequest]) (*connect.Response[v1.CreateNotificationResponse], error) {\n\treturn c.createNotification.CallUnary(ctx, req)\n}\n\n// GetNotification calls\n// immuta.platform.notifications.notification.v1.NotificationService.GetNotification.\nfunc (c *notificationServiceClient) GetNotification(ctx context.Context, req *connect.Request[v1.GetNotificationRequest]) (*connect.Response[v1.GetNotificationResponse], error) {\n\treturn c.getNotification.CallUnary(ctx, req)\n}\n\n// NotificationServiceHandler is an implementation of the\n// immuta.platform.notifications.notification.v1.NotificationService service.\ntype NotificationServiceHandler interface {\n\tCreateNotification(context.Context, *connect.Request[v1.CreateNotificationRequest]) (*connect.Response[v1.CreateNotificationResponse], error)\n\tGetNotification(context.Context, *connect.Request[v1.GetNotificationRequest]) (*connect.Response[v1.GetNotificationResponse], error)\n}\n\n// NewNotificationServiceHandler builds an HTTP handler from the service implementation. It returns\n// the path on which to mount the handler and the handler itself.\n//\n// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf\n// and JSON codecs. They also support gzip compression.\nfunc NewNotificationServiceHandler(svc NotificationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {\n\tnotificationServiceCreateNotificationHandler := connect.NewUnaryHandler(\n\t\tNotificationServiceCreateNotificationProcedure,\n\t\tsvc.CreateNotification,\n\t\tconnect.WithSchema(notificationServiceCreateNotificationMethodDescriptor),\n\t\tconnect.WithHandlerOptions(opts...),\n\t)\n\tnotificationServiceGetNotificationHandler := connect.NewUnaryHandler(\n\t\tNotificationServiceGetNotificationProcedure,\n\t\tsvc.GetNotification,\n\t\tconnect.WithSchema(notificationServiceGetNotificationMethodDescriptor),\n\t\tconnect.WithHandlerOptions(opts...),\n\t)\n\treturn \"/immuta.platform.notifications.notification.v1.NotificationService/\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tswitch r.URL.Path {\n\t\tcase NotificationServiceCreateNotificationProcedure:\n\t\t\tnotificationServiceCreateNotificationHandler.ServeHTTP(w, r)\n\t\tcase NotificationServiceGetNotificationProcedure:\n\t\t\tnotificationServiceGetNotificationHandler.ServeHTTP(w, r)\n\t\tdefault:\n\t\t\thttp.NotFound(w, r)\n\t\t}\n\t})\n}\n\n// UnimplementedNotificationServiceHandler returns CodeUnimplemented from all methods.\ntype UnimplementedNotificationServiceHandler struct{}\n\nfunc (UnimplementedNotificationServiceHandler) CreateNotification(context.Context, *connect.Request[v1.CreateNotificationRequest]) (*connect.Response[v1.CreateNotificationResponse], error) {\n\treturn nil, connect.NewError(connect.CodeUnimplemented, errors.New(\"immuta.platform.notifications.notification.v1.NotificationService.CreateNotification is not implemented\"))\n}\n\nfunc (UnimplementedNotificationServiceHandler) GetNotification(context.Context, *connect.Request[v1.GetNotificationRequest]) (*connect.Response[v1.GetNotificationResponse], error) {\n\treturn nil, connect.NewError(connect.CodeUnimplemented, errors.New(\"immuta.platform.notifications.notification.v1.NotificationService.GetNotification is not implemented\"))\n}\n```\n\n\n\n\n```go platform/apps/belfry/internal/service/option.go\npackage service\n\ntype Option[T any] func(s T)\n```\n\nprovider\n```go platform/apps/belfry/internal/service/provider/enums.go\npackage provider\n\nimport (\n\t\"github.com/immuta/platform/apps/belfry/internal/database\"\n\tproviderv1 \"github.com/immuta/platform/apps/belfry/internal/service/provider/v1\"\n)\n\nvar (\n\tprotoProviderTypeTodbProviderType = map[providerv1.ProviderType]database.ProviderType{\n\t\tproviderv1.ProviderType_PROVIDER_TYPE_EMAIL: database.ProviderTypeEmail,\n\t\tproviderv1.ProviderType_PROVIDER_TYPE_INBOX: database.ProviderTypeInbox,\n\t}\n\tdbProviderTypeToprotoProviderType = map[database.ProviderType]providerv1.ProviderType{\n\t\tdatabase.ProviderTypeEmail: providerv1.ProviderType_PROVIDER_TYPE_EMAIL,\n\t\tdatabase.ProviderTypeInbox: providerv1.ProviderType_PROVIDER_TYPE_INBOX,\n\t}\n)\n```\n\n```go platform/apps/belfry/internal/service/provider/provider.go\npackage provider\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"log/slog\"\n\t\"net/http\"\n\n\t\"connectrpc.com/connect\"\n\t\"github.com/jackc/pgerrcode\"\n\t\"github.com/jackc/pgx/v5\"\n\t\"github.com/jackc/pgx/v5/pgconn\"\n\n\t\"github.com/immuta/platform/apps/belfry/internal/database\"\n\t\"github.com/immuta/platform/apps/belfry/internal/database/querier\"\n\t\"github.com/immuta/platform/apps/belfry/internal/service\"\n\tproviderv1 \"github.com/immuta/platform/apps/belfry/internal/service/provider/v1\"\n\t\"github.com/immuta/platform/apps/belfry/internal/service/provider/v1/providerv1connect\"\n)\n\ntype Handler struct {\n\tdb        database.Querier\n\tproviders querier.ProviderQuerier\n\toptions   []connect.HandlerOption\n}\n\nfunc WithConnectHandlerOptions(opts ...connect.HandlerOption) service.Option[*Handler] {\n\treturn func(h *Handler) {\n\t\th.options = opts\n\t}\n}\n\nfunc WithDatabaseQuerier(db database.Querier) service.Option[*Handler] {\n\treturn func(h *Handler) {\n\t\th.db = db\n\t}\n}\n\nfunc WithProvidersQuerier(pq querier.ProviderQuerier) service.Option[*Handler] {\n\treturn func(h *Handler) {\n\t\th.providers = pq\n\t}\n}\n\nfunc (h *Handler) Register(router *http.ServeMux) {\n\trouter.Handle(providerv1connect.NewProviderServiceHandler(h, h.options...))\n}\n\nfunc (*Handler) Name() string {\n\treturn providerv1connect.ProviderServiceName\n}\n\nfunc NewHandler(opts ...service.Option[*Handler]) *Handler {\n\th := &Handler{}\n\n\tfor _, o := range opts {\n\t\to(h)\n\t}\n\n\treturn h\n}\n\nfunc (h *Handler) CreateProvider(\n\tctx context.Context, req *connect.Request[providerv1.CreateProviderRequest],\n) (*connect.Response[providerv1.CreateProviderResponse], error) {\n\tname := req.Msg.GetName()\n\tt := req.Msg.GetType()\n\n\tp, err := h.db.CreateProvider(ctx, database.CreateProviderParams{\n\t\tType:              protoProviderTypeTodbProviderType[t],\n\t\tName:              name,\n\t\tWorkflowName:      req.Msg.GetWorkflowName(),\n\t\tWorkflowTaskQueue: req.Msg.GetWorkflowTaskQueue(),\n\t})\n\tif err != nil {\n\t\tvar pgErr *pgconn.PgError\n\t\tif errors.As(err, &pgErr) && pgErr.Code == pgerrcode.UniqueViolation {\n\t\t\treturn nil, connect.NewError(connect.CodeAlreadyExists,\n\t\t\t\tfmt.Errorf(\"provider %s:%s\", protoProviderTypeTodbProviderType[t], name))\n\t\t}\n\t\tslog.Error(\"failed to create provider\", \"err\", err)\n\t\treturn nil, connect.NewError(connect.CodeInternal, errors.New(\"failed to create provider\"))\n\t}\n\n\treturn connect.NewResponse(&providerv1.CreateProviderResponse{\n\t\tId: p.ID,\n\t}), nil\n}\n\nfunc (h *Handler) GetProvider(\n\tctx context.Context, req *connect.Request[providerv1.GetProviderRequest],\n) (*connect.Response[providerv1.GetProviderResponse], error) {\n\tp, err := h.providers.LookupProvider(ctx, req.Msg.Id)\n\tif err != nil {\n\t\tif errors.Is(err, pgx.ErrNoRows) {\n\t\t\treturn nil, connect.NewError(connect.CodeNotFound, fmt.Errorf(\"provider %s not found\", req.Msg.GetId()))\n\t\t}\n\n\t\tslog.Error(\"failed to get provider\", \"err\", err)\n\t\treturn nil, connect.NewError(connect.CodeInternal, errors.New(\"failed to retrieve provider\"))\n\t}\n\n\treturn connect.NewResponse(&providerv1.GetProviderResponse{\n\t\tProvider: &providerv1.Provider{\n\t\t\tId:                p.ID,\n\t\t\tType:              dbProviderTypeToprotoProviderType[p.Type],\n\t\t\tName:              p.Name,\n\t\t\tWorkflowName:      p.WorkflowName,\n\t\t\tWorkflowTaskQueue: p.WorkflowTaskQueue,\n\t\t},\n\t}), nil\n}\n\nfunc (h *Handler) UpdateProvider(\n\tctx context.Context, req *connect.Request[providerv1.UpdateProviderRequest],\n) (*connect.Response[providerv1.UpdateProviderResponse], error) {\n\tp, err := h.db.UpdateProvider(ctx, database.UpdateProviderParams{\n\t\tID:                req.Msg.GetId(),\n\t\tWorkflowName:      req.Msg.WorkflowName,\n\t\tWorkflowTaskQueue: req.Msg.WorkflowTaskQueue,\n\t})\n\tif err != nil {\n\t\tslog.Error(\"failed to update provider\", \"err\", err)\n\t\treturn nil, connect.NewError(connect.CodeInternal, errors.New(\"failed to update provider\"))\n\t}\n\n\treturn connect.NewResponse(&providerv1.UpdateProviderResponse{\n\t\tProvider: &providerv1.Provider{\n\t\t\tId:                p.ID,\n\t\t\tType:              dbProviderTypeToprotoProviderType[p.Type],\n\t\t\tName:              p.Name,\n\t\t\tWorkflowName:      p.WorkflowName,\n\t\t\tWorkflowTaskQueue: p.WorkflowTaskQueue,\n\t\t},\n\t}), nil\n}\n\nfunc (h *Handler) DeleteProvider(\n\tctx context.Context, req *connect.Request[providerv1.DeleteProviderRequest],\n) (*connect.Response[providerv1.DeleteProviderResponse], error) {\n\tif err := h.db.DeleteProvider(ctx, req.Msg.GetId()); err != nil {\n\t\tslog.Error(\"failed to delete provider\", \"err\", err)\n\t\treturn nil, connect.NewError(connect.CodeInternal, errors.New(\"failed to delete provider\"))\n\t}\n\treturn connect.NewResponse(&providerv1.DeleteProviderResponse{}), nil\n}\n```\n\n```go platform/apps/belfry/internal/service/provider/providers_test.go\npackage provider\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"testing\"\n\n\t\"connectrpc.com/connect\"\n\t\"github.com/jackc/pgerrcode\"\n\t\"github.com/jackc/pgx/v5/pgconn\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/mock\"\n\t\"github.com/stretchr/testify/suite\"\n\n\t\"github.com/immuta/platform/apps/belfry/internal/database\"\n\tdbmocks \"github.com/immuta/platform/apps/belfry/internal/database/mocks\"\n\t\"github.com/immuta/platform/apps/belfry/internal/database/querier/mocks\"\n\tproviderv1 \"github.com/immuta/platform/apps/belfry/internal/service/provider/v1\"\n)\n\ntype ProviderHandlerMocks struct {\n\tdb        *dbmocks.MockQuerier\n\tproviders *mocks.MockProviderQuerier\n}\n\ntype ProviderHandlerTestSuite struct {\n\tsuite.Suite\n}\n\nfunc (s *ProviderHandlerTestSuite) NewMocks() *ProviderHandlerMocks {\n\treturn &ProviderHandlerMocks{\n\t\tdb:        dbmocks.NewMockQuerier(s.T()),\n\t\tproviders: mocks.NewMockProviderQuerier(s.T()),\n\t}\n}\n\nfunc (s *ProviderHandlerTestSuite) TestCreate() {\n\ttests := []struct {\n\t\tname      string\n\t\trequest   *providerv1.CreateProviderRequest\n\t\tmocks     func(*ProviderHandlerMocks)\n\t\texpectErr assert.ErrorAssertionFunc\n\t}{\n\t\t{\n\t\t\tname:    \"valid\",\n\t\t\trequest: newCreateProviderRequest(),\n\t\t\tmocks: func(m *ProviderHandlerMocks) {\n\t\t\t\tm.db.EXPECT().CreateProvider(mock.Anything, database.CreateProviderParams{\n\t\t\t\t\tType:              database.ProviderTypeInbox,\n\t\t\t\t\tName:              \"foo\",\n\t\t\t\t\tWorkflowTaskQueue: \"bar\",\n\t\t\t\t\tWorkflowName:      \"foo\",\n\t\t\t\t}).Return(newProvider(), nil)\n\t\t\t},\n\t\t\texpectErr: assert.NoError,\n\t\t},\n\t\t{\n\t\t\tname:    \"provider already exists\",\n\t\t\trequest: newCreateProviderRequest(),\n\t\t\tmocks: func(m *ProviderHandlerMocks) {\n\t\t\t\tpgErr := &pgconn.PgError{Code: pgerrcode.UniqueViolation}\n\n\t\t\t\tm.db.EXPECT().CreateProvider(mock.Anything, database.CreateProviderParams{\n\t\t\t\t\tType:              database.ProviderTypeInbox,\n\t\t\t\t\tName:              \"foo\",\n\t\t\t\t\tWorkflowTaskQueue: \"bar\",\n\t\t\t\t\tWorkflowName:      \"foo\",\n\t\t\t\t}).Return(nil, pgErr)\n\t\t\t},\n\t\t\texpectErr: func(tt assert.TestingT, err error, i ...any) bool {\n\t\t\t\treturn assert.Equal(tt, \"already_exists: provider inbox:foo\", err.Error(), i...)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:    \"unspecified error\",\n\t\t\trequest: newCreateProviderRequest(),\n\t\t\tmocks: func(m *ProviderHandlerMocks) {\n\t\t\t\tm.db.EXPECT().CreateProvider(mock.Anything, database.CreateProviderParams{\n\t\t\t\t\tType:              database.ProviderTypeInbox,\n\t\t\t\t\tName:              \"foo\",\n\t\t\t\t\tWorkflowTaskQueue: \"bar\",\n\t\t\t\t\tWorkflowName:      \"foo\",\n\t\t\t\t}).Return(nil, errors.New(\"error\"))\n\t\t\t},\n\t\t\texpectErr: assert.Error,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\ttt := tt\n\t\ts.Run(tt.name, func() {\n\t\t\tmocks := s.NewMocks()\n\t\t\ttt.mocks(mocks)\n\n\t\t\th := NewHandler(\n\t\t\t\tWithDatabaseQuerier(mocks.db),\n\t\t\t\tWithProvidersQuerier(mocks.providers),\n\t\t\t)\n\t\t\t_, err := h.CreateProvider(context.Background(), connect.NewRequest(tt.request))\n\t\t\ttt.expectErr(s.T(), err)\n\t\t})\n\t}\n}\n\nfunc (s *ProviderHandlerTestSuite) TestGet() {\n\tmocks := s.NewMocks()\n\tprovider := newProvider()\n\tmocks.providers.EXPECT().LookupProvider(mock.Anything, &providerv1.LookupIdentity{\n\t\tIdentifier: &providerv1.LookupIdentity_Id{Id: provider.ID},\n\t}).Return(provider, nil)\n\n\th := NewHandler(\n\t\tWithDatabaseQuerier(mocks.db),\n\t\tWithProvidersQuerier(mocks.providers),\n\t)\n\tgot, err := h.GetProvider(context.Background(), connect.NewRequest(&providerv1.GetProviderRequest{\n\t\tId: &providerv1.LookupIdentity{Identifier: &providerv1.LookupIdentity_Id{Id: provider.ID}},\n\t}))\n\ts.NoError(err)\n\n\ts.Equal(&providerv1.GetProviderResponse{\n\t\tProvider: &providerv1.Provider{\n\t\t\tId:                provider.ID,\n\t\t\tType:              providerv1.ProviderType_PROVIDER_TYPE_INBOX,\n\t\t\tName:              \"foo\",\n\t\t\tWorkflowName:      \"foo\",\n\t\t\tWorkflowTaskQueue: \"bar\",\n\t\t},\n\t}, got.Msg)\n}\n\nfunc TestProviderHandlerTestSuite(t *testing.T) {\n\tsuite.Run(t, new(ProviderHandlerTestSuite))\n}\n```\n\n```go platform/apps/belfry/internal/service/provider/testutils_test.go\npackage provider\n\nimport (\n\t\"github.com/google/uuid\"\n\n\t\"github.com/immuta/platform/apps/belfry/internal/database\"\n\tproviderv1 \"github.com/immuta/platform/apps/belfry/internal/service/provider/v1\"\n)\n\nfunc newProvider(opts ...func(*database.Provider)) *database.Provider {\n\tp := &database.Provider{\n\t\tID:                uuid.NewString(),\n\t\tType:              database.ProviderTypeInbox,\n\t\tName:              \"foo\",\n\t\tWorkflowTaskQueue: \"bar\",\n\t\tWorkflowName:      \"foo\",\n\t}\n\n\tfor _, o := range opts {\n\t\to(p)\n\t}\n\n\treturn p\n}\n\nfunc newCreateProviderRequest(opts ...func(*providerv1.CreateProviderRequest)) *providerv1.CreateProviderRequest {\n\treq := &providerv1.CreateProviderRequest{\n\t\tType:              providerv1.ProviderType_PROVIDER_TYPE_INBOX,\n\t\tName:              \"foo\",\n\t\tWorkflowTaskQueue: Ptr(\"bar\"),\n\t\tWorkflowName:      Ptr(\"foo\"),\n\t}\n\n\tfor _, o := range opts {\n\t\to(req)\n\t}\n\n\treturn req\n}\n\nfunc Ptr[T any](v T) *T {\n\treturn &v\n}\n```\n\nv1\n```go platform/apps/belfry/internal/service/provider/v1/provider.pb.go\n// Code generated by protoc-gen-go. DO NOT EDIT.\n// versions:\n// \tprotoc-gen-go v1.34.1\n// \tprotoc        (unknown)\n// source: provider/v1/provider.proto\n\npackage providerv1\n\nimport (\n\t_ \"buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate\"\n\tprotoreflect \"google.golang.org/protobuf/reflect/protoreflect\"\n\tprotoimpl \"google.golang.org/protobuf/runtime/protoimpl\"\n\treflect \"reflect\"\n\tsync \"sync\"\n)\n\nconst (\n\t// Verify that this generated code is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)\n\t// Verify that runtime/protoimpl is sufficiently up-to-date.\n\t_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)\n)\n\ntype ProviderType int32\n\nconst (\n\tProviderType_PROVIDER_TYPE_UNSPECIFIED ProviderType = 0\n\tProviderType_PROVIDER_TYPE_INBOX       ProviderType = 1\n\tProviderType_PROVIDER_TYPE_EMAIL       ProviderType = 2\n)\n\n// Enum value maps for ProviderType.\nvar (\n\tProviderType_name = map[int32]string{\n\t\t0: \"PROVIDER_TYPE_UNSPECIFIED\",\n\t\t1: \"PROVIDER_TYPE_INBOX\",\n\t\t2: \"PROVIDER_TYPE_EMAIL\",\n\t}\n\tProviderType_value = map[string]int32{\n\t\t\"PROVIDER_TYPE_UNSPECIFIED\": 0,\n\t\t\"PROVIDER_TYPE_INBOX\":       1,\n\t\t\"PROVIDER_TYPE_EMAIL\":       2,\n\t}\n)\n\nfunc (x ProviderType) Enum() *ProviderType {\n\tp := new(ProviderType)\n\t*p = x\n\treturn p\n}\n\nfunc (x ProviderType) String() string {\n\treturn protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))\n}\n\nfunc (ProviderType) Descriptor() protoreflect.EnumDescriptor {\n\treturn file_provider_v1_provider_proto_enumTypes[0].Descriptor()\n}\n\nfunc (ProviderType) Type() protoreflect.EnumType {\n\treturn &file_provider_v1_provider_proto_enumTypes[0]\n}\n\nfunc (x ProviderType) Number() protoreflect.EnumNumber {\n\treturn protoreflect.EnumNumber(x)\n}\n\n// Deprecated: Use ProviderType.Descriptor instead.\nfunc (ProviderType) EnumDescriptor() ([]byte, []int) {\n\treturn file_provider_v1_provider_proto_rawDescGZIP(), []int{0}\n}\n\ntype LookupIdentity struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\t// Types that are assignable to Identifier:\n\t//\n\t//\t*LookupIdentity_Id\n\t//\t*LookupIdentity_Name\n\tIdentifier isLookupIdentity_Identifier `protobuf_oneof:\"identifier\"`\n}\n\nfunc (x *LookupIdentity) Reset() {\n\t*x = LookupIdentity{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_provider_v1_provider_proto_msgTypes[0]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *LookupIdentity) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*LookupIdentity) ProtoMessage() {}\n\nfunc (x *LookupIdentity) ProtoReflect() protoreflect.Message {\n\tmi := &file_provider_v1_provider_proto_msgTypes[0]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use LookupIdentity.ProtoReflect.Descriptor instead.\nfunc (*LookupIdentity) Descriptor() ([]byte, []int) {\n\treturn file_provider_v1_provider_proto_rawDescGZIP(), []int{0}\n}\n\nfunc (m *LookupIdentity) GetIdentifier() isLookupIdentity_Identifier {\n\tif m != nil {\n\t\treturn m.Identifier\n\t}\n\treturn nil\n}\n\nfunc (x *LookupIdentity) GetId() string {\n\tif x, ok := x.GetIdentifier().(*LookupIdentity_Id); ok {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *LookupIdentity) GetName() string {\n\tif x, ok := x.GetIdentifier().(*LookupIdentity_Name); ok {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\n\ntype isLookupIdentity_Identifier interface {\n\tisLookupIdentity_Identifier()\n}\n\ntype LookupIdentity_Id struct {\n\tId string `protobuf:\"bytes,1,opt,name=id,proto3,oneof\"`\n}\n\ntype LookupIdentity_Name struct {\n\tName string `protobuf:\"bytes,2,opt,name=name,proto3,oneof\"`\n}\n\nfunc (*LookupIdentity_Id) isLookupIdentity_Identifier() {}\n\nfunc (*LookupIdentity_Name) isLookupIdentity_Identifier() {}\n\ntype CreateProviderRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tType              ProviderType `protobuf:\"varint,1,opt,name=type,proto3,enum=immuta.platform.notifications.provider.v1.ProviderType\" json:\"type,omitempty\"`\n\tName              string       `protobuf:\"bytes,2,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tWorkflowName      *string      `protobuf:\"bytes,3,opt,name=workflow_name,json=workflowName,proto3,oneof\" json:\"workflow_name,omitempty\"`\n\tWorkflowTaskQueue *string      `protobuf:\"bytes,4,opt,name=workflow_task_queue,json=workflowTaskQueue,proto3,oneof\" json:\"workflow_task_queue,omitempty\"`\n}\n\nfunc (x *CreateProviderRequest) Reset() {\n\t*x = CreateProviderRequest{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_provider_v1_provider_proto_msgTypes[1]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *CreateProviderRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateProviderRequest) ProtoMessage() {}\n\nfunc (x *CreateProviderRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_provider_v1_provider_proto_msgTypes[1]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use CreateProviderRequest.ProtoReflect.Descriptor instead.\nfunc (*CreateProviderRequest) Descriptor() ([]byte, []int) {\n\treturn file_provider_v1_provider_proto_rawDescGZIP(), []int{1}\n}\n\nfunc (x *CreateProviderRequest) GetType() ProviderType {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn ProviderType_PROVIDER_TYPE_UNSPECIFIED\n}\n\nfunc (x *CreateProviderRequest) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateProviderRequest) GetWorkflowName() string {\n\tif x != nil && x.WorkflowName != nil {\n\t\treturn *x.WorkflowName\n\t}\n\treturn \"\"\n}\n\nfunc (x *CreateProviderRequest) GetWorkflowTaskQueue() string {\n\tif x != nil && x.WorkflowTaskQueue != nil {\n\t\treturn *x.WorkflowTaskQueue\n\t}\n\treturn \"\"\n}\n\ntype CreateProviderResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId string `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\n\nfunc (x *CreateProviderResponse) Reset() {\n\t*x = CreateProviderResponse{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_provider_v1_provider_proto_msgTypes[2]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *CreateProviderResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*CreateProviderResponse) ProtoMessage() {}\n\nfunc (x *CreateProviderResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_provider_v1_provider_proto_msgTypes[2]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use CreateProviderResponse.ProtoReflect.Descriptor instead.\nfunc (*CreateProviderResponse) Descriptor() ([]byte, []int) {\n\treturn file_provider_v1_provider_proto_rawDescGZIP(), []int{2}\n}\n\nfunc (x *CreateProviderResponse) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\ntype GetProviderRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId *LookupIdentity `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\n\nfunc (x *GetProviderRequest) Reset() {\n\t*x = GetProviderRequest{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_provider_v1_provider_proto_msgTypes[3]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *GetProviderRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetProviderRequest) ProtoMessage() {}\n\nfunc (x *GetProviderRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_provider_v1_provider_proto_msgTypes[3]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetProviderRequest.ProtoReflect.Descriptor instead.\nfunc (*GetProviderRequest) Descriptor() ([]byte, []int) {\n\treturn file_provider_v1_provider_proto_rawDescGZIP(), []int{3}\n}\n\nfunc (x *GetProviderRequest) GetId() *LookupIdentity {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn nil\n}\n\ntype GetProviderResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tProvider *Provider `protobuf:\"bytes,1,opt,name=provider,proto3\" json:\"provider,omitempty\"`\n}\n\nfunc (x *GetProviderResponse) Reset() {\n\t*x = GetProviderResponse{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_provider_v1_provider_proto_msgTypes[4]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *GetProviderResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*GetProviderResponse) ProtoMessage() {}\n\nfunc (x *GetProviderResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_provider_v1_provider_proto_msgTypes[4]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use GetProviderResponse.ProtoReflect.Descriptor instead.\nfunc (*GetProviderResponse) Descriptor() ([]byte, []int) {\n\treturn file_provider_v1_provider_proto_rawDescGZIP(), []int{4}\n}\n\nfunc (x *GetProviderResponse) GetProvider() *Provider {\n\tif x != nil {\n\t\treturn x.Provider\n\t}\n\treturn nil\n}\n\ntype DeleteProviderRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId string `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n}\n\nfunc (x *DeleteProviderRequest) Reset() {\n\t*x = DeleteProviderRequest{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_provider_v1_provider_proto_msgTypes[5]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *DeleteProviderRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*DeleteProviderRequest) ProtoMessage() {}\n\nfunc (x *DeleteProviderRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_provider_v1_provider_proto_msgTypes[5]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use DeleteProviderRequest.ProtoReflect.Descriptor instead.\nfunc (*DeleteProviderRequest) Descriptor() ([]byte, []int) {\n\treturn file_provider_v1_provider_proto_rawDescGZIP(), []int{5}\n}\n\nfunc (x *DeleteProviderRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\ntype DeleteProviderResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n}\n\nfunc (x *DeleteProviderResponse) Reset() {\n\t*x = DeleteProviderResponse{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_provider_v1_provider_proto_msgTypes[6]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *DeleteProviderResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*DeleteProviderResponse) ProtoMessage() {}\n\nfunc (x *DeleteProviderResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_provider_v1_provider_proto_msgTypes[6]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use DeleteProviderResponse.ProtoReflect.Descriptor instead.\nfunc (*DeleteProviderResponse) Descriptor() ([]byte, []int) {\n\treturn file_provider_v1_provider_proto_rawDescGZIP(), []int{6}\n}\n\ntype UpdateProviderRequest struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId                string  `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tWorkflowName      *string `protobuf:\"bytes,3,opt,name=workflow_name,json=workflowName,proto3,oneof\" json:\"workflow_name,omitempty\"`\n\tWorkflowTaskQueue *string `protobuf:\"bytes,4,opt,name=workflow_task_queue,json=workflowTaskQueue,proto3,oneof\" json:\"workflow_task_queue,omitempty\"`\n}\n\nfunc (x *UpdateProviderRequest) Reset() {\n\t*x = UpdateProviderRequest{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_provider_v1_provider_proto_msgTypes[7]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *UpdateProviderRequest) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateProviderRequest) ProtoMessage() {}\n\nfunc (x *UpdateProviderRequest) ProtoReflect() protoreflect.Message {\n\tmi := &file_provider_v1_provider_proto_msgTypes[7]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UpdateProviderRequest.ProtoReflect.Descriptor instead.\nfunc (*UpdateProviderRequest) Descriptor() ([]byte, []int) {\n\treturn file_provider_v1_provider_proto_rawDescGZIP(), []int{7}\n}\n\nfunc (x *UpdateProviderRequest) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateProviderRequest) GetWorkflowName() string {\n\tif x != nil && x.WorkflowName != nil {\n\t\treturn *x.WorkflowName\n\t}\n\treturn \"\"\n}\n\nfunc (x *UpdateProviderRequest) GetWorkflowTaskQueue() string {\n\tif x != nil && x.WorkflowTaskQueue != nil {\n\t\treturn *x.WorkflowTaskQueue\n\t}\n\treturn \"\"\n}\n\ntype UpdateProviderResponse struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tProvider *Provider `protobuf:\"bytes,1,opt,name=provider,proto3\" json:\"provider,omitempty\"`\n}\n\nfunc (x *UpdateProviderResponse) Reset() {\n\t*x = UpdateProviderResponse{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_provider_v1_provider_proto_msgTypes[8]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *UpdateProviderResponse) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*UpdateProviderResponse) ProtoMessage() {}\n\nfunc (x *UpdateProviderResponse) ProtoReflect() protoreflect.Message {\n\tmi := &file_provider_v1_provider_proto_msgTypes[8]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use UpdateProviderResponse.ProtoReflect.Descriptor instead.\nfunc (*UpdateProviderResponse) Descriptor() ([]byte, []int) {\n\treturn file_provider_v1_provider_proto_rawDescGZIP(), []int{8}\n}\n\nfunc (x *UpdateProviderResponse) GetProvider() *Provider {\n\tif x != nil {\n\t\treturn x.Provider\n\t}\n\treturn nil\n}\n\ntype Provider struct {\n\tstate         protoimpl.MessageState\n\tsizeCache     protoimpl.SizeCache\n\tunknownFields protoimpl.UnknownFields\n\n\tId                string       `protobuf:\"bytes,1,opt,name=id,proto3\" json:\"id,omitempty\"`\n\tType              ProviderType `protobuf:\"varint,2,opt,name=type,proto3,enum=immuta.platform.notifications.provider.v1.ProviderType\" json:\"type,omitempty\"`\n\tName              string       `protobuf:\"bytes,3,opt,name=name,proto3\" json:\"name,omitempty\"`\n\tWorkflowName      string       `protobuf:\"bytes,4,opt,name=workflow_name,json=workflowName,proto3\" json:\"workflow_name,omitempty\"`\n\tWorkflowTaskQueue string       `protobuf:\"bytes,5,opt,name=workflow_task_queue,json=workflowTaskQueue,proto3\" json:\"workflow_task_queue,omitempty\"`\n}\n\nfunc (x *Provider) Reset() {\n\t*x = Provider{}\n\tif protoimpl.UnsafeEnabled {\n\t\tmi := &file_provider_v1_provider_proto_msgTypes[9]\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tms.StoreMessageInfo(mi)\n\t}\n}\n\nfunc (x *Provider) String() string {\n\treturn protoimpl.X.MessageStringOf(x)\n}\n\nfunc (*Provider) ProtoMessage() {}\n\nfunc (x *Provider) ProtoReflect() protoreflect.Message {\n\tmi := &file_provider_v1_provider_proto_msgTypes[9]\n\tif protoimpl.UnsafeEnabled && x != nil {\n\t\tms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))\n\t\tif ms.LoadMessageInfo() == nil {\n\t\t\tms.StoreMessageInfo(mi)\n\t\t}\n\t\treturn ms\n\t}\n\treturn mi.MessageOf(x)\n}\n\n// Deprecated: Use Provider.ProtoReflect.Descriptor instead.\nfunc (*Provider) Descriptor() ([]byte, []int) {\n\treturn file_provider_v1_provider_proto_rawDescGZIP(), []int{9}\n}\n\nfunc (x *Provider) GetId() string {\n\tif x != nil {\n\t\treturn x.Id\n\t}\n\treturn \"\"\n}\n\nfunc (x *Provider) GetType() ProviderType {\n\tif x != nil {\n\t\treturn x.Type\n\t}\n\treturn ProviderType_PROVIDER_TYPE_UNSPECIFIED\n}\n\nfunc (x *Provider) GetName() string {\n\tif x != nil {\n\t\treturn x.Name\n\t}\n\treturn \"\"\n}\n\nfunc (x *Provider) GetWorkflowName() string {\n\tif x != nil {\n\t\treturn x.WorkflowName\n\t}\n\treturn \"\"\n}\n\nfunc (x *Provider) GetWorkflowTaskQueue() string {\n\tif x != nil {\n\t\treturn x.WorkflowTaskQueue\n\t}\n\treturn \"\"\n}\n\nvar File_provider_v1_provider_proto protoreflect.FileDescriptor\n\nvar file_provider_v1_provider_proto_rawDesc = []byte{\n\t0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,\n\t0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x69, 0x6d,\n\t0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f,\n\t0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x76,\n\t0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,\n\t0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,\n\t0x72, 0x6f, 0x74, 0x6f, 0x22, 0x65, 0x0a, 0x0e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x49, 0x64,\n\t0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,\n\t0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x02,\n\t0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,\n\t0x42, 0x0c, 0xba, 0x48, 0x09, 0x72, 0x07, 0x32, 0x05, 0x2e, 0x2a, 0x3a, 0x2e, 0x2a, 0x48, 0x00,\n\t0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,\n\t0x66, 0x69, 0x65, 0x72, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x96, 0x02, 0x0a, 0x15,\n\t0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,\n\t0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,\n\t0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61,\n\t0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,\n\t0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0xba, 0x48,\n\t0x08, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,\n\t0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,\n\t0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x77,\n\t0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,\n\t0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61,\n\t0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,\n\t0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,\n\t0x28, 0x09, 0x48, 0x01, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61,\n\t0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x77,\n\t0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14,\n\t0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71,\n\t0x75, 0x65, 0x75, 0x65, 0x22, 0x32, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,\n\t0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,\n\t0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,\n\t0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50,\n\t0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49,\n\t0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6d, 0x6d,\n\t0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74,\n\t0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,\n\t0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x65,\n\t0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x02, 0x69, 0x64, 0x22, 0x66, 0x0a, 0x13, 0x47, 0x65, 0x74,\n\t0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,\n\t0x12, 0x4f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,\n\t0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74,\n\t0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,\n\t0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,\n\t0x72, 0x22, 0x34, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,\n\t0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64,\n\t0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03,\n\t0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,\n\t0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,\n\t0x65, 0x22, 0xbd, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76,\n\t0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x02, 0x69,\n\t0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72,\n\t0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b,\n\t0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,\n\t0x00, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x88,\n\t0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74,\n\t0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,\n\t0x01, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x51,\n\t0x75, 0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x77, 0x6f, 0x72, 0x6b,\n\t0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77, 0x6f,\n\t0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75,\n\t0x65, 0x22, 0x69, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,\n\t0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x70,\n\t0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,\n\t0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,\n\t0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,\n\t0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,\n\t0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x82, 0x02, 0x0a,\n\t0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x02, 0x69, 0x64, 0x18,\n\t0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0,\n\t0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,\n\t0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c,\n\t0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,\n\t0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,\n\t0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0xba,\n\t0x48, 0x08, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,\n\t0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,\n\t0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0d,\n\t0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,\n\t0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0c, 0x77, 0x6f, 0x72,\n\t0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x13, 0x77, 0x6f, 0x72,\n\t0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,\n\t0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x11,\n\t0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75,\n\t0x65, 0x2a, 0x5f, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,\n\t0x65, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59,\n\t0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,\n\t0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,\n\t0x45, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x58, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f,\n\t0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c,\n\t0x10, 0x02, 0x32, 0xe8, 0x04, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53,\n\t0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,\n\t0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x40, 0x2e, 0x69, 0x6d, 0x6d, 0x75,\n\t0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69,\n\t0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,\n\t0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76,\n\t0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x69, 0x6d,\n\t0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f,\n\t0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x76,\n\t0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,\n\t0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c,\n\t0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3d,\n\t0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,\n\t0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,\n\t0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,\n\t0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e,\n\t0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,\n\t0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,\n\t0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,\n\t0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x95, 0x01,\n\t0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,\n\t0x12, 0x40, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,\n\t0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,\n\t0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,\n\t0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,\n\t0x73, 0x74, 0x1a, 0x41, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74,\n\t0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,\n\t0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,\n\t0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,\n\t0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,\n\t0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x40, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74,\n\t0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,\n\t0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,\n\t0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,\n\t0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x69, 0x6d, 0x6d,\n\t0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74,\n\t0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,\n\t0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,\n\t0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xd7, 0x02,\n\t0x0a, 0x2d, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x2e, 0x70, 0x6c, 0x61,\n\t0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42,\n\t0x0d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,\n\t0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6d, 0x6d,\n\t0x75, 0x74, 0x61, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x61, 0x70, 0x70,\n\t0x73, 0x2f, 0x62, 0x65, 0x6c, 0x66, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,\n\t0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,\n\t0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x76, 0x31,\n\t0xa2, 0x02, 0x04, 0x49, 0x50, 0x4e, 0x50, 0xaa, 0x02, 0x29, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61,\n\t0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,\n\t0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,\n\t0x2e, 0x56, 0x31, 0xca, 0x02, 0x29, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x5c, 0x50, 0x6c, 0x61,\n\t0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,\n\t0x6f, 0x6e, 0x73, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2,\n\t0x02, 0x35, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x5c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,\n\t0x6d, 0x5c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5c,\n\t0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,\n\t0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x2d, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61,\n\t0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x3a, 0x4e, 0x6f, 0x74, 0x69,\n\t0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x76, 0x69,\n\t0x64, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,\n}\n\nvar (\n\tfile_provider_v1_provider_proto_rawDescOnce sync.Once\n\tfile_provider_v1_provider_proto_rawDescData = file_provider_v1_provider_proto_rawDesc\n)\n\nfunc file_provider_v1_provider_proto_rawDescGZIP() []byte {\n\tfile_provider_v1_provider_proto_rawDescOnce.Do(func() {\n\t\tfile_provider_v1_provider_proto_rawDescData = protoimpl.X.CompressGZIP(file_provider_v1_provider_proto_rawDescData)\n\t})\n\treturn file_provider_v1_provider_proto_rawDescData\n}\n\nvar file_provider_v1_provider_proto_enumTypes = make([]protoimpl.EnumInfo, 1)\nvar file_provider_v1_provider_proto_msgTypes = make([]protoimpl.MessageInfo, 10)\nvar file_provider_v1_provider_proto_goTypes = []interface{}{\n\t(ProviderType)(0),              // 0: immuta.platform.notifications.provider.v1.ProviderType\n\t(*LookupIdentity)(nil),         // 1: immuta.platform.notifications.provider.v1.LookupIdentity\n\t(*CreateProviderRequest)(nil),  // 2: immuta.platform.notifications.provider.v1.CreateProviderRequest\n\t(*CreateProviderResponse)(nil), // 3: immuta.platform.notifications.provider.v1.CreateProviderResponse\n\t(*GetProviderRequest)(nil),     // 4: immuta.platform.notifications.provider.v1.GetProviderRequest\n\t(*GetProviderResponse)(nil),    // 5: immuta.platform.notifications.provider.v1.GetProviderResponse\n\t(*DeleteProviderRequest)(nil),  // 6: immuta.platform.notifications.provider.v1.DeleteProviderRequest\n\t(*DeleteProviderResponse)(nil), // 7: immuta.platform.notifications.provider.v1.DeleteProviderResponse\n\t(*UpdateProviderRequest)(nil),  // 8: immuta.platform.notifications.provider.v1.UpdateProviderRequest\n\t(*UpdateProviderResponse)(nil), // 9: immuta.platform.notifications.provider.v1.UpdateProviderResponse\n\t(*Provider)(nil),               // 10: immuta.platform.notifications.provider.v1.Provider\n}\nvar file_provider_v1_provider_proto_depIdxs = []int32{\n\t0,  // 0: immuta.platform.notifications.provider.v1.CreateProviderRequest.type:type_name -> immuta.platform.notifications.provider.v1.ProviderType\n\t1,  // 1: immuta.platform.notifications.provider.v1.GetProviderRequest.id:type_name -> immuta.platform.notifications.provider.v1.LookupIdentity\n\t10, // 2: immuta.platform.notifications.provider.v1.GetProviderResponse.provider:type_name -> immuta.platform.notifications.provider.v1.Provider\n\t10, // 3: immuta.platform.notifications.provider.v1.UpdateProviderResponse.provider:type_name -> immuta.platform.notifications.provider.v1.Provider\n\t0,  // 4: immuta.platform.notifications.provider.v1.Provider.type:type_name -> immuta.platform.notifications.provider.v1.ProviderType\n\t2,  // 5: immuta.platform.notifications.provider.v1.ProviderService.CreateProvider:input_type -> immuta.platform.notifications.provider.v1.CreateProviderRequest\n\t4,  // 6: immuta.platform.notifications.provider.v1.ProviderService.GetProvider:input_type -> immuta.platform.notifications.provider.v1.GetProviderRequest\n\t8,  // 7: immuta.platform.notifications.provider.v1.ProviderService.UpdateProvider:input_type -> immuta.platform.notifications.provider.v1.UpdateProviderRequest\n\t6,  // 8: immuta.platform.notifications.provider.v1.ProviderService.DeleteProvider:input_type -> immuta.platform.notifications.provider.v1.DeleteProviderRequest\n\t3,  // 9: immuta.platform.notifications.provider.v1.ProviderService.CreateProvider:output_type -> immuta.platform.notifications.provider.v1.CreateProviderResponse\n\t5,  // 10: immuta.platform.notifications.provider.v1.ProviderService.GetProvider:output_type -> immuta.platform.notifications.provider.v1.GetProviderResponse\n\t9,  // 11: immuta.platform.notifications.provider.v1.ProviderService.UpdateProvider:output_type -> immuta.platform.notifications.provider.v1.UpdateProviderResponse\n\t7,  // 12: immuta.platform.notifications.provider.v1.ProviderService.DeleteProvider:output_type -> immuta.platform.notifications.provider.v1.DeleteProviderResponse\n\t9,  // [9:13] is the sub-list for method output_type\n\t5,  // [5:9] is the sub-list for method input_type\n\t5,  // [5:5] is the sub-list for extension type_name\n\t5,  // [5:5] is the sub-list for extension extendee\n\t0,  // [0:5] is the sub-list for field type_name\n}\n\nfunc init() { file_provider_v1_provider_proto_init() }\nfunc file_provider_v1_provider_proto_init() {\n\tif File_provider_v1_provider_proto != nil {\n\t\treturn\n\t}\n\tif !protoimpl.UnsafeEnabled {\n\t\tfile_provider_v1_provider_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*LookupIdentity); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_provider_v1_provider_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*CreateProviderRequest); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_provider_v1_provider_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*CreateProviderResponse); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_provider_v1_provider_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*GetProviderRequest); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_provider_v1_provider_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*GetProviderResponse); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_provider_v1_provider_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*DeleteProviderRequest); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_provider_v1_provider_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*DeleteProviderResponse); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_provider_v1_provider_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*UpdateProviderRequest); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_provider_v1_provider_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*UpdateProviderResponse); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\tfile_provider_v1_provider_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {\n\t\t\tswitch v := v.(*Provider); i {\n\t\t\tcase 0:\n\t\t\t\treturn &v.state\n\t\t\tcase 1:\n\t\t\t\treturn &v.sizeCache\n\t\t\tcase 2:\n\t\t\t\treturn &v.unknownFields\n\t\t\tdefault:\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t}\n\tfile_provider_v1_provider_proto_msgTypes[0].OneofWrappers = []interface{}{\n\t\t(*LookupIdentity_Id)(nil),\n\t\t(*LookupIdentity_Name)(nil),\n\t}\n\tfile_provider_v1_provider_proto_msgTypes[1].OneofWrappers = []interface{}{}\n\tfile_provider_v1_provider_proto_msgTypes[7].OneofWrappers = []interface{}{}\n\ttype x struct{}\n\tout := protoimpl.TypeBuilder{\n\t\tFile: protoimpl.DescBuilder{\n\t\t\tGoPackagePath: reflect.TypeOf(x{}).PkgPath(),\n\t\t\tRawDescriptor: file_provider_v1_provider_proto_rawDesc,\n\t\t\tNumEnums:      1,\n\t\t\tNumMessages:   10,\n\t\t\tNumExtensions: 0,\n\t\t\tNumServices:   1,\n\t\t},\n\t\tGoTypes:           file_provider_v1_provider_proto_goTypes,\n\t\tDependencyIndexes: file_provider_v1_provider_proto_depIdxs,\n\t\tEnumInfos:         file_provider_v1_provider_proto_enumTypes,\n\t\tMessageInfos:      file_provider_v1_provider_proto_msgTypes,\n\t}.Build()\n\tFile_provider_v1_provider_proto = out.File\n\tfile_provider_v1_provider_proto_rawDesc = nil\n\tfile_provider_v1_provider_proto_goTypes = nil\n\tfile_provider_v1_provider_proto_depIdxs = nil\n}\n```\n\nproviderv1connect\n```go platform/apps/belfry/internal/service/provider/v1/providerv1connect/provider.connect.go\n// Code generated by protoc-gen-connect-go. DO NOT EDIT.\n//\n// Source: provider/v1/provider.proto\n\npackage providerv1connect\n\nimport (\n\tconnect \"connectrpc.com/connect\"\n\tcontext \"context\"\n\terrors \"errors\"\n\tv1 \"github.com/immuta/platform/apps/belfry/internal/service/provider/v1\"\n\thttp \"net/http\"\n\tstrings \"strings\"\n)\n\n// This is a compile-time assertion to ensure that this generated file and the connect package are\n// compatible. If you get a compiler error that this constant is not defined, this code was\n// generated with a version of connect newer than the one compiled into your binary. You can fix the\n// problem by either regenerating this code with an older version of connect or updating the connect\n// version compiled into your binary.\nconst _ = connect.IsAtLeastVersion1_13_0\n\nconst (\n\t// ProviderServiceName is the fully-qualified name of the ProviderService service.\n\tProviderServiceName = \"immuta.platform.notifications.provider.v1.ProviderService\"\n)\n\n// These constants are the fully-qualified names of the RPCs defined in this package. They're\n// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.\n//\n// Note that these are different from the fully-qualified method names used by\n// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to\n// reflection-formatted method names, remove the leading slash and convert the remaining slash to a\n// period.\nconst (\n\t// ProviderServiceCreateProviderProcedure is the fully-qualified name of the ProviderService's\n\t// CreateProvider RPC.\n\tProviderServiceCreateProviderProcedure = \"/immuta.platform.notifications.provider.v1.ProviderService/CreateProvider\"\n\t// ProviderServiceGetProviderProcedure is the fully-qualified name of the ProviderService's\n\t// GetProvider RPC.\n\tProviderServiceGetProviderProcedure = \"/immuta.platform.notifications.provider.v1.ProviderService/GetProvider\"\n\t// ProviderServiceUpdateProviderProcedure is the fully-qualified name of the ProviderService's\n\t// UpdateProvider RPC.\n\tProviderServiceUpdateProviderProcedure = \"/immuta.platform.notifications.provider.v1.ProviderService/UpdateProvider\"\n\t// ProviderServiceDeleteProviderProcedure is the fully-qualified name of the ProviderService's\n\t// DeleteProvider RPC.\n\tProviderServiceDeleteProviderProcedure = \"/immuta.platform.notifications.provider.v1.ProviderService/DeleteProvider\"\n)\n\n// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.\nvar (\n\tproviderServiceServiceDescriptor              = v1.File_provider_v1_provider_proto.Services().ByName(\"ProviderService\")\n\tproviderServiceCreateProviderMethodDescriptor = providerServiceServiceDescriptor.Methods().ByName(\"CreateProvider\")\n\tproviderServiceGetProviderMethodDescriptor    = providerServiceServiceDescriptor.Methods().ByName(\"GetProvider\")\n\tproviderServiceUpdateProviderMethodDescriptor = providerServiceServiceDescriptor.Methods().ByName(\"UpdateProvider\")\n\tproviderServiceDeleteProviderMethodDescriptor = providerServiceServiceDescriptor.Methods().ByName(\"DeleteProvider\")\n)\n\n// ProviderServiceClient is a client for the\n// immuta.platform.notifications.provider.v1.ProviderService service.\ntype ProviderServiceClient interface {\n\tCreateProvider(context.Context, *connect.Request[v1.CreateProviderRequest]) (*connect.Response[v1.CreateProviderResponse], error)\n\tGetProvider(context.Context, *connect.Request[v1.GetProviderRequest]) (*connect.Response[v1.GetProviderResponse], error)\n\tUpdateProvider(context.Context, *connect.Request[v1.UpdateProviderRequest]) (*connect.Response[v1.UpdateProviderResponse], error)\n\tDeleteProvider(context.Context, *connect.Request[v1.DeleteProviderRequest]) (*connect.Response[v1.DeleteProviderResponse], error)\n}\n\n// NewProviderServiceClient constructs a client for the\n// immuta.platform.notifications.provider.v1.ProviderService service. By default, it uses the\n// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends\n// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or\n// connect.WithGRPCWeb() options.\n//\n// The URL supplied here should be the base URL for the Connect or gRPC server (for example,\n// http://api.acme.com or https://acme.com/grpc).\nfunc NewProviderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProviderServiceClient {\n\tbaseURL = strings.TrimRight(baseURL, \"/\")\n\treturn &providerServiceClient{\n\t\tcreateProvider: connect.NewClient[v1.CreateProviderRequest, v1.CreateProviderResponse](\n\t\t\thttpClient,\n\t\t\tbaseURL+ProviderServiceCreateProviderProcedure,\n\t\t\tconnect.WithSchema(providerServiceCreateProviderMethodDescriptor),\n\t\t\tconnect.WithClientOptions(opts...),\n\t\t),\n\t\tgetProvider: connect.NewClient[v1.GetProviderRequest, v1.GetProviderResponse](\n\t\t\thttpClient,\n\t\t\tbaseURL+ProviderServiceGetProviderProcedure,\n\t\t\tconnect.WithSchema(providerServiceGetProviderMethodDescriptor),\n\t\t\tconnect.WithClientOptions(opts...),\n\t\t),\n\t\tupdateProvider: connect.NewClient[v1.UpdateProviderRequest, v1.UpdateProviderResponse](\n\t\t\thttpClient,\n\t\t\tbaseURL+ProviderServiceUpdateProviderProcedure,\n\t\t\tconnect.WithSchema(providerServiceUpdateProviderMethodDescriptor),\n\t\t\tconnect.WithClientOptions(opts...),\n\t\t),\n\t\tdeleteProvider: connect.NewClient[v1.DeleteProviderRequest, v1.DeleteProviderResponse](\n\t\t\thttpClient,\n\t\t\tbaseURL+ProviderServiceDeleteProviderProcedure,\n\t\t\tconnect.WithSchema(providerServiceDeleteProviderMethodDescriptor),\n\t\t\tconnect.WithClientOptions(opts...),\n\t\t),\n\t}\n}\n\n// providerServiceClient implements ProviderServiceClient.\ntype providerServiceClient struct {\n\tcreateProvider *connect.Client[v1.CreateProviderRequest, v1.CreateProviderResponse]\n\tgetProvider    *connect.Client[v1.GetProviderRequest, v1.GetProviderResponse]\n\tupdateProvider *connect.Client[v1.UpdateProviderRequest, v1.UpdateProviderResponse]\n\tdeleteProvider *connect.Client[v1.DeleteProviderRequest, v1.DeleteProviderResponse]\n}\n\n// CreateProvider calls immuta.platform.notifications.provider.v1.ProviderService.CreateProvider.\nfunc (c *providerServiceClient) CreateProvider(ctx context.Context, req *connect.Request[v1.CreateProviderRequest]) (*connect.Response[v1.CreateProviderResponse], error) {\n\treturn c.createProvider.CallUnary(ctx, req)\n}\n\n// GetProvider calls immuta.platform.notifications.provider.v1.ProviderService.GetProvider.\nfunc (c *providerServiceClient) GetProvider(ctx context.Context, req *connect.Request[v1.GetProviderRequest]) (*connect.Response[v1.GetProviderResponse], error) {\n\treturn c.getProvider.CallUnary(ctx, req)\n}\n\n// UpdateProvider calls immuta.platform.notifications.provider.v1.ProviderService.UpdateProvider.\nfunc (c *providerServiceClient) UpdateProvider(ctx context.Context, req *connect.Request[v1.UpdateProviderRequest]) (*connect.Response[v1.UpdateProviderResponse], error) {\n\treturn c.updateProvider.CallUnary(ctx, req)\n}\n\n// DeleteProvider calls immuta.platform.notifications.provider.v1.ProviderService.DeleteProvider.\nfunc (c *providerServiceClient) DeleteProvider(ctx context.Context, req *connect.Request[v1.DeleteProviderRequest]) (*connect.Response[v1.DeleteProviderResponse], error) {\n\treturn c.deleteProvider.CallUnary(ctx, req)\n}\n\n// ProviderServiceHandler is an implementation of the\n// immuta.platform.notifications.provider.v1.ProviderService service.\ntype ProviderServiceHandler interface {\n\tCreateProvider(context.Context, *connect.Request[v1.CreateProviderRequest]) (*connect.Response[v1.CreateProviderResponse], error)\n\tGetProvider(context.Context, *connect.Request[v1.GetProviderRequest]) (*connect.Response[v1.GetProviderResponse], error)\n\tUpdateProvider(context.Context, *connect.Request[v1.UpdateProviderRequest]) (*connect.Response[v1.UpdateProviderResponse], error)\n\tDeleteProvider(context.Context, *connect.Request[v1.DeleteProviderRequest]) (*connect.Response[v1.DeleteProviderResponse], error)\n}\n\n// NewProviderServiceHandler builds an HTTP handler from the service implementation. It returns the\n// path on which to mount the handler and the handler itself.\n//\n// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf\n// and JSON codecs. They also support gzip compression.\nfunc NewProviderServiceHandler(svc ProviderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {\n\tproviderServiceCreateProviderHandler := connect.NewUnaryHandler(\n\t\tProviderServiceCreateProviderProcedure,\n\t\tsvc.CreateProvider,\n\t\tconnect.WithSchema(providerServiceCreateProviderMethodDescriptor),\n\t\tconnect.WithHandlerOptions(opts...),\n\t)\n\tproviderServiceGetProviderHandler := connect.NewUnaryHandler(\n\t\tProviderServiceGetProviderProcedure,\n\t\tsvc.GetProvider,\n\t\tconnect.WithSchema(providerServiceGetProviderMethodDescriptor),\n\t\tconnect.WithHandlerOptions(opts...),\n\t)\n\tproviderServiceUpdateProviderHandler := connect.NewUnaryHandler(\n\t\tProviderServiceUpdateProviderProcedure,\n\t\tsvc.UpdateProvider,\n\t\tconnect.WithSchema(providerServiceUpdateProviderMethodDescriptor),\n\t\tconnect.WithHandlerOptions(opts...),\n\t)\n\tproviderServiceDeleteProviderHandler := connect.NewUnaryHandler(\n\t\tProviderServiceDeleteProviderProcedure,\n\t\tsvc.DeleteProvider,\n\t\tconnect.WithSchema(providerServiceDeleteProviderMethodDescriptor),\n\t\tconnect.WithHandlerOptions(opts...),\n\t)\n\treturn \"/immuta.platform.notifications.provider.v1.ProviderService/\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tswitch r.URL.Path {\n\t\tcase ProviderServiceCreateProviderProcedure:\n\t\t\tproviderServiceCreateProviderHandler.ServeHTTP(w, r)\n\t\tcase ProviderServiceGetProviderProcedure:\n\t\t\tproviderServiceGetProviderHandler.ServeHTTP(w, r)\n\t\tcase ProviderServiceUpdateProviderProcedure:\n\t\t\tproviderServiceUpdateProviderHandler.ServeHTTP(w, r)\n\t\tcase ProviderServiceDeleteProviderProcedure:\n\t\t\tproviderServiceDeleteProviderHandler.ServeHTTP(w, r)\n\t\tdefault:\n\t\t\thttp.NotFound(w, r)\n\t\t}\n\t})\n}\n\n// UnimplementedProviderServiceHandler returns CodeUnimplemented from all methods.\ntype UnimplementedProviderServiceHandler struct{}\n\nfunc (UnimplementedProviderServiceHandler) CreateProvider(context.Context, *connect.Request[v1.CreateProviderRequest]) (*connect.Response[v1.CreateProviderResponse], error) {\n\treturn nil, connect.NewError(connect.CodeUnimplemented, errors.New(\"immuta.platform.notifications.provider.v1.ProviderService.CreateProvider is not implemented\"))\n}\n\nfunc (UnimplementedProviderServiceHandler) GetProvider(context.Context, *connect.Request[v1.GetProviderRequest]) (*connect.Response[v1.GetProviderResponse], error) {\n\treturn nil, connect.NewError(connect.CodeUnimplemented, errors.New(\"immuta.platform.notifications.provider.v1.ProviderService.GetProvider is not implemented\"))\n}\n\nfunc (UnimplementedProviderServiceHandler) UpdateProvider(context.Context, *connect.Request[v1.UpdateProviderRequest]) (*connect.Response[v1.UpdateProviderResponse], error) {\n\treturn nil, connect.NewError(connect.CodeUnimplemented, errors.New(\"immuta.platform.notifications.provider.v1.ProviderService.UpdateProvider is not implemented\"))\n}\n\nfunc (UnimplementedProviderServiceHandler) DeleteProvider(context.Context, *connect.Request[v1.DeleteProviderRequest]) (*connect.Response[v1.DeleteProviderResponse], error) {\n\treturn nil, connect.NewError(connect.CodeUnimplemented, errors.New(\"immuta.platform.notifications.provider.v1.ProviderService.DeleteProvider is not implemented\"))\n}\n```\n\n\n\n\n\n\nkubernetes\nbase\n```yaml platform/apps/belfry/kubernetes/base/deployment.yaml\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: belfry\n  namespace: belfry\nspec:\n  replicas: 1\n  template:\n    spec:\n      securityContext:\n        fsGroup: 1000\n        runAsNonRoot: true\n        runAsUser: 1000\n      containers:\n        - image: \"platform/notification-service\"\n          name: belfry\n          resources:\n            requests:\n              cpu: \"100m\"\n              memory: \"256Mi\"\n          args:\n            - server\n          livenessProbe:\n            grpc:\n              port: 8081\n            initialDelaySeconds: 10\n          env:\n            - name: CONFIG_BASE_DIR\n              value: /opt/immuta/belfry\n          envFrom:\n            - secretRef:\n                name: belfry-secret\n          volumeMounts:\n            - name: belfry-config\n              mountPath: /opt/immuta/belfry\n      volumes:\n        - name: belfry-config\n          configMap:\n            name: belfry-config\n```\n\n```yaml platform/apps/belfry/kubernetes/base/kustomization.yaml\n---\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n  - deployment.yaml\n  - service.yaml\nlabels:\n  - includeSelectors: true\n    pairs:\n      app.kubernetes.io/component: api\n      app.kubernetes.io/name: belfry\n```\n\n```yaml platform/apps/belfry/kubernetes/base/service.yaml\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: belfry\n  namespace: belfry\nspec:\n  type: ClusterIP\n  ports:\n    - name: http\n      protocol: TCP\n      port: 8081\n      targetPort: 8081\n```\n\n\nbootstrap\n```yaml platform/apps/belfry/kubernetes/bootstrap/config.yaml\n---\nnotifications:\n  retryCount: 5\n```\n\n```yaml platform/apps/belfry/kubernetes/bootstrap/kustomization.yaml\n---\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n  - namespace.yaml\n  - serviceaccount.yaml\nsecretGenerator:\n  - name: belfry-secret\n    namespace: belfry\n    literals:\n      - DATABASE_URL=\n    options:\n      disableNameSuffixHash: true\nconfigMapGenerator:\n  - name: belfry-config\n    namespace: belfry\n    files:\n      - config.yaml\n```\n\n```yaml platform/apps/belfry/kubernetes/bootstrap/namespace.yaml\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: belfry\n```\n\n```yaml platform/apps/belfry/kubernetes/bootstrap/serviceaccount.yaml\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: belfry-sa\n  namespace: belfry\n```\n\n\ninit\n```yaml platform/apps/belfry/kubernetes/init/job.yaml\n---\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: belfry-init\nspec:\n  backoffLimit: 1\n  template:\n    spec:\n      restartPolicy: Never\n      containers:\n        - name: belfry-init\n          image: \"platform/notification-service\"\n          resources:\n            requests:\n              cpu: 100m\n              memory: 256Mi\n          args: [\"migrate\"]\n          env:\n            - name: CONFIG_BASE_DIR\n              value: /opt/immuta/belfry\n          envFrom:\n            - secretRef:\n                name: belfry-secret\n          volumeMounts:\n            - name: belfry-config\n              mountPath: /opt/immuta/belfry\n      volumes:\n        - name: belfry-config\n          configMap:\n            name: belfry-config\n```\n\n```yaml platform/apps/belfry/kubernetes/init/kustomization.yaml\n---\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n  - job.yaml\nlabels:\n  - includeSelectors: true\n    pairs:\n      app.kubernetes.io/component: init-job\n      app.kubernetes.io/name: belfry\n```\n\n\n\n```json platform/apps/belfry/project.json\n{\n  \"name\": \"belfry\",\n  \"$schema\": \"../../node_modules/nx/schemas/project-schema.json\",\n  \"projectType\": \"application\",\n  \"sourceRoot\": \"apps/belfry\",\n  \"tags\": [],\n  \"targets\": {\n    \"go-test\": {\n      \"defaultConfiguration\": \"local\",\n      \"configurations\": {\n        \"local\": {},\n        \"ci\": {\n          \"cwd\": \"apps/belfry\",\n          \"coverProfile\": \"coverage.out\",\n          \"cover\": true,\n          \"commands\": [\n            \"gocov convert coverage.out | gocov-xml > coverage.xml\"\n          ]\n        }\n      }\n    },\n    \"go-tidy\": {},\n    \"go-lint\": {},\n    \"yaml-lint\": {},\n    \"buf-lint\": {},\n    \"buf-breaking\": {\n      \"options\": {\n        \"proto_path\": \"proto\"\n      }\n    },\n    \"reset-nx-compose\": {\n      \"executor\": \"nx:run-commands\",\n      \"options\": {\n        \"commands\": [\n          \"docker compose --file docker-compose.nx.yaml --profile dbmate-up -p dbmate down -v\",\n          \"docker compose --file docker-compose.nx.yaml --profile dbmate-down -p dbmate down -v\",\n          \"docker compose --file docker-compose.nx.yaml --profile sqlc-generate -p sqlc-generate down -v\",\n          \"docker compose --file docker-compose.nx.yaml --profile sqlc-vet -p sqlc-vet down -v\"\n        ],\n        \"cwd\": \"apps/belfry\"\n      }\n    },\n    \"sqlc-vet\": {\n      \"dependsOn\": [\n        \"reset-nx-compose\"\n      ],\n      \"executor\": \"nx:run-commands\",\n      \"options\": {\n        \"commands\": [\n          \"docker compose --file docker-compose.nx.yaml up sqlc-vet --exit-code-from sqlc-vet\"\n        ],\n        \"cwd\": \"apps/belfry\",\n        \"env\": {\n          \"COMPOSE_PROFILES\": \"sqlc-vet\",\n          \"COMPOSE_PROJECT_NAME\": \"sqlc-vet\"\n        },\n        \"parallel\": false\n      }\n    },\n    \"lint\": {\n      \"dependsOn\": [\n        \"go-lint\",\n        \"yaml-lint\",\n        \"buf-lint\",\n        \"sqlc-vet\",\n        \"buf-breaking\"\n      ]\n    },\n    \"yaml-format\": {},\n    \"go-fieldalign\": {},\n    \"buf-format\": {},\n    \"format\": {\n      \"dependsOn\": [\n        \"go-fieldalign\",\n        \"yaml-format\",\n        \"buf-format\"\n      ]\n    },\n    \"snyk\": {\n      \"options\": {\n        \"cwd\": \"apps/belfry\"\n      }\n    },\n    \"dbmate-new\": {},\n    \"dbmate-up\": {\n      \"dependsOn\": [\n        \"reset-nx-compose\"\n      ],\n      \"executor\": \"nx:run-commands\",\n      \"options\": {\n        \"commands\": [\n          \"docker compose --file docker-compose.nx.yaml up dbmate-up --exit-code-from dbmate-up\"\n        ],\n        \"cwd\": \"apps/belfry\",\n        \"env\": {\n          \"COMPOSE_PROFILES\": \"dbmate-up\",\n          \"COMPOSE_PROJECT_NAME\": \"dbmate\"\n        },\n        \"parallel\": false\n      }\n    },\n    \"dbmate-down\": {\n      \"dependsOn\": [\n        \"reset-nx-compose\",\n        \"dbmate-up\"\n      ],\n      \"executor\": \"nx:run-commands\",\n      \"options\": {\n        \"commands\": [\n          \"docker compose --file docker-compose.nx.yaml up dbmate-down --exit-code-from dbmate-down\"\n        ],\n        \"cwd\": \"apps/belfry\",\n        \"env\": {\n          \"COMPOSE_PROFILES\": \"dbmate-down\",\n          \"COMPOSE_PROJECT_NAME\": \"dbmate\"\n        },\n        \"parallel\": false\n      }\n    },\n    \"sqlc-generate\": {\n      \"dependsOn\": [\n        \"reset-nx-compose\"\n      ],\n      \"executor\": \"nx:run-commands\",\n      \"options\": {\n        \"commands\": [\n          \"docker compose --file docker-compose.nx.yaml up sqlc-generate --exit-code-from sqlc-generate\"\n        ],\n        \"cwd\": \"apps/belfry\",\n        \"env\": {\n          \"COMPOSE_PROFILES\": \"slqc-generate\",\n          \"COMPOSE_PROJECT_NAME\": \"sqlc-generate\"\n        },\n        \"parallel\": false\n      }\n    },\n    \"buf-generate\": {\n      \"command\": \"buf generate\",\n      \"options\": {\n        \"cwd\": \"apps/belfry\"\n      }\n    },\n    \"buf-deps\": {\n      \"command\": \"buf dep update\",\n      \"options\": {\n        \"cwd\": \"apps/belfry\"\n      }\n    },\n    \"mockery-generate\": {\n      \"dependsOn\": [\n        \"sqlc-generate\"\n      ],\n      \"command\": \"mockery\",\n      \"options\": {\n        \"cwd\": \"apps/belfry\"\n      }\n    },\n    \"generate\": {\n      \"defaultConfiguration\": \"ci\",\n      \"dependsOn\": [\n        \"dbmate-up\",\n        \"sqlc-generate\",\n        \"mockery-generate\",\n        \"buf-generate\"\n      ],\n      \"parallelism\": false,\n      \"configurations\": {\n        \"ci\": {\n          \"command\": \"[[ -n $(git status --porcelain || [[ $? -eq 1 ]]) ]] && echo 'Generated code is not up-to-date' && git status --short && exit 1\"\n        }\n      }\n    },\n    \"container\": {\n      \"executor\": \"nx:run-commands\",\n      \"defaultConfiguration\": \"ci\",\n      \"options\": {\n        \"cwd\": \"apps/belfry\"\n      },\n      \"configurations\": {\n        \"ci\": {\n          \"command\": [\n            \"skaffold build\"\n          ]\n        },\n        \"cd\": {\n          \"command\": [\n            \"skaffold build --profile cd --push\"\n          ]\n        }\n      }\n    },\n    \"snyk-container\": {\n      \"executor\": \"nx:run-commands\",\n      \"defaultConfiguration\": \"ci\",\n      \"dependsOn\": [\n        \"container\"\n      ],\n      \"configurations\": {\n        \"ci\": {\n          \"command\": \"snyk container test platform/notification-service:latest\"\n        },\n        \"cd\": {\n          \"command\": \"snyk container monitor registry.ic-ops.net/platform/notification-service:git-$(echo $GITHUB_SHA | cut -c1-7) --project-name=platform/notification-service:master --file={projectRoot}/build/package/Dockerfile --app-vulns\"\n        }\n      }\n    },\n    \"ci\": {\n      \"dependsOn\": [\n        \"lint\",\n        \"go-test\",\n        \"generate\",\n        \"snyk\"\n      ],\n      \"parallelism\": false\n    },\n    \"build\": {\n      \"dependsOn\": [\n        \"container\",\n        \"snyk-container\"\n      ],\n      \"parallelism\": false\n    },\n    \"cd\": {\n      \"dependsOn\": [\n        \"build\"\n      ],\n      \"command\": \"./hack/deploy-nonprod.sh\",\n      \"options\": {\n        \"cwd\": \"apps/belfry\"\n      }\n    }\n  }\n}\n```\n\nproto\ndelivery/v1\n```proto platform/apps/belfry/proto/delivery/v1/delivery.proto\nsyntax = \"proto3\";\n\npackage immuta.platform.notifications.delivery.v1;\n\nimport \"buf/validate/validate.proto\";\nimport \"google/protobuf/timestamp.proto\";\n\nservice DeliveryService {\n  rpc GetDelivery(GetDeliveryRequest) returns (GetDeliveryResponse);\n  rpc UpdateDelivery(UpdateDeliveryRequest) returns (UpdateDeliveryResponse);\n}\n\nmessage GetDeliveryRequest {\n  string id = 1 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).string.uuid = true\n  ];\n}\n\nmessage GetDeliveryResponse {\n  Delivery delivery = 1;\n}\n\nmessage UpdateDeliveryRequest {\n  string id = 1 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).string.uuid = true\n  ];\n  optional DeliveryStatus status = 2 [(buf.validate.field).enum.defined_only = true];\n  optional google.protobuf.Timestamp sent_at = 3;\n  optional google.protobuf.Timestamp read_at = 4;\n}\n\nmessage UpdateDeliveryResponse {\n  Delivery delivery = 1;\n}\n\nenum DeliveryStatus {\n  DELIVERY_STATUS_UNSPECIFIED = 0;\n  DELIVERY_STATUS_CREATED = 1;\n  DELIVERY_STATUS_DELIVERED = 2;\n  DELIVERY_STATUS_FAILED = 3;\n}\n\nmessage Delivery {\n  string id = 1 [(buf.validate.field).required = true];\n  string notification_id = 2 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).string.uuid = true\n  ];\n  string provider_id = 3 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).string.uuid = true\n  ];\n  string recipient_id = 4 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).string.uuid = true\n  ];\n  DeliveryStatus status = 5 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).enum.defined_only = true\n  ];\n  google.protobuf.Timestamp sent_at = 6;\n  google.protobuf.Timestamp read_at = 7;\n}\n```\n\n\ninbox/v1\n```proto platform/apps/belfry/proto/inbox/v1/inbox.proto\nsyntax = \"proto3\";\n\npackage immuta.platform.notifications.inbox.v1;\n\nimport \"buf/validate/validate.proto\";\nimport \"google/protobuf/timestamp.proto\";\nimport \"notification/v1/notification.proto\";\nimport \"provider/v1/provider.proto\";\n\nservice InboxService {\n  rpc GetInboxMessages(GetInboxMessagesRequest) returns (GetInboxMessagesResponse);\n}\n\nmessage GetInboxMessagesRequest {\n  string tenant_id = 1 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).string.uuid = true\n  ];\n  string recipient_id = 2 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).string.uuid = true\n  ];\n  immuta.platform.notifications.provider.v1.LookupIdentity provider_id = 3;\n}\n\nmessage GetInboxMessagesResponse {\n  repeated InboxMessage messages = 1;\n}\n\nmessage InboxMessage {\n  string id = 1 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).string.uuid = true\n  ];\n  string tenant_id = 2 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).string.uuid = true\n  ];\n  immuta.platform.notifications.notification.v1.NotificationPriority priority = 3 [(buf.validate.field).enum.defined_only = true];\n  string type = 4 [(buf.validate.field).required = true];\n  string message = 5 [(buf.validate.field).required = true];\n  map<string, string> data = 6;\n  google.protobuf.Timestamp created_at = 7;\n}\n```\n\n\nnotification/v1\n```proto platform/apps/belfry/proto/notification/v1/notification.proto\nsyntax = \"proto3\";\n\npackage immuta.platform.notifications.notification.v1;\n\nimport \"buf/validate/validate.proto\";\nimport \"google/protobuf/timestamp.proto\";\nimport \"provider/v1/provider.proto\";\n\nservice NotificationService {\n  rpc CreateNotification(CreateNotificationRequest) returns (CreateNotificationResponse);\n  rpc GetNotification(GetNotificationRequest) returns (GetNotificationResponse);\n}\n\nenum NotificationPriority {\n  NOTIFICATION_PRIORITY_UNSPECIFIED = 0;\n  NOTIFICATION_PRIORITY_LOW = 1;\n  NOTIFICATION_PRIORITY_MEDIUM = 2;\n  NOTIFICATION_PRIORITY_HIGH = 3;\n  NOTIFICATION_PRIORITY_CRITICAL = 4;\n}\n\nenum RecipientType {\n  RECIPIENT_TYPE_UNSPECIFIED = 0;\n  RECIPIENT_TYPE_USER = 1;\n  RECIPIENT_TYPE_GROUP = 2;\n}\n\nmessage Recipient {\n  string id = 1 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).string.uuid = true\n  ];\n  RecipientType type = 2 [(buf.validate.field).required = true];\n  // This should be removed when we can call a user service to get recipient info.\n  // Irrelevant for group recipients.\n  string email = 3 [(buf.validate.field).string.email = true];\n}\n\nmessage NotificationTypeIdentity {\n  oneof identifier {\n    option (buf.validate.oneof).required = true;\n\n    string id = 1 [(buf.validate.field).string.uuid = true];\n    string name = 2 [(buf.validate.field).string = {pattern: \".*:.*\"}];\n  }\n}\n\nmessage CreateNotificationRequest {\n  repeated Recipient recipients = 1 [(buf.validate.field).repeated.min_items = 1];\n  string tenant_id = 2 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).string.uuid = true\n  ];\n  NotificationPriority priority = 3 [(buf.validate.field).enum.defined_only = true];\n  NotificationTypeIdentity type = 4 [(buf.validate.field).required = true];\n  string message = 5 [(buf.validate.field).required = true];\n  map<string, string> data = 6;\n  repeated immuta.platform.notifications.provider.v1.LookupIdentity inboxes = 7;\n}\n\nmessage CreateNotificationResponse {\n  string id = 1 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).string.uuid = true\n  ];\n}\n\nmessage GetNotificationRequest {\n  string id = 1 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).string.uuid = true\n  ];\n}\n\nmessage GetNotificationResponse {\n  Notification notification = 1;\n}\n\nmessage Notification {\n  string id = 1 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).string.uuid = true\n  ];\n  string tenant_id = 2 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).string.uuid = true\n  ];\n  NotificationPriority priority = 3 [(buf.validate.field).enum.defined_only = true];\n  string type = 4 [(buf.validate.field).required = true];\n  string message = 5 [(buf.validate.field).required = true];\n  map<string, string> data = 6;\n  string status = 7;\n  google.protobuf.Timestamp created_at = 8;\n}\n```\n\n\nprovider/v1\n```proto platform/apps/belfry/proto/provider/v1/provider.proto\nsyntax = \"proto3\";\n\npackage immuta.platform.notifications.provider.v1;\n\nimport \"buf/validate/validate.proto\";\n\nservice ProviderService {\n  rpc CreateProvider(CreateProviderRequest) returns (CreateProviderResponse);\n  rpc GetProvider(GetProviderRequest) returns (GetProviderResponse);\n  rpc UpdateProvider(UpdateProviderRequest) returns (UpdateProviderResponse);\n  rpc DeleteProvider(DeleteProviderRequest) returns (DeleteProviderResponse);\n}\n\nenum ProviderType {\n  PROVIDER_TYPE_UNSPECIFIED = 0;\n  PROVIDER_TYPE_INBOX = 1;\n  PROVIDER_TYPE_EMAIL = 2;\n}\n\nmessage LookupIdentity {\n  oneof identifier {\n    option (buf.validate.oneof).required = true;\n\n    string id = 1 [(buf.validate.field).string.uuid = true];\n    string name = 2 [(buf.validate.field).string = {pattern: \".*:.*\"}];\n  }\n}\n\nmessage CreateProviderRequest {\n  ProviderType type = 1 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).enum.defined_only = true\n  ];\n  string name = 2 [(buf.validate.field).required = true];\n  optional string workflow_name = 3;\n  optional string workflow_task_queue = 4;\n}\n\nmessage CreateProviderResponse {\n  string id = 1 [(buf.validate.field).string.uuid = true];\n}\n\nmessage GetProviderRequest {\n  LookupIdentity id = 1;\n}\n\nmessage GetProviderResponse {\n  Provider provider = 1;\n}\n\nmessage DeleteProviderRequest {\n  string id = 1 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).string.uuid = true\n  ];\n}\n\nmessage DeleteProviderResponse {}\n\nmessage UpdateProviderRequest {\n  string id = 1 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).string.uuid = true\n  ];\n  optional string workflow_name = 3;\n  optional string workflow_task_queue = 4;\n}\n\nmessage UpdateProviderResponse {\n  Provider provider = 1;\n}\n\nmessage Provider {\n  string id = 1 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).string.uuid = true\n  ];\n  ProviderType type = 2 [\n    (buf.validate.field).required = true,\n    (buf.validate.field).enum.defined_only = true\n  ];\n  string name = 3 [(buf.validate.field).required = true];\n  string workflow_name = 4 [(buf.validate.field).required = true];\n  string workflow_task_queue = 5 [(buf.validate.field).required = true];\n}\n```\n\n\n\n```yaml platform/apps/belfry/skaffold.yaml\n---\napiVersion: skaffold/v4beta11\nkind: Config\nmetadata:\n  name: belfry\nbuild:\n  platforms: [\"linux/amd64\"]\n  tagPolicy:\n    sha256: {}\n  local:\n    concurrency: 0\n  artifacts:\n    - image: platform/notification-service\n      context: ../..\n      docker:\n        dockerfile: apps/belfry/build/package/Dockerfile\n        buildArgs:\n          SERVICE_VERSION: \"{{ .IMAGE_TAG }}\"\nmanifests:\n  kustomize:\n    paths: [\"./deploy/local\"]\ndeploy:\n  kubectl:\n    defaultNamespace: \"belfry\"\nprofiles:\n  - name: cd\n    patches:\n      - op: replace\n        path: /build/tagPolicy\n        value:\n          gitCommit:\n            variant: AbbrevCommitSha\n            prefix: \"git-\"\n            ignoreChanges: true\n      - op: replace\n        path: /build/artifacts/0/image\n        value: registry.ic-ops.net/platform/notification-service\n  - name: init\n    patches:\n      - op: replace\n        path: /deploy/kustomize/path\n        value: [\"./deployments/kubernetes/init\"]\n```\n\n```yaml platform/apps/belfry/sqlc.yaml\n---\nversion: \"2\"\nservers:\n  - engine: postgresql\n    uri: \"${DATABASE_URL}\"\nsql:\n  - engine: \"postgresql\"\n    queries: \"db/queries\"\n    schema: \"db/migrations\"\n    database:\n      managed: true\n    rules:\n      - sqlc/db-prepare\n    gen:\n      go:\n        package: \"database\"\n        out: \"internal/database\"\n        sql_package: \"pgx/v5\"\n        emit_interface: true\n        emit_pointers_for_null_types: true\n        emit_result_struct_pointers: true\n        emit_enum_valid_method: true\n        overrides:\n          - db_type: \"uuid\"\n            go_type:\n              type: \"string\"\n          - column: belfry.notifications.data\n            go_type:\n              type: \"map[string]string\"\n          - column: belfry.inbox_messages.data\n            go_type:\n              type: \"map[string]string\"\noverrides:\n  go:\n    rename:\n      belfry_delivery: Delivery\n      belfry_delivery_status: DeliveryStatus\n      belfry_delivery_status_created: DeliveryStatusCreated\n      belfry_delivery_status_delivered: DeliveryStatusDelivered\n      belfry_delivery_status_failed: DeliveryStatusFailed\n      belfry_provider: Provider\n      belfry_provider_type: ProviderType\n      belfry_provider_type_email: ProviderTypeEmail\n      belfry_provider_type_inbox: ProviderTypeInbox\n      belfry_notification: Notification\n      belfry_notification_status: NotificationStatus\n      belfry_notification_status_created: NotificationStatusCreated\n      belfry_notification_status_failed: NotificationStatusFailed\n      belfry_notification_status_processed: NotificationStatusProcessed\n      belfry_notification_type: NotificationType\n      belfry_notification_type_approval: NotificationTypeApproval\n      belfry_notification_type_digest: NotificationTypeDigest\n      belfry_notification_type_information: NotificationTypeInformation\n      belfry_inbox_message: InboxMessage\n      belfry_recipient: Recipient\n      belfry_recipient_preference: RecipientPreference\n      belfry_recipient_type: RecipientType\n      belfry_recipient_type_user: RecipientTypeUser\n```\n\n\nGenerate API documentation and the beginnings of a guide for how to register a provider and send notifications from another application\nVALUES (\n    gen_random_uuid(),\n    ARRAY[gen_random_uuid(), gen_random_uuid()],\n    ARRAY[gen_random_uuid()], \n    'Your notification message',\n    0,\n    (SELECT id FROM belfry.notification_types WHERE name = 'information' AND category = 'general'),\n    '{\"key1\": \"value1\", \"key2\": \"value2\"}'::jsonb\n);\n\n```\n\n**Key Changes and Explanation:**\n\n* **UUID Generation:**  Uses `gen_random_uuid()` directly within the `VALUES` clause to generate new UUIDs for `tenant_id`, and within `ARRAY` constructors for `recipient_ids` and `provider_ids`.  This is the most concise and typical way to generate UUIDs on insertion in PostgreSQL.\n\n* **Array Constructor:** The `ARRAY[]` constructor explicitly creates UUID arrays for `recipient_ids` and `provider_ids`, making the intent clearer.\n\n**Important Note:** This assumes you are using PostgreSQL because of the `gen_random_uuid()` function and the `::jsonb` cast.  If you are using a different database, you will need to adapt the UUID generation and JSON handling accordingly.  For example, in some databases you might need to generate the UUIDs separately and then use the generated values in the `INSERT` statement.\n\n\n**Example for other databases (illustrative, adapt as needed):**\n\n```sql\n-- Example (pseudo-code, adapt to your database)\nDECLARE @tenantId uniqueidentifier = NEWID();  -- SQL Server\nDECLARE @recipientId1 uniqueidentifier = NEWID();\nDECLARE @recipientId2 uniqueidentifier = NEWID();\n-- ... other UUIDs\n\nINSERT INTO belfry.notifications (tenant_id, recipient_ids, provider_ids, message, priority, type_id, data)\nVALUES (\n    @tenantId,\n    [@recipientId1, @recipientId2],  -- Array syntax might differ\n    [@providerId],       -- Array syntax might differ\n    'Your notification message',\n    0,\n    (SELECT id FROM belfry.notification_types WHERE name = 'information' AND category = 'general'),\n    '{\"key1\": \"value1\", \"key2\": \"value2\"}' -- JSON handling might differ\n);\n```\n\n\ntest again\n\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":448}}},{"id":{"replica_id":0,"value":37},"start":5838,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":449}}},{"id":{"replica_id":0,"value":38},"start":8632,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":450}}},{"id":{"replica_id":0,"value":117},"start":8668,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":451}}},{"id":{"replica_id":0,"value":118},"start":428210,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":452}}},{"id":{"replica_id":0,"value":421},"start":428211,"metadata":{"role":"assistant","status":{"Error":"error during streamGenerateContent, status code: 429, body: {\n  \"error\": {\n    \"code\": 429,\n    \"message\": \"Resource has been exhausted (e.g. check quota).\",\n    \"status\": \"RESOURCE_EXHAUSTED\"\n  }\n}"},"timestamp":{"replica_id":0,"value":453}}},{"id":{"replica_id":0,"value":422},"start":428212,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":454}}},{"id":{"replica_id":0,"value":445},"start":428223,"metadata":{"role":"assistant","status":{"Error":"error during streamGenerateContent, status code: 429, body: {\n  \"error\": {\n    \"code\": 429,\n    \"message\": \"Resource has been exhausted (e.g. check quota).\",\n    \"status\": \"RESOURCE_EXHAUSTED\"\n  }\n}"},"timestamp":{"replica_id":0,"value":455}}},{"id":{"replica_id":0,"value":446},"start":428224,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":456}}}],"summary":"SQL Insert for Belfry Notifications","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":3,"end":2341},"icon":"File","label":"platform/apps/belfry/db/migrations/20241112190351_initial.sql","metadata":{"path":"platform/apps/belfry/db/migrations/20241112190351_initial.sql"}},{"range":{"start":2342,"end":5733},"icon":"File","label":"platform/apps/belfry/db/migrations/20241113190712_recipients_tables.sql","metadata":{"path":"platform/apps/belfry/db/migrations/20241113190712_recipients_tables.sql"}},{"range":{"start":8783,"end":426135},"icon":"Folder","label":"platform/apps/belfry","metadata":null},{"range":{"start":8804,"end":9452},"icon":"File","label":"platform/apps/belfry/.air.toml","metadata":{"path":"platform/apps/belfry/.air.toml"}},{"range":{"start":9453,"end":9601},"icon":"File","label":"platform/apps/belfry/.env","metadata":{"path":"platform/apps/belfry/.env"}},{"range":{"start":9602,"end":9680},"icon":"File","label":"platform/apps/belfry/.gitignore","metadata":{"path":"platform/apps/belfry/.gitignore"}},{"range":{"start":9681,"end":9747},"icon":"File","label":"platform/apps/belfry/.mise.toml","metadata":{"path":"platform/apps/belfry/.mise.toml"}},{"range":{"start":9748,"end":10187},"icon":"File","label":"platform/apps/belfry/.mockery.yaml","metadata":{"path":"platform/apps/belfry/.mockery.yaml"}},{"range":{"start":10188,"end":12306},"icon":"File","label":"platform/apps/belfry/README.md","metadata":{"path":"platform/apps/belfry/README.md"}},{"range":{"start":12307,"end":12788},"icon":"File","label":"platform/apps/belfry/buf.gen.yaml","metadata":{"path":"platform/apps/belfry/buf.gen.yaml"}},{"range":{"start":12789,"end":13114},"icon":"File","label":"platform/apps/belfry/buf.lock","metadata":{"path":"platform/apps/belfry/buf.lock"}},{"range":{"start":13115,"end":13416},"icon":"File","label":"platform/apps/belfry/buf.yaml","metadata":{"path":"platform/apps/belfry/buf.yaml"}},{"range":{"start":13417,"end":14626},"icon":"Folder","label":"build/package","metadata":null},{"range":{"start":13431,"end":14625},"icon":"File","label":"platform/apps/belfry/build/package/Dockerfile","metadata":{"path":"platform/apps/belfry/build/package/Dockerfile"}},{"range":{"start":14627,"end":15998},"icon":"Folder","label":"cmd/belfry","metadata":null},{"range":{"start":14638,"end":15997},"icon":"File","label":"platform/apps/belfry/cmd/belfry/main.go","metadata":{"path":"platform/apps/belfry/cmd/belfry/main.go"}},{"range":{"start":15999,"end":33864},"icon":"Folder","label":"db","metadata":null},{"range":{"start":16002,"end":16738},"icon":"File","label":"platform/apps/belfry/db/migrate.go","metadata":{"path":"platform/apps/belfry/db/migrate.go"}},{"range":{"start":16739,"end":22393},"icon":"Folder","label":"migrations","metadata":null},{"range":{"start":16750,"end":19088},"icon":"File","label":"platform/apps/belfry/db/migrations/20241112190351_initial.sql","metadata":{"path":"platform/apps/belfry/db/migrations/20241112190351_initial.sql"}},{"range":{"start":19089,"end":22392},"icon":"File","label":"platform/apps/belfry/db/migrations/20241113190712_recipients_tables.sql","metadata":{"path":"platform/apps/belfry/db/migrations/20241113190712_recipients_tables.sql"}},{"range":{"start":22394,"end":25668},"icon":"Folder","label":"queries","metadata":null},{"range":{"start":22402,"end":23564},"icon":"File","label":"platform/apps/belfry/db/queries/deliveries.sql","metadata":{"path":"platform/apps/belfry/db/queries/deliveries.sql"}},{"range":{"start":23565,"end":23755},"icon":"File","label":"platform/apps/belfry/db/queries/inbox.sql","metadata":{"path":"platform/apps/belfry/db/queries/inbox.sql"}},{"range":{"start":23756,"end":24171},"icon":"File","label":"platform/apps/belfry/db/queries/notification_types.sql","metadata":{"path":"platform/apps/belfry/db/queries/notification_types.sql"}},{"range":{"start":24172,"end":24959},"icon":"File","label":"platform/apps/belfry/db/queries/notifications.sql","metadata":{"path":"platform/apps/belfry/db/queries/notifications.sql"}},{"range":{"start":24960,"end":25667},"icon":"File","label":"platform/apps/belfry/db/queries/providers.sql","metadata":{"path":"platform/apps/belfry/db/queries/providers.sql"}},{"range":{"start":25669,"end":33863},"icon":"File","label":"platform/apps/belfry/db/schema_snapshot.sql","metadata":{"path":"platform/apps/belfry/db/schema_snapshot.sql"}},{"range":{"start":33865,"end":46462},"icon":"Folder","label":"deploy","metadata":null},{"range":{"start":33872,"end":37295},"icon":"Folder","label":"local","metadata":null},{"range":{"start":33878,"end":34088},"icon":"File","label":"platform/apps/belfry/deploy/local/config.yaml","metadata":{"path":"platform/apps/belfry/deploy/local/config.yaml"}},{"range":{"start":34089,"end":34967},"icon":"File","label":"platform/apps/belfry/deploy/local/deployment-patch.yaml","metadata":{"path":"platform/apps/belfry/deploy/local/deployment-patch.yaml"}},{"range":{"start":34968,"end":35790},"icon":"File","label":"platform/apps/belfry/deploy/local/kustomization.yaml","metadata":{"path":"platform/apps/belfry/deploy/local/kustomization.yaml"}},{"range":{"start":35791,"end":36088},"icon":"File","label":"platform/apps/belfry/deploy/local/pvc.yaml","metadata":{"path":"platform/apps/belfry/deploy/local/pvc.yaml"}},{"range":{"start":36089,"end":36333},"icon":"File","label":"platform/apps/belfry/deploy/local/service.yaml","metadata":{"path":"platform/apps/belfry/deploy/local/service.yaml"}},{"range":{"start":36334,"end":37294},"icon":"File","label":"platform/apps/belfry/deploy/local/statefulset.yaml","metadata":{"path":"platform/apps/belfry/deploy/local/statefulset.yaml"}},{"range":{"start":37296,"end":46461},"icon":"Folder","label":"saas","metadata":null},{"range":{"start":37301,"end":40713},"icon":"Folder","label":"eks-saas-nonprod-use1-1","metadata":null},{"range":{"start":37325,"end":38314},"icon":"Folder","label":"bootstrap","metadata":null},{"range":{"start":37335,"end":37713},"icon":"File","label":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use1-1/bootstrap/kustomization.yaml","metadata":{"path":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use1-1/bootstrap/kustomization.yaml"}},{"range":{"start":37714,"end":38313},"icon":"File","label":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use1-1/bootstrap/secret.yaml","metadata":{"path":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use1-1/bootstrap/secret.yaml"}},{"range":{"start":38315,"end":39351},"icon":"Folder","label":"init","metadata":null},{"range":{"start":38320,"end":38893},"icon":"File","label":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use1-1/init/job-patch.yaml","metadata":{"path":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use1-1/init/job-patch.yaml"}},{"range":{"start":38894,"end":39350},"icon":"File","label":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use1-1/init/kustomization.yaml","metadata":{"path":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use1-1/init/kustomization.yaml"}},{"range":{"start":39352,"end":40712},"icon":"Folder","label":"services","metadata":null},{"range":{"start":39361,"end":40386},"icon":"File","label":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use1-1/services/deployment-patch.yaml","metadata":{"path":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use1-1/services/deployment-patch.yaml"}},{"range":{"start":40387,"end":40711},"icon":"File","label":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use1-1/services/kustomization.yaml","metadata":{"path":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use1-1/services/kustomization.yaml"}},{"range":{"start":40714,"end":44126},"icon":"Folder","label":"eks-saas-nonprod-use2-1","metadata":null},{"range":{"start":40738,"end":41727},"icon":"Folder","label":"bootstrap","metadata":null},{"range":{"start":40748,"end":41126},"icon":"File","label":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use2-1/bootstrap/kustomization.yaml","metadata":{"path":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use2-1/bootstrap/kustomization.yaml"}},{"range":{"start":41127,"end":41726},"icon":"File","label":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use2-1/bootstrap/secret.yaml","metadata":{"path":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use2-1/bootstrap/secret.yaml"}},{"range":{"start":41728,"end":42764},"icon":"Folder","label":"init","metadata":null},{"range":{"start":41733,"end":42306},"icon":"File","label":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use2-1/init/job-patch.yaml","metadata":{"path":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use2-1/init/job-patch.yaml"}},{"range":{"start":42307,"end":42763},"icon":"File","label":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use2-1/init/kustomization.yaml","metadata":{"path":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use2-1/init/kustomization.yaml"}},{"range":{"start":42765,"end":44125},"icon":"Folder","label":"services","metadata":null},{"range":{"start":42774,"end":43799},"icon":"File","label":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use2-1/services/deployment-patch.yaml","metadata":{"path":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use2-1/services/deployment-patch.yaml"}},{"range":{"start":43800,"end":44124},"icon":"File","label":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use2-1/services/kustomization.yaml","metadata":{"path":"platform/apps/belfry/deploy/saas/eks-saas-nonprod-use2-1/services/kustomization.yaml"}},{"range":{"start":44127,"end":46460},"icon":"Folder","label":"netpol","metadata":null},{"range":{"start":44134,"end":44739},"icon":"File","label":"platform/apps/belfry/deploy/saas/netpol/allow-dns.yaml","metadata":{"path":"platform/apps/belfry/deploy/saas/netpol/allow-dns.yaml"}},{"range":{"start":44740,"end":46273},"icon":"File","label":"platform/apps/belfry/deploy/saas/netpol/belfry.yaml","metadata":{"path":"platform/apps/belfry/deploy/saas/netpol/belfry.yaml"}},{"range":{"start":46274,"end":46459},"icon":"File","label":"platform/apps/belfry/deploy/saas/netpol/kustomization.yaml","metadata":{"path":"platform/apps/belfry/deploy/saas/netpol/kustomization.yaml"}},{"range":{"start":46463,"end":48575},"icon":"File","label":"platform/apps/belfry/docker-compose.nx.yaml","metadata":{"path":"platform/apps/belfry/docker-compose.nx.yaml"}},{"range":{"start":48576,"end":49411},"icon":"File","label":"platform/apps/belfry/docker-compose.yaml","metadata":{"path":"platform/apps/belfry/docker-compose.yaml"}},{"range":{"start":49412,"end":55371},"icon":"File","label":"platform/apps/belfry/go.mod","metadata":{"path":"platform/apps/belfry/go.mod"}},{"range":{"start":55372,"end":82411},"icon":"File","label":"platform/apps/belfry/go.sum","metadata":{"path":"platform/apps/belfry/go.sum"}},{"range":{"start":82412,"end":83244},"icon":"Folder","label":"hack","metadata":null},{"range":{"start":82417,"end":83243},"icon":"File","label":"platform/apps/belfry/hack/deploy-nonprod.sh","metadata":{"path":"platform/apps/belfry/hack/deploy-nonprod.sh"}},{"range":{"start":83245,"end":405305},"icon":"Folder","label":"internal","metadata":null},{"range":{"start":83254,"end":86636},"icon":"Folder","label":"config","metadata":null},{"range":{"start":83261,"end":86635},"icon":"File","label":"platform/apps/belfry/internal/config/config.go","metadata":{"path":"platform/apps/belfry/internal/config/config.go"}},{"range":{"start":86637,"end":176797},"icon":"Folder","label":"database","metadata":null},{"range":{"start":86646,"end":87271},"icon":"File","label":"platform/apps/belfry/internal/database/db.go","metadata":{"path":"platform/apps/belfry/internal/database/db.go"}},{"range":{"start":87272,"end":90102},"icon":"File","label":"platform/apps/belfry/internal/database/db_test.go","metadata":{"path":"platform/apps/belfry/internal/database/db_test.go"}},{"range":{"start":90103,"end":94448},"icon":"File","label":"platform/apps/belfry/internal/database/deliveries.sql.go","metadata":{"path":"platform/apps/belfry/internal/database/deliveries.sql.go"}},{"range":{"start":94449,"end":97804},"icon":"File","label":"platform/apps/belfry/internal/database/deliveries_test.go","metadata":{"path":"platform/apps/belfry/internal/database/deliveries_test.go"}},{"range":{"start":97805,"end":99012},"icon":"File","label":"platform/apps/belfry/internal/database/inbox.sql.go","metadata":{"path":"platform/apps/belfry/internal/database/inbox.sql.go"}},{"range":{"start":99013,"end":101613},"icon":"File","label":"platform/apps/belfry/internal/database/inbox_test.go","metadata":{"path":"platform/apps/belfry/internal/database/inbox_test.go"}},{"range":{"start":101614,"end":139818},"icon":"Folder","label":"mocks","metadata":null},{"range":{"start":101620,"end":139817},"icon":"File","label":"platform/apps/belfry/internal/database/mocks/mock_querier.go","metadata":{"path":"platform/apps/belfry/internal/database/mocks/mock_querier.go"}},{"range":{"start":139819,"end":145876},"icon":"File","label":"platform/apps/belfry/internal/database/models.go","metadata":{"path":"platform/apps/belfry/internal/database/models.go"}},{"range":{"start":145877,"end":147642},"icon":"File","label":"platform/apps/belfry/internal/database/notification_types.sql.go","metadata":{"path":"platform/apps/belfry/internal/database/notification_types.sql.go"}},{"range":{"start":147643,"end":151699},"icon":"File","label":"platform/apps/belfry/internal/database/notifications.sql.go","metadata":{"path":"platform/apps/belfry/internal/database/notifications.sql.go"}},{"range":{"start":151700,"end":154562},"icon":"File","label":"platform/apps/belfry/internal/database/providers.sql.go","metadata":{"path":"platform/apps/belfry/internal/database/providers.sql.go"}},{"range":{"start":154563,"end":158896},"icon":"File","label":"platform/apps/belfry/internal/database/providers_test.go","metadata":{"path":"platform/apps/belfry/internal/database/providers_test.go"}},{"range":{"start":158897,"end":174981},"icon":"Folder","label":"querier","metadata":null},{"range":{"start":158905,"end":165641},"icon":"Folder","label":"mocks","metadata":null},{"range":{"start":158911,"end":162379},"icon":"File","label":"platform/apps/belfry/internal/database/querier/mocks/mock_notificationquerier.go","metadata":{"path":"platform/apps/belfry/internal/database/querier/mocks/mock_notificationquerier.go"}},{"range":{"start":162380,"end":165640},"icon":"File","label":"platform/apps/belfry/internal/database/querier/mocks/mock_providerquerier.go","metadata":{"path":"platform/apps/belfry/internal/database/querier/mocks/mock_providerquerier.go"}},{"range":{"start":165642,"end":167018},"icon":"File","label":"platform/apps/belfry/internal/database/querier/notification_querier.go","metadata":{"path":"platform/apps/belfry/internal/database/querier/notification_querier.go"}},{"range":{"start":167019,"end":170271},"icon":"File","label":"platform/apps/belfry/internal/database/querier/notification_querier_test.go","metadata":{"path":"platform/apps/belfry/internal/database/querier/notification_querier_test.go"}},{"range":{"start":170272,"end":171598},"icon":"File","label":"platform/apps/belfry/internal/database/querier/provider_querier.go","metadata":{"path":"platform/apps/belfry/internal/database/querier/provider_querier.go"}},{"range":{"start":171599,"end":174980},"icon":"File","label":"platform/apps/belfry/internal/database/querier/provider_querier_test.go","metadata":{"path":"platform/apps/belfry/internal/database/querier/provider_querier_test.go"}},{"range":{"start":174982,"end":176796},"icon":"File","label":"platform/apps/belfry/internal/database/querier.go","metadata":{"path":"platform/apps/belfry/internal/database/querier.go"}},{"range":{"start":176798,"end":179598},"icon":"Folder","label":"instrumentation","metadata":null},{"range":{"start":176814,"end":179597},"icon":"File","label":"platform/apps/belfry/internal/instrumentation/otel.go","metadata":{"path":"platform/apps/belfry/internal/instrumentation/otel.go"}},{"range":{"start":179599,"end":184567},"icon":"Folder","label":"server","metadata":null},{"range":{"start":179606,"end":179927},"icon":"File","label":"platform/apps/belfry/internal/server/reflector.go","metadata":{"path":"platform/apps/belfry/internal/server/reflector.go"}},{"range":{"start":179928,"end":184566},"icon":"File","label":"platform/apps/belfry/internal/server/server.go","metadata":{"path":"platform/apps/belfry/internal/server/server.go"}},{"range":{"start":184568,"end":405304},"icon":"Folder","label":"service","metadata":null},{"range":{"start":184576,"end":231222},"icon":"Folder","label":"delivery","metadata":null},{"range":{"start":184585,"end":188330},"icon":"File","label":"platform/apps/belfry/internal/service/delivery/delivery.go","metadata":{"path":"platform/apps/belfry/internal/service/delivery/delivery.go"}},{"range":{"start":188331,"end":194642},"icon":"File","label":"platform/apps/belfry/internal/service/delivery/delivery_test.go","metadata":{"path":"platform/apps/belfry/internal/service/delivery/delivery_test.go"}},{"range":{"start":194643,"end":195611},"icon":"File","label":"platform/apps/belfry/internal/service/delivery/enums.go","metadata":{"path":"platform/apps/belfry/internal/service/delivery/enums.go"}},{"range":{"start":195612,"end":231221},"icon":"Folder","label":"v1","metadata":null},{"range":{"start":195615,"end":223660},"icon":"File","label":"platform/apps/belfry/internal/service/delivery/v1/delivery.pb.go","metadata":{"path":"platform/apps/belfry/internal/service/delivery/v1/delivery.pb.go"}},{"range":{"start":223661,"end":231220},"icon":"Folder","label":"deliveryv1connect","metadata":null},{"range":{"start":223679,"end":231219},"icon":"File","label":"platform/apps/belfry/internal/service/delivery/v1/deliveryv1connect/delivery.connect.go","metadata":{"path":"platform/apps/belfry/internal/service/delivery/v1/deliveryv1connect/delivery.connect.go"}},{"range":{"start":231223,"end":267084},"icon":"Folder","label":"inbox","metadata":null},{"range":{"start":231229,"end":234200},"icon":"File","label":"platform/apps/belfry/internal/service/inbox/inbox.go","metadata":{"path":"platform/apps/belfry/internal/service/inbox/inbox.go"}},{"range":{"start":234201,"end":241694},"icon":"File","label":"platform/apps/belfry/internal/service/inbox/inbox_test.go","metadata":{"path":"platform/apps/belfry/internal/service/inbox/inbox_test.go"}},{"range":{"start":241695,"end":267083},"icon":"Folder","label":"v1","metadata":null},{"range":{"start":241698,"end":261505},"icon":"File","label":"platform/apps/belfry/internal/service/inbox/v1/inbox.pb.go","metadata":{"path":"platform/apps/belfry/internal/service/inbox/v1/inbox.pb.go"}},{"range":{"start":261506,"end":267082},"icon":"Folder","label":"inboxv1connect","metadata":null},{"range":{"start":261521,"end":267081},"icon":"File","label":"platform/apps/belfry/internal/service/inbox/v1/inboxv1connect/inbox.connect.go","metadata":{"path":"platform/apps/belfry/internal/service/inbox/v1/inboxv1connect/inbox.connect.go"}},{"range":{"start":267085,"end":342846},"icon":"Folder","label":"notification","metadata":null},{"range":{"start":267098,"end":268079},"icon":"File","label":"platform/apps/belfry/internal/service/notification/enums.go","metadata":{"path":"platform/apps/belfry/internal/service/notification/enums.go"}},{"range":{"start":268080,"end":273480},"icon":"File","label":"platform/apps/belfry/internal/service/notification/notification.go","metadata":{"path":"platform/apps/belfry/internal/service/notification/notification.go"}},{"range":{"start":273481,"end":280660},"icon":"File","label":"platform/apps/belfry/internal/service/notification/notification_test.go","metadata":{"path":"platform/apps/belfry/internal/service/notification/notification_test.go"}},{"range":{"start":280661,"end":284028},"icon":"File","label":"platform/apps/belfry/internal/service/notification/processor.go","metadata":{"path":"platform/apps/belfry/internal/service/notification/processor.go"}},{"range":{"start":284029,"end":289150},"icon":"File","label":"platform/apps/belfry/internal/service/notification/processor_test.go","metadata":{"path":"platform/apps/belfry/internal/service/notification/processor_test.go"}},{"range":{"start":289151,"end":291323},"icon":"File","label":"platform/apps/belfry/internal/service/notification/testutils_test.go","metadata":{"path":"platform/apps/belfry/internal/service/notification/testutils_test.go"}},{"range":{"start":291324,"end":342845},"icon":"Folder","label":"v1","metadata":null},{"range":{"start":291327,"end":334662},"icon":"File","label":"platform/apps/belfry/internal/service/notification/v1/notification.pb.go","metadata":{"path":"platform/apps/belfry/internal/service/notification/v1/notification.pb.go"}},{"range":{"start":334663,"end":342844},"icon":"Folder","label":"notificationv1connect","metadata":null},{"range":{"start":334685,"end":342843},"icon":"File","label":"platform/apps/belfry/internal/service/notification/v1/notificationv1connect/notification.connect.go","metadata":{"path":"platform/apps/belfry/internal/service/notification/v1/notificationv1connect/notification.connect.go"}},{"range":{"start":342847,"end":342951},"icon":"File","label":"platform/apps/belfry/internal/service/option.go","metadata":{"path":"platform/apps/belfry/internal/service/option.go"}},{"range":{"start":342952,"end":405303},"icon":"Folder","label":"provider","metadata":null},{"range":{"start":342961,"end":343689},"icon":"File","label":"platform/apps/belfry/internal/service/provider/enums.go","metadata":{"path":"platform/apps/belfry/internal/service/provider/enums.go"}},{"range":{"start":343690,"end":348355},"icon":"File","label":"platform/apps/belfry/internal/service/provider/provider.go","metadata":{"path":"platform/apps/belfry/internal/service/provider/provider.go"}},{"range":{"start":348356,"end":352307},"icon":"File","label":"platform/apps/belfry/internal/service/provider/providers_test.go","metadata":{"path":"platform/apps/belfry/internal/service/provider/providers_test.go"}},{"range":{"start":352308,"end":353321},"icon":"File","label":"platform/apps/belfry/internal/service/provider/testutils_test.go","metadata":{"path":"platform/apps/belfry/internal/service/provider/testutils_test.go"}},{"range":{"start":353322,"end":405302},"icon":"Folder","label":"v1","metadata":null},{"range":{"start":353325,"end":393789},"icon":"File","label":"platform/apps/belfry/internal/service/provider/v1/provider.pb.go","metadata":{"path":"platform/apps/belfry/internal/service/provider/v1/provider.pb.go"}},{"range":{"start":393790,"end":405301},"icon":"Folder","label":"providerv1connect","metadata":null},{"range":{"start":393808,"end":405300},"icon":"File","label":"platform/apps/belfry/internal/service/provider/v1/providerv1connect/provider.connect.go","metadata":{"path":"platform/apps/belfry/internal/service/provider/v1/providerv1connect/provider.connect.go"}},{"range":{"start":405306,"end":408797},"icon":"Folder","label":"kubernetes","metadata":null},{"range":{"start":405317,"end":406871},"icon":"Folder","label":"base","metadata":null},{"range":{"start":405322,"end":406312},"icon":"File","label":"platform/apps/belfry/kubernetes/base/deployment.yaml","metadata":{"path":"platform/apps/belfry/kubernetes/base/deployment.yaml"}},{"range":{"start":406313,"end":406619},"icon":"File","label":"platform/apps/belfry/kubernetes/base/kustomization.yaml","metadata":{"path":"platform/apps/belfry/kubernetes/base/kustomization.yaml"}},{"range":{"start":406620,"end":406870},"icon":"File","label":"platform/apps/belfry/kubernetes/base/service.yaml","metadata":{"path":"platform/apps/belfry/kubernetes/base/service.yaml"}},{"range":{"start":406872,"end":407716},"icon":"Folder","label":"bootstrap","metadata":null},{"range":{"start":406882,"end":406983},"icon":"File","label":"platform/apps/belfry/kubernetes/bootstrap/config.yaml","metadata":{"path":"platform/apps/belfry/kubernetes/bootstrap/config.yaml"}},{"range":{"start":406984,"end":407422},"icon":"File","label":"platform/apps/belfry/kubernetes/bootstrap/kustomization.yaml","metadata":{"path":"platform/apps/belfry/kubernetes/bootstrap/kustomization.yaml"}},{"range":{"start":407423,"end":407552},"icon":"File","label":"platform/apps/belfry/kubernetes/bootstrap/namespace.yaml","metadata":{"path":"platform/apps/belfry/kubernetes/bootstrap/namespace.yaml"}},{"range":{"start":407553,"end":407715},"icon":"File","label":"platform/apps/belfry/kubernetes/bootstrap/serviceaccount.yaml","metadata":{"path":"platform/apps/belfry/kubernetes/bootstrap/serviceaccount.yaml"}},{"range":{"start":407717,"end":408796},"icon":"Folder","label":"init","metadata":null},{"range":{"start":407722,"end":408507},"icon":"File","label":"platform/apps/belfry/kubernetes/init/job.yaml","metadata":{"path":"platform/apps/belfry/kubernetes/init/job.yaml"}},{"range":{"start":408508,"end":408795},"icon":"File","label":"platform/apps/belfry/kubernetes/init/kustomization.yaml","metadata":{"path":"platform/apps/belfry/kubernetes/init/kustomization.yaml"}},{"range":{"start":408798,"end":414601},"icon":"File","label":"platform/apps/belfry/project.json","metadata":{"path":"platform/apps/belfry/project.json"}},{"range":{"start":414602,"end":423044},"icon":"Folder","label":"proto","metadata":null},{"range":{"start":414608,"end":416406},"icon":"Folder","label":"delivery/v1","metadata":null},{"range":{"start":414620,"end":416405},"icon":"File","label":"platform/apps/belfry/proto/delivery/v1/delivery.proto","metadata":{"path":"platform/apps/belfry/proto/delivery/v1/delivery.proto"}},{"range":{"start":416407,"end":417820},"icon":"Folder","label":"inbox/v1","metadata":null},{"range":{"start":416416,"end":417819},"icon":"File","label":"platform/apps/belfry/proto/inbox/v1/inbox.proto","metadata":{"path":"platform/apps/belfry/proto/inbox/v1/inbox.proto"}},{"range":{"start":417821,"end":420752},"icon":"Folder","label":"notification/v1","metadata":null},{"range":{"start":417837,"end":420751},"icon":"File","label":"platform/apps/belfry/proto/notification/v1/notification.proto","metadata":{"path":"platform/apps/belfry/proto/notification/v1/notification.proto"}},{"range":{"start":420753,"end":423043},"icon":"Folder","label":"provider/v1","metadata":null},{"range":{"start":420765,"end":423042},"icon":"File","label":"platform/apps/belfry/proto/provider/v1/provider.proto","metadata":{"path":"platform/apps/belfry/proto/provider/v1/provider.proto"}},{"range":{"start":423045,"end":424050},"icon":"File","label":"platform/apps/belfry/skaffold.yaml","metadata":{"path":"platform/apps/belfry/skaffold.yaml"}},{"range":{"start":424051,"end":426134},"icon":"File","label":"platform/apps/belfry/sqlc.yaml","metadata":{"path":"platform/apps/belfry/sqlc.yaml"}}]}